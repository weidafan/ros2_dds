/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)routingservice_infrastructure.h    generated by: makeheader    Mon Apr 25 08:04:01 2016
 *
 *		built from:	infrastructure.ifc
 */

#ifndef routingservice_infrastructure_h
#define routingservice_infrastructure_h


  #include "routingservice/routingservice_dll.h"
  #ifdef __cplusplus
      extern "C" {
  #endif


#define RTI_ROUTING_SERVICE_VERSION {5,2,3,0}


struct RTI_RoutingServiceNameValue {
    /*e @brief Property name */
    char * name;
    /*e @brief Property value */ 
    void * value;
};


struct RTI_RoutingServiceProperties {
    /*e @brief Array of configuration properties. */
    struct RTI_RoutingServiceNameValue * properties;
    /*e @brief Number of properties in the array. */
    int count;
    /*e @brief A non-zero value indicates that all the values of the 
        properties are strings (char *) */
    int string_values;
};

extern ROUTERDllExport
const char * RTI_RoutingServiceProperties_lookup_property(
    const struct RTI_RoutingServiceProperties * self,
    const char * name);


#define RTI_ROUTING_SERVICE_OK 0


#define RTI_ROUTING_SERVICE_ERROR 1


#define RTI_ROUTING_SERVICE_ERROR_MAX_LENGTH 1024


struct RTI_RoutingServiceEnvironmentImpl;


typedef struct RTI_RoutingServiceEnvironmentImpl RTI_RoutingServiceEnvironment;


struct RTI_RoutingServiceVersion {
    /*e
     * @brief Major version number
     */
    int major;
    /*e
     * @brief Minor version number
     */
    int minor;
    /*e
     * @brief Release version number
     */
    int release;
    /*e
     * @brief Revision of a release
     */
    int revision;
};


typedef enum {
    /*e
     * No logging (-verbosity 0)
     */
    RTI_ROUTING_SERVICE_VERBOSITY_NONE = 0,
    /*e
     * Exceptions (-verbosity 1)
     */
    RTI_ROUTING_SERVICE_VERBOSITY_EXCEPTION,
    /*e
     * Warnings (-verbosity 2)
     */
    RTI_ROUTING_SERVICE_VERBOSITY_WARN,
    /*e
     * Information (-verbosity 3)
     */
    RTI_ROUTING_SERVICE_VERBOSITY_INFO,
    /*e
     * Debug information (-verbosity 5 and 6)
     */
    RTI_ROUTING_SERVICE_VERBOSITY_DEBUG
} RTI_RoutingServiceVerbosity;

extern ROUTERDllExport
void RTI_RoutingServiceEnvironment_set_error_w_params(
        RTI_RoutingServiceEnvironment * self,
        int overwrite,
        int error_code, 
        int native_error_code, 
        const char * error_format, ...);

extern ROUTERDllExport
void RTI_RoutingServiceEnvironment_set_error(
        RTI_RoutingServiceEnvironment * self,
        const char * error_format, ...);

extern ROUTERDllExport 
void RTI_RoutingServiceEnvironment_clear_error(
        RTI_RoutingServiceEnvironment * self);

extern ROUTERDllExport 
RTI_RoutingServiceVerbosity 
RTI_RoutingServiceEnvironment_get_verbosity(
        const RTI_RoutingServiceEnvironment * self);

extern ROUTERDllExport
void RTI_RoutingServiceEnvironment_get_version(
        const RTI_RoutingServiceEnvironment * self,
        struct RTI_RoutingServiceVersion * version);

extern ROUTERDllExport
int RTI_RoutingServiceEnvironment_error_occurred(
        const RTI_RoutingServiceEnvironment * self);

extern ROUTERDllExport
const char * RTI_RoutingServiceEnvironment_get_error_message(
        const RTI_RoutingServiceEnvironment * self);


#define RTI_ROUTING_SERVICE_TYPE_REPRESENTATION_DYNAMIC_TYPE 0


#define RTI_ROUTING_SERVICE_TYPE_REPRESENTATION_XML 1


#define RTI_ROUTING_SERVICE_TYPE_REPRESENTATION_JAVA_OBJECT 2


#define RTI_ROUTING_SERVICE_TYPE_REPRESENTATION_FIRST_CUSTOM_REPRESENTATION 100


#define RTI_ROUTING_SERVICE_DATA_REPRESENTATION_DYNAMIC_DATA 0


#define RTI_ROUTING_SERVICE_DATA_REPRESENTATION_XML 1


#define RTI_ROUTING_SERVICE_DATA_REPRESENTATION_JAVA_OBJECT 2


#define RTI_ROUTING_SERVICE_DATA_REPRESENTATION_FIRST_CUSTOM_REPRESENTATION 100


typedef int RTI_RoutingServiceTypeRepresentationKind;


typedef void * RTI_RoutingServiceTypeRepresentation;


struct RTI_RoutingServiceTypeInfo {
    /*e \dref_TypeInfo_type_name */
    char * type_name;
    /*e \dref_TypeInfo_representation_kind */
    RTI_RoutingServiceTypeRepresentationKind type_representation_kind;
    /*e \dref_TypeInfo_type_representation */
    RTI_RoutingServiceTypeRepresentation type_representation;
};


typedef int RTI_RoutingServiceDataRepresentationKind;

extern ROUTERDllExport
const int RTI_ROUTING_SERVICE_COUNT_UNLIMITED;


typedef void * RTI_RoutingServiceSample;


typedef void * RTI_RoutingServiceSampleInfo;


typedef enum {
    RTI_ROUTING_SERVICE_LOGICAL_VALUE_FALSE,
    RTI_ROUTING_SERVICE_LOGICAL_VALUE_TRUE,
    RTI_ROUTING_SERVICE_LOGICAL_VALUE_ANY,            
}RTI_RoutingServiceLogicalValue;


struct RTI_RoutingServiceSampleState {    
    RTI_RoutingServiceLogicalValue sample_read;
    RTI_RoutingServiceLogicalValue instance_new;
    RTI_RoutingServiceLogicalValue instance_disposed;
    RTI_RoutingServiceLogicalValue instance_unregistered;
};


#define RTI_RoutingServiceSampleState_INITIALIZER \
        {RTI_ROUTING_SERVICE_LOGICAL_VALUE_ANY, \
         RTI_ROUTING_SERVICE_LOGICAL_VALUE_ANY, \
         RTI_ROUTING_SERVICE_LOGICAL_VALUE_ANY, \
         RTI_ROUTING_SERVICE_LOGICAL_VALUE_ANY}


#define RTI_ROUTING_SERVICE_INSTANCE_KEY_HASH_MAX_LENGTH (16)


struct RTI_RoutingServiceInstanceHandle {
    unsigned char key_hash[RTI_ROUTING_SERVICE_INSTANCE_KEY_HASH_MAX_LENGTH];
    int length;
    int is_valid;
};

extern ROUTERDllExport
const struct RTI_RoutingServiceInstanceHandle RTI_ROUTING_SERVICE_INSTANCE_HANDLE_NIL;


#define RTI_RoutingServiceInstanceHandle_is_nil(self) \
    !(self).is_valid

 
struct RTI_RoutingServiceSequenceNumber {
    int high;
    unsigned int low;
};

extern ROUTERDllExport
const struct RTI_RoutingServiceSequenceNumber RTI_ROUTING_SERVICE_SEQUENCE_NUMBER_UNKNOWN;


struct RTI_RoutingServiceStreamInfo {
    /*e \dref_StreamInfo_disposed
    */
    int disposed;
    /*e \dref_StreamInfo_stream_name 
    */
    char * stream_name;
    /*e \dref_StreamInfo_type_info
     */
    struct RTI_RoutingServiceTypeInfo type_info;
};

extern ROUTERDllExport
struct RTI_RoutingServiceStreamInfo * 
RTI_RoutingServiceStreamInfo_new_discovered(
    const char * stream_name, 
    const char * ed_type_name,
    RTI_RoutingServiceTypeRepresentationKind type_representation_kind,
    RTI_RoutingServiceTypeRepresentation type_representation);

extern ROUTERDllExport 
struct RTI_RoutingServiceStreamInfo * 
RTI_RoutingServiceStreamInfo_new_disposed(
    const char * stream_name);

extern ROUTERDllExport
void RTI_RoutingServiceStreamInfo_delete(
    struct RTI_RoutingServiceStreamInfo * self);


  #ifdef __cplusplus
    }	/* extern "C" */
  #endif

#endif /* routingservice_infrastructure_h */
