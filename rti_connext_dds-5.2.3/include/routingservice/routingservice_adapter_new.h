/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)routingservice_adapter_new.h    generated by: makeheader    Mon Apr 25 08:04:01 2016
 *
 *		built from:	adapter_new.ifc
 */

#ifndef routingservice_adapter_new_h
#define routingservice_adapter_new_h


  #include "routingservice/routingservice_infrastructure.h"
  #ifdef __cplusplus
      extern "C" {
  #endif

 
typedef void (*RTI_RoutingServiceAdapterNewEntity_UpdateFcn)(
    void * entity_data,
    const struct RTI_RoutingServiceProperties * properties,
    RTI_RoutingServiceEnvironment * env);

 
struct RTI_RoutingServiceSampleSelector;


typedef enum {
    RTI_ROUTING_SERVICE_INSTANCE_SELECTION_CURRENT,
    RTI_ROUTING_SERVICE_INSTANCE_SELECTION_NEXT
}RTI_RoutingServiceInstanceSelectionKind;

struct RTI_RoutingServiceSampleSelectorParameters{
    /*i @brief State that the samples to read must meet */
    struct RTI_RoutingServiceSampleState sample_state;
    
    /*i @brief reference instance */
    struct RTI_RoutingServiceInstanceHandle instance_handle;
    /*i @brief indicates which instance to read: the instance_handle itself
     * or the next one to instance_handle */
    RTI_RoutingServiceInstanceSelectionKind instance_selection_kind;   
    
    /*@ @brief Specifies the previous sequence number from which samples will
     * be read*/
    struct RTI_RoutingServiceSequenceNumber previous_sequence_number;   
    
    /*i @brief Maximum number of different instance to read. It applies when
     * the instance selection is NEXT */
    int instance_count_max;
    /*i @brief Maximum number of samples to read */
    int sample_count_max;    
    
    /*@ @brief Expression that allow specify a subset of samples to read that
     * may have other characteristics than the ones provided by these parameters */
    char * expression;    
};


/*i \ingroup RTI_RoutingServiceAdapterNewModule
 * 
 * @brief Initializes the parameters to values that represent a normal call
 * to read, that is, as if no selection were made.
 * 
 * Calling read_w_selector passing a selector with this parameters is equivalent
 * to call read
 */
#define RTI_RoutingServiceSampleSelectorParameters_initialize(selector_parameters) \
{ \
    struct RTI_RoutingServiceSampleState sampleState = RTI_RoutingServiceSampleState_INITIALIZER;\
    (selector_parameters)->sample_state = sampleState; \
    (selector_parameters)->instance_handle = RTI_ROUTING_SERVICE_INSTANCE_HANDLE_NIL; \
    (selector_parameters)->instance_selection_kind = RTI_ROUTING_SERVICE_INSTANCE_SELECTION_NEXT; \
    (selector_parameters)->previous_sequence_number = RTI_ROUTING_SERVICE_SEQUENCE_NUMBER_UNKNOWN; \
    (selector_parameters)->instance_count_max = RTI_ROUTING_SERVICE_COUNT_UNLIMITED; \
    (selector_parameters)->sample_count_max = RTI_ROUTING_SERVICE_COUNT_UNLIMITED; \
    (selector_parameters)->expression = NULL; \
}


typedef void (*RTI_RoutingServiceSampleSelector_SetParametersFcn)(
        void * sample_selector_data,
        struct RTI_RoutingServiceSampleSelectorParameters * selector_parameters,
        RTI_RoutingServiceEnvironment * env);


typedef void (*RTI_RoutingServiceSampleSelector_GetParametersFcn)(
        void * sample_selector_data,
        struct RTI_RoutingServiceSampleSelectorParameters * selector_parameters,
        RTI_RoutingServiceEnvironment * env);


typedef void (*RTI_RoutingServiceSampleSelector_SetSampleStateFcn)(
        void * sample_selector_data,
        struct RTI_RoutingServiceSampleState * sample_state,
        RTI_RoutingServiceEnvironment * env);


typedef void (*RTI_RoutingServiceSampleSelector_SetInstanceHandleFcn)(
        void * sample_selector_data,
        const struct RTI_RoutingServiceInstanceHandle * instance_handle,
        RTI_RoutingServiceInstanceSelectionKind instance_selection_kind,
        RTI_RoutingServiceEnvironment * env);


typedef void (*RTI_RoutingServiceSampleSelector_SetPreviousSequenceNumberFcn)(
        void * sample_selector_data,
        struct RTI_RoutingServiceSequenceNumber * sequence_number,
        RTI_RoutingServiceEnvironment * env);


typedef void (*RTI_RoutingServiceSampleSelector_SetMaxInstanceCountFcn)(
        void * sample_selector_data,
        int instance_count_max,
        RTI_RoutingServiceEnvironment * env);


typedef void (*RTI_RoutingServiceSampleSelector_SetMaxSampleCountFcn)(
        void * sample_selector_data,
        int sample_count_max,
        RTI_RoutingServiceEnvironment * env);


typedef void (*RTI_RoutingServiceSampleSelector_SetExpressionFcn)(
        void * sample_selector_data,
        const char * expression,
        RTI_RoutingServiceEnvironment * env);

 
struct RTI_RoutingServiceSampleSelector {
       
    /*i @brief Handles the setting of parameters */
    RTI_RoutingServiceSampleSelector_SetParametersFcn set_selector_parameters;
    /*i @brief Handles the retrieving of parameters */
    RTI_RoutingServiceSampleSelector_GetParametersFcn get_selector_parameters;
         /*i @brief Handles the setting of the sample state */
    RTI_RoutingServiceSampleSelector_SetSampleStateFcn set_sample_state;
    /*i @brief Handles the setting of the instance handle */
    RTI_RoutingServiceSampleSelector_SetInstanceHandleFcn 
            set_instance_handle;
    /*i @brief Handles the setting of the previous sequence number */
    RTI_RoutingServiceSampleSelector_SetPreviousSequenceNumberFcn
            set_previous_sequence_number;
    /*i @brief Handles the setting of the maximum instance count */
    RTI_RoutingServiceSampleSelector_SetMaxInstanceCountFcn 
            set_max_instance_count;
    /*i @brief Handles the setting of the maximum sample count */
    RTI_RoutingServiceSampleSelector_SetMaxInstanceCountFcn 
            set_max_sample_count;
    /*i @brief Handles the setting of the expression */
    RTI_RoutingServiceSampleSelector_SetExpressionFcn set_expression;
    
    /*i @brief implementation data */
    void * sample_selector_data;    
};

 
struct RTI_RoutingServiceStreamReaderNew;

 
typedef void (*RTI_RoutingServiceStreamReaderNew_ReadFcn)(
        void * stream_reader_data,
        RTI_RoutingServiceSample ** sample_array,
        RTI_RoutingServiceSampleInfo ** sample_info_array,
        int * array_length,
        RTI_RoutingServiceEnvironment * environment);

 
typedef void (*RTI_RoutingServiceStreamReaderNew_TakeFcn)(
        void * stream_reader_data,
        RTI_RoutingServiceSample ** sample_array,
        RTI_RoutingServiceSampleInfo ** sample_info_array,
        int * array_length,
        RTI_RoutingServiceEnvironment * environment);

 
typedef void (*RTI_RoutingServiceStreamReaderNew_ReadWithSelectorFcn)(
        void * stream_reader_data,
        RTI_RoutingServiceSample ** sample_array,
        RTI_RoutingServiceSampleInfo ** sample_info_array,
        int * array_length,
        void * sample_selector_data,
        RTI_RoutingServiceEnvironment * environment);

 
typedef void (*RTI_RoutingServiceStreamReaderNew_TakeWithSelectorFcn)(
        void * stream_reader_data,
        RTI_RoutingServiceSample ** sample_array,
        RTI_RoutingServiceSampleInfo ** sample_info_array,
        int * array_length,
        void * sample_selector_data,
        RTI_RoutingServiceEnvironment * environment);

typedef void (*RTI_RoutingServiceStreamReaderNew_ReturnLoanFcn)(
    void * stream_reader_data,
    RTI_RoutingServiceSample * sample_list,
    RTI_RoutingServiceSampleInfo * info_list,
    int array_length,
    RTI_RoutingServiceEnvironment * env);


typedef struct RTI_RoutingServiceSampleSelector * 
(*RTI_RoutingServiceStreamReaderNew_CreateSelectorFcn)(
        void * stream_reader_data,
        RTI_RoutingServiceEnvironment * env);


typedef void (*RTI_RoutingServiceStreamReaderNew_DeleteSelectorFcn)(
        void * stream_reader_data,
        struct RTI_RoutingServiceSampleSelector * selector,
        RTI_RoutingServiceEnvironment * environment);


typedef struct RTI_RoutingServiceInstanceHandle
(*RTI_RoutingServiceStreamReaderNew_getInstanceHandleFromSampleInfoFcn)(
        void * stream_reader_data,
        RTI_RoutingServiceSampleInfo sample_info,
        RTI_RoutingServiceEnvironment * env);


typedef struct RTI_RoutingServiceInstanceHandle
(*RTI_RoutingServiceStreamReaderNew_lookUpInstanceHandleFcn)(
        void * stream_reader_data,
        RTI_RoutingServiceSample sample,
        RTI_RoutingServiceEnvironment * env);


typedef struct RTI_RoutingServiceSequenceNumber
(*RTI_RoutingServiceStreamReaderNew_getSequenceNumberFromSampleInfoFcn)(
        void * stream_reader_data,
        RTI_RoutingServiceSampleInfo sample_info,
        RTI_RoutingServiceEnvironment * env);

 
struct RTI_RoutingServiceStreamReaderNew{
    
    /*i @brief Handles the taking of samples (required) */
    RTI_RoutingServiceStreamReaderNew_TakeFcn take;
    /*i @brief Handles the reading of samples */
    RTI_RoutingServiceStreamReaderNew_ReadFcn read;    
     /*i @brief Handles the taking the selection of the specified samples */
    RTI_RoutingServiceStreamReaderNew_TakeWithSelectorFcn take_w_selector;
    /*i @brief Handles the reading the selection of the specified samples */
    RTI_RoutingServiceStreamReaderNew_ReadWithSelectorFcn read_w_selector;   
    /*i @brief Handles the returning the loan on the read samples and info (required) */
    RTI_RoutingServiceStreamReaderNew_ReturnLoanFcn return_loan;
    /*i @brief Handles the creation of a Selector */
    RTI_RoutingServiceStreamReaderNew_CreateSelectorFcn create_selector;
    /*i @brief Handles the deletion of a Selector */
    RTI_RoutingServiceStreamReaderNew_DeleteSelectorFcn delete_selector;
    /*i @brief Handles the retrieving of an instance handle from a SampleInfo */
    RTI_RoutingServiceStreamReaderNew_getInstanceHandleFromSampleInfoFcn 
            get_instance_handle_from_sample_info;
     /*i @brief Handles the retrieving of an instance handle from a SampleInfo */
    RTI_RoutingServiceStreamReaderNew_getSequenceNumberFromSampleInfoFcn 
            get_sequence_number_from_sample_info;
    /*i @brief Handles the look up of an instance handle given a sample */
    RTI_RoutingServiceStreamReaderNew_lookUpInstanceHandleFcn 
            lookup_instance_handle;
    /*i @brief Handles the update of the StreamReader */
    RTI_RoutingServiceAdapterNewEntity_UpdateFcn update;
    
    /*i @brief implementation data */
    void * stream_reader_data;
    
};

typedef 
void (*RTI_RoutingServiceStreamReaderListenerNew_OnDataAvailableCallback)(
    void * stream_reader_data,
    void * listener_data);


struct RTI_RoutingServiceStreamReaderListenerNew {
    /*i \dref_StreamReaderListener_listener_data
    */
    void * listener_data;
    /*i \dref_StreamReaderListener_on_data_available
    */
    RTI_RoutingServiceStreamReaderListenerNew_OnDataAvailableCallback on_data_available;
};

 
struct RTI_RoutingServiceStreamWriterNew;

typedef int (*RTI_RoutingServiceStreamWriterNew_WriteFcn)(
    void * stream_writer_data,
    const RTI_RoutingServiceSample * sample_list,
    const RTI_RoutingServiceSampleInfo * info_list,
    int count,
    RTI_RoutingServiceEnvironment * env);

 
struct RTI_RoutingServiceStreamWriterNew{
    
    /*i @brief Handles the writing of samples (required) */
    RTI_RoutingServiceStreamWriterNew_WriteFcn write;
    /*i @brief Handles the update of the StreamWriter */
    RTI_RoutingServiceAdapterNewEntity_UpdateFcn update;
    
    /*i @brief implementation data */
    void * stream_writer_data;
    
};

        
struct RTI_RoutingServiceSessionNew;

 
struct RTI_RoutingServiceSessionNew{
    
    /*i @brief Handles configuration changes in a session. */
    RTI_RoutingServiceAdapterNewEntity_UpdateFcn update;
    
    /*i @brief implementation data */
    void * session_data;

};


struct RTI_RoutingServiceConnectionNew;

 
typedef const char * (*RTI_RoutingServiceConnectionNew_ToStringFcn)(
        void * connection_data,
        RTI_RoutingServiceEnvironment * environment);

 
typedef struct RTI_RoutingServiceSessionNew * 
(*RTI_RoutingServiceConnectionNew_CreateSessionFcn)(
        void * connection_data,
        const struct RTI_RoutingServiceProperties * properties,
        RTI_RoutingServiceEnvironment * environment);

typedef void (*RTI_RoutingServiceConnectionNew_DeleteSessionFcn)(
        void * connection_data,
        struct RTI_RoutingServiceSessionNew * session,
        RTI_RoutingServiceEnvironment * environment);

 
typedef struct RTI_RoutingServiceStreamReaderNew * 
(*RTI_RoutingServiceConnectionNew_CreateStreamReaderFcn)(
        void * connection_data,
        void * session_data,
        const struct RTI_RoutingServiceStreamInfo * stream_info,
        const struct RTI_RoutingServiceProperties * properties,
        const struct RTI_RoutingServiceStreamReaderListenerNew * listener,
        RTI_RoutingServiceEnvironment * environment);

 
typedef void (*RTI_RoutingServiceConnectionNew_DeleteStreamReaderFcn)(
        void * connection_data,
        struct RTI_RoutingServiceStreamReaderNew * stream_reader,
        RTI_RoutingServiceEnvironment * environment);

typedef struct RTI_RoutingServiceStreamWriterNew * 
(*RTI_RoutingServiceConnectionNew_CreateStreamWriterFcn)(
        void * connection_data,
        void * session_data,
        const struct RTI_RoutingServiceStreamInfo * stream_info,
        const struct RTI_RoutingServiceProperties * properties,
        RTI_RoutingServiceEnvironment * environment);

typedef void (*RTI_RoutingServiceConnectionNew_DeleteStreamWriterFcn)(
        void * connection_data,
        struct RTI_RoutingServiceStreamWriterNew * stream_writer,
        RTI_RoutingServiceEnvironment * environment);

 
typedef struct RTI_RoutingServiceStreamReaderNew * 
(*RTI_RoutingServiceConnectionNew_GetDiscoveryReaderFcn)(
    void * connection_data,
    RTI_RoutingServiceEnvironment * environment);

 
typedef RTI_RoutingServiceTypeRepresentation 
(*RTI_RoutingServiceConnectionNew_CopyTypeRepresentationFcn)(
    void * connection_data,
    RTI_RoutingServiceTypeRepresentationKind type_representation_kind,
    RTI_RoutingServiceTypeRepresentation type_representation,
    RTI_RoutingServiceEnvironment * environment);

typedef 
void (*RTI_RoutingServiceConnectionNew_DeleteTypeRepresentationFcn)(
    void * connection_data,
    RTI_RoutingServiceTypeRepresentationKind type_representation_kind,
    RTI_RoutingServiceTypeRepresentation type_representation,
    RTI_RoutingServiceEnvironment * environment);

 
struct RTI_RoutingServiceConnectionNew{

    /*i @brief Handles the creation of sessions (optional). */
    RTI_RoutingServiceConnectionNew_CreateSessionFcn create_session;
    /*i @brief Handles the deletion of sessions (optional). */
    RTI_RoutingServiceConnectionNew_DeleteSessionFcn delete_session;
    /*i @brief Handles the creation of stream readers (optional for write-only adapters). */
    RTI_RoutingServiceConnectionNew_CreateStreamReaderFcn create_stream_reader;
    /*i @brief Handles the deletion of stream readers (optional for write-only adapters). */
    RTI_RoutingServiceConnectionNew_DeleteStreamReaderFcn delete_stream_reader;
    /*i @brief Handles the creation of stream writers (optional for read-only adapters). */
    RTI_RoutingServiceConnectionNew_CreateStreamWriterFcn create_stream_writer;
    /*i @brief Handles the deletion of stream writers (optional for read-only adapters). */
    RTI_RoutingServiceConnectionNew_DeleteStreamWriterFcn delete_stream_writer;
    /*i @brief Gets the input stream discovery reader (optional). */
    RTI_RoutingServiceConnectionNew_GetDiscoveryReaderFcn get_input_stream_discovery_reader;
    /*i @brief Gets the output stream discovery reader (optional). */
    RTI_RoutingServiceConnectionNew_GetDiscoveryReaderFcn get_output_stream_discovery_reader;
    /*i @brief Handles the copy of type representations (optional). */
    RTI_RoutingServiceConnectionNew_CopyTypeRepresentationFcn copy_type_representation;
    /*i @brief Handles the deletion of type representations (optional). */
    RTI_RoutingServiceConnectionNew_DeleteTypeRepresentationFcn delete_type_representation;
    /*i @brief Returns the string representation of a connection for logging purposes (optional). */
    RTI_RoutingServiceConnectionNew_ToStringFcn to_string;
    /*i @brief \not_supported Handles configuration changes in a connection (optional). */
    RTI_RoutingServiceAdapterNewEntity_UpdateFcn update;
    
    /*i @brief implementation data */
    void * connection_data;
    
};

 
struct RTI_RoutingServiceAdapterPluginNew;

 
typedef void (*RTI_RoutingServiceAdapterPluginNew_DeleteConnectionFcn)(
        void * adapter_plugin_data,
        struct RTI_RoutingServiceConnectionNew * connection,
        RTI_RoutingServiceEnvironment * environment);


typedef struct RTI_RoutingServiceConnectionNew * 
(*RTI_RoutingServiceAdapterPluginNew_CreateConnectionFcn)(
    void * adapter_plugin_data,
    const char * routing_serviceName,
    const char * routing_service_group_name,        
    const struct RTI_RoutingServiceStreamReaderListenerNew * output_stream_discovery_listener,
    const struct RTI_RoutingServiceStreamReaderListenerNew * input_stream_discovery_listener,
    const struct RTI_RoutingServiceTypeInfo ** type_info_array,
    int type_info_array_length,
    const struct RTI_RoutingServiceProperties * properties,
    RTI_RoutingServiceEnvironment * environment);

typedef 
void (*RTI_RoutingServiceAdapterPluginNew_DeleteFcn)(
    struct RTI_RoutingServiceAdapterPluginNew * self,
    RTI_RoutingServiceEnvironment * environment);

 
struct RTI_RoutingServiceAdapterPluginNew{
    
     /* Adapter interface */
    int _init;
    struct RTI_RoutingServiceVersion _rs_version;

    /*i \brief The version of this adapter plugin */
    struct RTI_RoutingServiceVersion plugin_version;
    
    /*i @brief Deletes the AdapterPlugin */
    RTI_RoutingServiceAdapterPluginNew_DeleteFcn plugin_delete;

    /*i @brief Handles the creation of connections (required). */
    RTI_RoutingServiceAdapterPluginNew_CreateConnectionFcn create_connection;
    /*i @brief Handles the deletion of connections (required). */
    RTI_RoutingServiceAdapterPluginNew_DeleteConnectionFcn delete_connection;    
    
    /*i @brief implementation data */
    void * adapter_plugin_data;
    
};

 
typedef struct RTI_RoutingServiceAdapterPluginNew * 
(*RTI_RoutingServiceAdapterPluginNew_CreateFcn)(
        const struct RTI_RoutingServiceProperties * properties,
        RTI_RoutingServiceEnvironment * environment);


/*i \ingroup RTI_RoutingServiceAdapterNewModule
 \hideinitializer
 @brief Initializes the adapter plugin structure.

 This macro must be called to initialize the
 return value of RTI_RoutingServiceAdapterPluginNew_CreateFcn

 @param adapter Pointer to the adapter plugin structure

 @see \ref RTI_RoutingServiceAdapterPluginNew_CreateFcn
*/
#define RTI_RoutingServiceAdapterPluginNew_initialize(adapter)                   \
{                                                                             \
    struct RTI_RoutingServiceVersion rsVersion = RTI_ROUTING_SERVICE_VERSION; \
    struct RTI_RoutingServiceVersion adapterVersion = {0,0,0,0};              \
    (adapter)->_init = 7654321;                                               \
    (adapter)->_rs_version = rsVersion;                                       \
    (adapter)->plugin_version = adapterVersion;                               \
    (adapter)->plugin_delete = 0;                                             \
    (adapter)->create_connection = 0;                                         \
    (adapter)->delete_connection = 0;                                         \
    (adapter)->adapter_plugin_data = 0;                                       \
}



  #ifdef __cplusplus
    }	/* extern "C" */
  #endif


/* end of $Id$ */
#endif /* routingservice_adapter_new_h */
