/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)osapi_heap.h    generated by: makeheader    Mon Apr 25 07:49:33 2016
 *
 *		built from:	heap.ifc
 */

#ifndef osapi_heap_h
#define osapi_heap_h



  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef osapi_dll_h
    #include "osapi/osapi_dll.h"
  #endif
  #ifndef osapi_alignment_h
    #include "osapi/osapi_alignment.h"
  #endif  

#ifdef __cplusplus
    extern "C" {
#endif


#define RTI_OSAPI_HEAP_MAX_ALLOC_SIZE (RTI_INT32_MAX-1024)

struct RTIOsapiHeapStat {
    /*e current heap used in Bytes */
    int currentUsage;
    /*e maximum heap usage in Bytes */
    int highWatermark;
    /*e minimum heap usage in Bytes */
    int lowWatermark;
    /*e number of allocations (Realloc counted as Malloc + Free) */
    int allocCount;
    /*e number of frees (Realloc counted as Malloc + Free) */
    int freeCount;
    /*e the ID that will be assigned to the next allocated block
       0 => Statistics are not being gathered
       1 => No block have been allocated
       This value is not affected by a call to RTIOsapiStat_statReset
    */
    int nextBlockId;
};


#define RTI_OSAPI_HEAP_STAT_DEFAULT { \
0 /* currentUsage */, \
0 /* highWatermark */, \
0 /* lowWatermark */, \
0 /* allocCount */, \
0 /* freeCount */, \
0 /* nextBlockId */ \
}

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateString(void **stringStoragePointer, int stringSize);

extern RTIOsapiDllExport RTIBool
RTIOsapiHeap_reallocateString(char **stringStoragePointer, int stringSize);

extern RTIOsapiDllExport void
RTIOsapiHeap_freeString(char *stringStorage);

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateBufferAligned(char **buffer, size_t size, 
                                   RTIOsapiAlignment alignment);

extern RTIOsapiDllExport void
RTIOsapiHeap_reallocateBufferAligned(char **buffer, size_t size, 
                                   RTIOsapiAlignment alignment);

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateBufferNotAligned(char **buffer, size_t size);

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateBuffer(char **buffer, size_t size, 
                            RTIOsapiAlignment alignment);

extern RTIOsapiDllExport RTIBool
RTIOsapiHeap_reallocateBuffer(char *buffer, size_t size);

extern RTIOsapiDllExport void RTIOsapiHeap_freeBufferAligned(char *buffer);

extern RTIOsapiDllExport void RTIOsapiHeap_freeBufferNotAligned(char *buffer);

extern RTIOsapiDllExport void RTIOsapiHeap_freeBuffer(char *buffer);

extern RTIOsapiDllExport void RTIOsapiHeap_statGet(struct RTIOsapiHeapStat *stat);

extern RTIOsapiDllExport void RTIOsapiHeap_statReset();

extern RTIOsapiDllExport 
RTIBool RTIOsapiHeap_blockInfoGet(void *address, unsigned int *blockId, int *blockSize);

extern RTIOsapiDllExport void *RTIOsapiHeap_malloc(size_t size);

extern RTIOsapiDllExport void *RTIOsapiHeap_calloc(size_t numElem, size_t elemSize);

extern RTIOsapiDllExport void *RTIOsapiHeap_realloc(void *ptr, int size);

extern RTIOsapiDllExport void RTIOsapiHeap_free(void *ptr);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "osapi/osapi_heap_impl.h"

#endif /* osapi_heap_h */
