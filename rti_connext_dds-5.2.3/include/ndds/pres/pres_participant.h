/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)pres_participant.h    generated by: makeheader    Mon Apr 25 07:50:17 2016
 *
 *		built from:	participant.ifc
 */

#ifndef pres_participant_h
#define pres_participant_h


 #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
 #endif
 #ifndef osapi_ntptime_h
    #include "osapi/osapi_ntptime.h"
 #endif
 #ifndef reda_sequenceNumber_h
    #include "reda/reda_sequenceNumber.h"
 #endif
 #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
 #endif
 #ifndef netio_common_h
    #include "netio/netio_common.h"
 #endif
 #ifndef mig_rtps_h
    #include "mig/mig_rtps.h"
 #endif
 #ifndef commend_activeFacade_h
    #include "commend/commend_activeFacade.h"
 #endif
 #ifndef pres_dll_h
    #include "pres/pres_dll.h"
 #endif
 #ifndef pres_common_h
    #include "pres/pres_common.h"
 #endif

#ifdef __cplusplus
    extern "C" {
#endif


/* This property when enabled will allow the creation of a topic multiple times
 * assuming that the type name is different
 */
#define PRES_PARTICIPANT_ALLOW_DUPLICATE_TOPIC "dds.participant.allow_duplicate_topic"


/* This property can be used to enable backward compatibility with the UDPv6
 * and SHMEM locators after fixing CORE-5788
 */
#define PRES_PARTICIPANT_USE_510_COMPATIBLE_LOCATOR_KINDS_PROPERTY_NAME \
    "dds.transport.use_510_compatible_locator_kinds"


#define PRES_PARTICIPANT_INITIAL_AUTO_OBJECT_ID_PROPERTY_NAME \
    "dds.participant.initial_auto_object_id"


/*e \ingroup PRESParticipantModule
  maximum number of manager key.
 */
#define PRES_PARTICIPANT_MANAGER_KEY_COUNT_MAX         (4)


struct PRES_RtpsWellKnownPorts_t {
    
    RTI_INT32 port_base;
    RTI_INT32 domain_id_gain;
    RTI_INT32 participant_id_gain;
    RTI_INT32 builtin_multicast_port_offset;
    RTI_INT32 builtin_unicast_port_offset;
    RTI_INT32 user_multicast_port_offset;
    RTI_INT32 user_unicast_port_offset;
};

struct PRESParticipantDerivableQosPolicy {
    /*e
     * Whether the current value has been derived from the participant
     */
    RTIBool isDerivedFromParticipant;
};

struct PRESLocatorDerivableQosPolicy {
    /*e formalize the fact that this is derived from a derivable policy */
    struct PRESParticipantDerivableQosPolicy parent;
    /*e content of the policy itself */
    struct PRESLocatorQosPolicy policy;
};


/*e \ingroup PRESParticipantModule
  Default locator Qos policy value
*/
  #define PRES_LOCATOR_DERIVABLE_QOS_POLICY_DEFAULT { \
    {RTI_TRUE}, /* derived? */			      \
    PRES_LOCATOR_QOS_POLICY_DEFAULT                   \
  }

struct PRESParticipantParameter {
    /*e immutable */
    MIGRtpsProtocolVersion protocolVersion;
    /*e immutable */
    MIGRtpsVendorId vendorId;
    
    /*e immutable */
    struct PRESLocatorQosPolicy metatrafficUnicastLocator;
    /*e immutable */
    struct PRESLocatorQosPolicy metatrafficMulticastLocator;

    /*e immutable */
    struct PRESLocatorQosPolicy defaultUnicastLocator;
    /*e immutable */
    struct PRESLocatorQosPolicy defaultMulticastLocator;
    /*e immutable */
    int managerKeyCount;
    /*e immutable */
    RTI_UINT32 managerKey[PRES_PARTICIPANT_MANAGER_KEY_COUNT_MAX];
    /*e @brief  The length of time a participant declaration should be
     *          considered valid.
     * 
     * This value is immutable.
     * 
     * @default Infinite. Not all users of this structure will supply a lease
     *          duration value; in that case, the record is valid
     *          indefinitely.
     */
    RTINtpTime leaseDuration;
    /*e mutable */
    struct PRESUserDataQosPolicy userData;
    /*e mutable */
    RTI_UINT32 peerHostEpoch;
    /*e mutable */
    struct PRESPropertyQosPolicy propertyList;
    /*e immutable */
    struct PRESProductVersion productVersion;
    /*e immutable */
    PRESDiscoveryPluginPromiscuityKind pluginPromiscuityKind;
    /*e immutable */
    PRESBuiltinEndpointMask builtinEndpointMask;
    /*e immutable */
    struct PRESEntityNameQosPolicy participantName;
    /*e immutable */
    int domainId;
    /*e immutable */
    struct PRESSequenceTransportInfo transportInfoSeq;
};


/*e \ingroup MIGRtpsParticipantModule
  Default manager key for participant parameter.
*/
#define PRES_PARTICIPANT_PARAMETER_MANAGER_KEY_INVALID (0)


/*e \ingroup PRESParticipantModule
  Default participant parameter value.

  The RTPS protocol version is defaulted to the latest (2.1) as implemented.
*/
  #define PRES_PARTICIPANT_PARAMETER_DEFAULT { \
       MIG_RTPS_PROTOCOL_VERSION, \
       MIG_RTPS_VENDOR_ID_UNKNOWN, \
       PRES_LOCATOR_QOS_POLICY_DEFAULT, /* metatrafficUnicast */ \
       PRES_LOCATOR_QOS_POLICY_DEFAULT, /* metatrafficMulticast */ \
       PRES_LOCATOR_QOS_POLICY_DEFAULT, /* defaultUnicast */ \
       PRES_LOCATOR_QOS_POLICY_DEFAULT, /* defaultMulticast */ \
       0, /* managerKeyCount */ \
       {PRES_PARTICIPANT_PARAMETER_MANAGER_KEY_INVALID, /* managerKey */ \
	PRES_PARTICIPANT_PARAMETER_MANAGER_KEY_INVALID, \
        PRES_PARTICIPANT_PARAMETER_MANAGER_KEY_INVALID, \
	PRES_PARTICIPANT_PARAMETER_MANAGER_KEY_INVALID},\
       RTI_NTP_TIME_MAX,  /* leaseDuration */           \
       {{0, 0, NULL}}, /* userData */ \
       0, /* peerHostEpoch*/\
       {{0, 0, NULL}}, /* propertyList */\
       PRES_PRODUCT_VERSION_DEFAULT, /* productVersion */\
       PRES_DISCOVER_MATCHING_REMOTE_ENTITIES_PROMISCUITY, /* pluginPromiscuityKind */\
       PRES_BUILTIN_ENDPOINT_NONE, /*builtinEndpointMask */\
       PRES_ENTITY_NAME_QOS_POLICY_DEFAULT, /* participantName */\
       -1, /* domainId */ \
       {0, 0, NULL} /* TransportInfoSeq */ \
       }

/*e \ingroup PRESParticipantModule
  Participant parameter value for the local participant.

  The RTPS protocol version is defaulted to the latest version (2.1)
*/
  #define PRES_PARTICIPANT_PARAMETER_LOCAL_DEFAULT { \
       MIG_RTPS_PROTOCOL_VERSION, \
       MIG_RTPS_VENDOR_ID_RTI, \
       PRES_LOCATOR_QOS_POLICY_DEFAULT, /* metatrafficUnicast */ \
       PRES_LOCATOR_QOS_POLICY_DEFAULT, /* metatrafficMulticast */ \
       PRES_LOCATOR_QOS_POLICY_DEFAULT, /* defaultUnicast */ \
       PRES_LOCATOR_QOS_POLICY_DEFAULT, /* defaultMulticast */ \
       0, /* managerKeyCount */ \
       {PRES_PARTICIPANT_PARAMETER_MANAGER_KEY_INVALID, /* managerKey */ \
	PRES_PARTICIPANT_PARAMETER_MANAGER_KEY_INVALID, \
        PRES_PARTICIPANT_PARAMETER_MANAGER_KEY_INVALID, \
	PRES_PARTICIPANT_PARAMETER_MANAGER_KEY_INVALID},\
       RTI_NTP_TIME_MAX,  /* leaseDuration */           \
       {{0, 0, NULL}}, /* userData */\
       0, /* peerHostEpoch*/\
       {{0, 0, NULL, 0, 0, NULL}}, /* propertyList */\
       PRES_PRODUCT_VERSION_DEFAULT, /* productVersion */\
       PRES_DISCOVER_MATCHING_REMOTE_ENTITIES_PROMISCUITY, /* pluginPromiscuityKind */\
       PRES_BUILTIN_ENDPOINT_NONE, /*builtinEndpointMask */\
       PRES_ENTITY_NAME_QOS_POLICY_DEFAULT, /* participantName */\
       0, /* domainId */ \
       {0, 0, NULL} /* TransportInfoSeq */ \
       }


#define PRES_PARTICIPANT_USER_DATA_MAXIMUM         (256)


#define PRES_PARTICIPANT_TOPIC_DATA_MAXIMUM         (256)


#define PRES_PARTICIPANT_PROPERTY_LIST_MAXIMUM      (32)


#define PRES_PARTICIPANT_PROPERTY_STRING_MAXIMUM      (1024)


#define PRES_TRANSPORT_INFO_LIST_MAX_LENGTH      (12)

struct PRESParticipant; /* forward declare to appease the compile */

struct PRESParticipantProperty {
    /* for single threaded applications */
    RTIBool isPassive;

    /*e property that is common to both local and remote participant */
    struct PRESParticipantParameter parameter;
    
    /*e
     * @brief   Whether or not unregistered remote participants that have
     *          lost their liveliness should be removed from the database.
     * 
     * If a previously-discovered remote participant has been unregistered
     * (PRESParticipant_unregisterRemoteParticipant) and has outlived its
     * declared liveliness lease duration, it will be removed from the
     * database if this flag is set to true. It will be left in place if
     * this flag is false.
     * 
     * @default RTI_TRUE
     */
    RTIBool purgeNotAliveParticipants;

    /*e
     * @brief   The maximum amount of time before this participant detects
     *          the loss of liveliness of a remote participant.
     * 
     * This value must be finite, but it will be ignored if
     * purgeNotAliveParticipants is false.
     * 
     * @default 100 seconds
     */
    struct RTINtpTime maxParticipantLivelinessLossDetectionPeriod;
    
    /*e property for active facade */
    struct COMMENDActiveFacadeProperty facadeProperty;

    /*e mutable */
    struct PRESEntityFactoryQosPolicy entityFactory;

    /*e string tables stores all the topic and typeName strings. */
    struct REDATableProperty stringTable;

    /*e flow controller stores all locally flow controllers. */
    struct REDATableProperty flowControllerTable;

    /*e type object table. It is unlimited because this resource 
      is already bounded by other limits (remote endpoints, local topics) */
    struct REDATableProperty typeObjectTable;

    /*e local type table stores all locally created type. */
    struct REDATableProperty localTypeTable;

    /*e local topic table stores all locally created topic.
      This is the number of entries that is created in the table when it
      runs out of space */
    struct REDATableProperty localTopicTable;

    /*e topic type table stores all locally and remotely discovered topic
      and type pair. */
    struct REDATableProperty topicTypeTable;

    /*e content filtered table stored all content filters. */
    struct REDATableProperty contentFilteredTopicTable;

    /*e content filter type table stores all content filter types. */
    struct REDATableProperty contentFilterTable;

    /*e remote participant table stores all asserted remote participants. */
    struct REDATableProperty remoteParticipantTable;

    /*e table of ignored entities. */
    struct REDATableProperty ignoredEntityTable;

    /*e table of ignored entities. */
    struct REDATableProperty ignoredLocatorTable;

    /*e replacement policy for the records in the table of ignored entities. */
    PRESIgnoredEntityReplacementPolicy  ignoredEntityReplacementPolicy;

    /*e Maximum length for participant userData */
    int participantUserDataMaximumLength;
    /*e Maximum length for topicData */
    int topicDataMaximumLength;

    /*e Size of user object to be stored in particpiant */
    int participantUserObjectSize;
    /*e Alignment user object to be stored in particpiant */
    int participantUserObjectAlignment;
    /*e Size of user object to be stored in flow controller */
    int flowControllerUserObjectSize;
    /*e Alignment of user object to be stored in flow controller */
    int flowControllerUserObjectAlignment;
    /*e Size of user object to be stored in topic */
    int topicUserObjectSize;
    /*e Alignment of user object to be stored in topic */
    int topicUserObjectAlignment;
    /*e Size of user object to be stored in content filtered topic */
    int contentFilteredTopicUserObjectSize;
    /*e Alignment of user object to be stored in content filtered topic */
    int contentFilteredTopicUserObjectAlignment;
    /*e Type code max serialized size*/
    int typeCodeMaxSerializedLength;
    /*e Type object max serialized size*/
    int typeObjectMaxSerializedLength;
    /*e Serialized type object dynamic allocation threshold*/
    int serializedTypeObjectDynamicAllocationThreshold;
    /*e Type object max deserialized size*/
    int typeObjectMaxDeserializedLength;
    /*e Deserialized type object dynamic allocation threshold*/
    int deserializedTypeObjectDynamicAllocationThreshold;
    /*e Content filter property max size*/
    int contentFilterPropertyMaxLength;
    /*e Maximum length for participant property list */
    int participantPropertyListMaximumLength; 
    /*e Maximum size of string area in property buffer */
    int participantPropertyStringMaximumLength;
    /* Maximum length of Locator Filter Sequence */
    int locatorFilterSeqMaxLength;
    /* Maximum length of Locator Filter Expression */
    int locatorFilterExpressionMaxLength;
    /* Maximum length of Transport Info Sequence */
    int transportInfoListMaxLength;

    struct PRESTypeSupportQosPolicy typeSupport;
};


/*e \ingroup PRESParticipantModule
  Default participant property value.
*/
  #define PRES_PARTICIPANT_PROPERTY_DEFAULT { \
      RTI_FALSE, /* isPasive */ \
      PRES_PARTICIPANT_PARAMETER_LOCAL_DEFAULT, \
      RTI_TRUE, /* purgeNotAliveParticipants */ \
      {100/*sec*/,0/*frac*/}, /*maxParticipantLivelinessLossDetectionPeriod*/\
      COMMEND_ACTIVE_FACADE_PROPERTY_DEFAULT, /* facadeProperty */ \
      {RTI_TRUE}, /* entityFactory: autoEnable == TRUE */ \
      /* stringTable */ \
      {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
      /* flowControllerTable */ \
      {{4,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
      /* typeObjectTable */ \
      {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
      /* localTypeTable */ \
      {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
      {{8, 1024, REDA_FAST_BUFFER_POOL_UNLIMITED}, 1}, /* localTopicTable */ \
      /* topicTypeTable */ \
      {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
      /* contentFilteredTopicTable */ \
      {{4,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
      /* contentFilterTable */ \
      {{4,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
      {{8, 4096,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1}, /*remoteParticipantTable*/\
      /* ignoredEntityTable */ \
      {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
      /* ignoredLocatorTable */ \
      {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
      PRES_NO_REPLACEMENT_IGNORED_ENTITY_REPLACEMENT, /* ignoredEntityReplacementPolicy */\
      PRES_PARTICIPANT_USER_DATA_MAXIMUM, /* participantUserDataMaximumLength */\
      PRES_PARTICIPANT_TOPIC_DATA_MAXIMUM, /* topicDataMaximumLength */ \
      0, /* flowControllerUserObjectSize */ \
      0, /* flowControllerUserObjectAlignment */ \
      0, /* particpiantUserObjectSize */ \
      0, /* particpiantUserObjectAlignment */ \
      0, /* topicUserObjectSize */ \
      0, /* topicUserObjectAlignment */ \
      0, /* contentFilteredTopicUserObjectSize */ \
      0, /* contentFilteredTopicUserObjectAlignment */ \
      1024,  /* typeCodeMaxSerializedLength */\
      1024,  /* typeObjectMaxSerializedLength */\
      1024,  /* serializedTypeObjectDynamicAllocationThreshold */\
      1024,  /* typeObjectMaxDeserializedLength */\
      1024,  /* deserializedTypeObjectDynamicAllocationThreshold */\
      PRES_CONTENT_FILTER_PROPERTY_LEN_MAX, /* content filter property max length */\
      PRES_PARTICIPANT_PROPERTY_LIST_MAXIMUM, /* participantPropertyListMaximumLength */\
      PRES_PARTICIPANT_PROPERTY_STRING_MAXIMUM, /* participantPropertyStringMaximumLength */\
      PRES_LOCATOR_FILTER_DEFAULT_SEQ_LEN_MAX, \
      PRES_LOCATOR_FILTER_DEFAULT_EXPRESSION_LEN_MAX, \
      PRES_TRANSPORT_INFO_LIST_MAX_LENGTH,  /* transportInfoListMaxLength */ \
      PRES_TYPE_SUPPORT_QOS_POLICY_DEFAULT /* typeSupport */ \
}

struct PRESRemoteParticipantProperty {
    /*e derived from participant parameter */
    struct PRESParticipantParameter parameter;
    /*e counter that indicates if there is a change to the entities in the
      remote participant */
    struct REDASequenceNumber lastSn;
};


/*e \ingroup PRESParticipantModule
  Default value for remote participant property.
*/
  #define PRES_REMOTE_PARTICIPANT_PROPERTY_DEFAULT {         \
      PRES_PARTICIPANT_PARAMETER_DEFAULT,                    \
      REDA_SEQUENCE_NUMBER_UNKNOWN                           } 

struct REDAWorker;

struct PRESTopic;

struct PRESTopicListener;

typedef void
(*PRESTopicListenerOnInconsistentTopicCallback)(
    const struct PRESTopicListener *listener, struct PRESTopic *topic,
    const struct PRESInconsistentTopicStatus *status,
    struct REDAWorker *worker);

struct PRESTopicListener {
    PRESTopicListenerOnInconsistentTopicCallback onInconsistentTopic;
};

struct PRESParticipantListener {
    struct PRESTopicListener topicListener;
};

struct PRESParticipantConfigListener;

typedef void
(*PRESParticipantConfigListenerOnManualLivelinessAssertedCallback)(
    const struct PRESParticipantConfigListener *me,
    struct REDAWorker *worker);

typedef void
(*PRESParticipantConfigListenerOnAutomaticLivelinessRateChangedCallback)(
    const struct PRESParticipantConfigListener *me,
    const struct RTINtpTime *leastDuration,
    struct REDAWorker *worker);

typedef void
(*PRESParticipantConfigListenerOnAfterRemoteParticipantCreationCallback)(
    const struct PRESParticipantConfigListener *me,
    const MIGRtpsParticipantId *remoteParticipantId,
    const struct PRESRemoteParticipantProperty *property,
    struct REDAWorker *worker);

typedef void
(*PRESParticipantConfigListenerOnAfterRemoteParticipantDestructionCallback)(
    const struct PRESParticipantConfigListener *me,
    const MIGRtpsParticipantId *remoteParticipantId,
    struct REDAWorker *worker);

struct PRESParticipantConfigListener {
    PRESParticipantConfigListenerOnManualLivelinessAssertedCallback
    onManualLivelinessAsserted;
    PRESParticipantConfigListenerOnAutomaticLivelinessRateChangedCallback
    onAutomaticLivelinessRateChanged;
    PRESParticipantConfigListenerOnAfterRemoteParticipantCreationCallback
        onAfterRemoteParticipantCreation;
    PRESParticipantConfigListenerOnAfterRemoteParticipantDestructionCallback
        onAfterRemoteParticipantDestruction;
};

struct PRESLocalParticipantConfigListener;

typedef void
(*PRESLocalParticipantConfigListenerOnAfterLocalParticipantEnabledCallback)(
    const struct PRESLocalParticipantConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESParticipantProperty *property,
    struct REDAWorker *worker);

typedef void
(*PRESLocalParticipantConfigListenerOnAfterLocalParticipantPropertyChangedCallback)(
    const struct PRESLocalParticipantConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESParticipantProperty *newProp,
    struct REDAWorker *worker);

typedef void
(*PRESLocalParticipantConfigListenerOnBeforeLocalParticipantDestructionCallback)(
    const struct PRESLocalParticipantConfigListener *me,
    const struct MIGRtpsGuid *guid,
    struct REDAWorker *worker);

typedef void
(*PRESLocalParticipantConfigListenerOnAfterLocalParticipantDestructionCallback)(
    const struct PRESLocalParticipantConfigListener *me,
    const struct MIGRtpsGuid *guid,
    struct REDAWorker *worker);

typedef void
(*PRESLocalParticipantConfigListenerOnBeforeRemoteParticipantIgnoredCallback)(
    const struct PRESLocalParticipantConfigListener *me,
    const struct MIGRtpsGuid *guid,
    struct REDAWorker *worker);

typedef void
(*PRESLocalParticipantConfigListenerOnBeforeRemoteParticipantRemovedCallback)(
    const struct PRESLocalParticipantConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESLocatorQosPolicy *metatrafficMulticastLocator,
    const struct PRESLocatorQosPolicy *metatrafficUnicastLocator,
    struct REDAWorker *worker);

struct PRESLocalParticipantConfigListener {
    PRESLocalParticipantConfigListenerOnAfterLocalParticipantEnabledCallback
        onAfterLocalParticipantEnabled;
    PRESLocalParticipantConfigListenerOnAfterLocalParticipantPropertyChangedCallback
        onAfterLocalParticipantPropertyChanged;
    PRESLocalParticipantConfigListenerOnBeforeLocalParticipantDestructionCallback
        onBeforeLocalParticipantDestruction;
    PRESLocalParticipantConfigListenerOnAfterLocalParticipantDestructionCallback
        onAfterLocalParticipantDestruction;
    PRESLocalParticipantConfigListenerOnBeforeRemoteParticipantIgnoredCallback
        onBeforeRemoteParticipantIgnored;
    PRESLocalParticipantConfigListenerOnBeforeRemoteParticipantRemovedCallback
        onBeforeRemoteParticipantRemoved;
};

struct PRESRemoteParticipantConfigListener;

typedef void
(*PRESRemoteParticipantConfigListenerOnAfterRemoteParticipantCreationCallback)(
    const struct PRESRemoteParticipantConfigListener *me,
    const MIGRtpsParticipantId *remoteParticipantId, /*RTPS.2.0*/
    const struct PRESRemoteParticipantProperty *property,
    struct REDAWorker *worker);

typedef void
(*PRESRemoteParticipantConfigListenerOnAfterRemoteParticipantDestructionCallback)(
    const struct PRESRemoteParticipantConfigListener *me,
    const MIGRtpsParticipantId *remoteParticipantId, /*RTPS.2.0*/
    struct REDAWorker *worker);

typedef void
(*PRESRemoteParticipantConfigListenerOnAfterRemoteParticipantPropertyChangedCallback)(
    const struct PRESRemoteParticipantConfigListener *me,
    const MIGRtpsParticipantId *remoteParticipantId, /*RTPS.2.0*/
    const struct PRESRemoteParticipantProperty *newProp,
    struct REDAWorker *worker);

struct PRESRemoteParticipantConfigListener {
    PRESRemoteParticipantConfigListenerOnAfterRemoteParticipantCreationCallback
        onAfterRemoteParticipantCreation;
    PRESRemoteParticipantConfigListenerOnAfterRemoteParticipantDestructionCallback
    onAfterRemoteParticipantDestruction;
    PRESRemoteParticipantConfigListenerOnAfterRemoteParticipantPropertyChangedCallback
    onAfterRemoteParticipantPropertyChanged;
};

struct PRESParticipantEntityFinalizeListener;

typedef void
(*PRESParticipantEntityFinalizeListenerOnBeforeTopicFinalizeFnc)(
    void* topicFinalizeParam,
    void* userObject, struct REDAWorker *worker);

typedef void
(*PRESParticipantEntityFinalizeListenerOnBeforeContentFilteredTopicFinalizeFnc)(
    void* contentFilteredTopicFinalizeParam,
    void* userObject, struct REDAWorker *worker);

typedef void
(*PRESParticipantEntityFinalizeListenerOnBeforeFlowControllerFinalizeFnc)(
    void* flowControllerFinalizeParam,
    void* userObject, struct REDAWorker *worker);

struct PRESParticipantEntityFinalizeListener {
    PRESParticipantEntityFinalizeListenerOnBeforeTopicFinalizeFnc
        onBeforeTopicFinalizeFnc;
    void* topicFinalizeParam;

    PRESParticipantEntityFinalizeListenerOnBeforeContentFilteredTopicFinalizeFnc
        onBeforeContentFilteredTopicFinalizeFnc;
    void* contentFilteredTopicFinalizeParam;

    PRESParticipantEntityFinalizeListenerOnBeforeFlowControllerFinalizeFnc
        onBeforeFlowControllerFinalizeFnc;
    void* flowControllerFinalizeParam;
};

struct REDADatabase;

struct REDAExclusiveArea;

struct RTIClock;

extern PRESDllExport
struct PRESParticipant * PRESParticipant_new(
    const struct MIGRtpsGuid *guid,
    struct RTINetioConfigurator* configuratorIn,
    struct REDAWorkerFactory *workerFactory,
    struct RTIEventActiveDatabase *database,
    struct RTIClock *clock,
    struct RTIClock *timestampClock,
    struct REDAExclusiveArea *tableEa,
    struct REDAExclusiveArea *recordEa,
    const struct COMMENDActiveFacadeThreadListener *threadListener,
    const struct PRESParticipantEntityFinalizeListener *finalizeListener,
    const struct PRESParticipantProperty *property,
    const struct PRESParticipantListener *listener,
    PRESStatusKindMask listenerMask,
    struct RTIOsapiThreadFactory *recv_thread_factory,
    struct RTIOsapiThreadFactory *event_thread_factory,
    struct RTIOsapiThreadFactory *asynch_pub_thread_factory,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_enable(
    struct PRESParticipant *me,
    RTIBool *autoenableContainedEntities,
    const struct PRESLocatorQosPolicy *defaultUnicastLocator,
    const struct PRESLocatorQosPolicy *metatrafficUnicastLocator,
    const struct PRESLocatorQosPolicy *metatrafficMulticastLocator,
    const struct PRESSequenceTransportInfo *transportInfoSequence,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_postEnable(
    struct PRESParticipant *me,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_enableAllEntities(struct PRESParticipant *me,
					  int *failReason,
					  struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_destroyAllEntities(struct PRESParticipant *me,
					   int *failReason,
					   struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_destroyCustomFlowControllers(
    struct PRESParticipant *me, int *failReason, struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_isEnabled(struct PRESParticipant *me);

extern PRESDllExport RTIBool
PRESParticipant_containsEntity(
    struct PRESParticipant *me,
    const struct MIGRtpsGuid *guid);

extern PRESDllExport
RTIBool PRESParticipant_hasTopic(struct PRESParticipant *me,
				 struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_preShutdown(
    struct PRESParticipant *me,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_preShutdownWakeup(struct PRESParticipant *me,
					  int *failReason,
					  struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_shutdown(struct PRESParticipant *me,
				 int *failReason,
				 struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_delete(struct PRESParticipant *me,
			       int *failReason,
			       struct REDAWorker *worker);

struct PRESService;

extern PRESDllExport
RTIBool PRESParticipant_assertService(struct PRESParticipant *me,
				      PRESServiceId serviceId,
				      struct PRESService *service,
				      struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_removeService(struct PRESParticipant *me,
				      int *failReason,
				      PRESServiceId serviceId,
				      struct REDAWorker *worker);

struct PRESTypePlugin;

extern PRESDllExport
RTIBool PRESParticipant_registerType(struct PRESParticipant *me,
									 int *failReason,
									 const struct PRESTypePlugin *typePlugin,
									 const char *typeName,
									 void *registrationData,
									 struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESParticipant_unregisterType(
   struct PRESParticipant *me, 
   int *failReason,
   const char *typeName,
   struct REDAWorker *worker);

struct PRESTopic;

struct PRESContentFilteredTopic;

struct PRESContentFilterType;

struct PRESTopicProperty;

extern PRESDllExport
struct PRESTopic* PRESParticipant_createTopic(
    struct PRESParticipant *me,
    int *failReason,
    RTIBool *autoenableContainedEntities,
    const char *topicName,
    const char *typeName,
    MIGRtpsObjectId oid,
    struct PRESTopicProperty *property,
    const struct PRESTopicListener *listener,
    PRESStatusKindMask listenerMask,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_destroyTopic(
    struct PRESParticipant *me,
    int *failReason,
    struct PRESTopic *topic,
    struct REDAWorker *worker);

extern PRESDllExport
struct PRESTopic* PRESParticipant_lookupTopic(
    struct PRESParticipant *me,
    const char *topicName, struct REDAWorker *worker);

extern PRESDllExport
struct PRESTopic* PRESParticipant_findTopic(
    struct PRESParticipant *me,
    const char *topicName, 
    const char *typeName,
    const struct RTINtpTime *timeout,
    struct REDAWorker *worker);

extern PRESDllExport int 
PRESParticipant_getUserTopicCount(
    struct PRESParticipant *participant,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_lockAllTopics(
    struct PRESParticipant *participant,
    int *failReason,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESParticipant_unlockAllTopics(
    struct PRESParticipant *participant,
    int *failReason,
    struct REDAWorker *worker);


#define PRESParticipantTopicIterator REDACursor
#define PRESParticipantCFTIterator REDACursor

extern PRESDllExport
struct PRESParticipantTopicIterator *
PRESParticipant_getTopicIterator(
    struct PRESParticipant *me,
    int *failReason,
    struct REDAWorker *worker);

extern PRESDllExport void 
PRESParticipant_returnUserTopicIterator(
    struct PRESParticipant *me,
    struct PRESParticipantTopicIterator *iterator);

extern PRESDllExport
struct PRESTopic *
PRESParticipant_getNextTopic(
    struct PRESParticipant *me,
    int *failReason,
    struct PRESParticipantTopicIterator *iterator,
    MIGRtpsObjectSuffix topicSuffix,
    struct REDAWorker *worker);

extern PRESDllExport
int PRESParticipant_getCFTCount(
    struct PRESParticipant *me,
    struct REDAWorker *worker);

extern PRESDllExport
struct PRESParticipantCFTIterator *
PRESParticipant_getCFTIterator(
    struct PRESParticipant *me,
    int *failReason,
    struct REDAWorker *worker);

extern PRESDllExport void
PRESParticipant_returnCFTIterator(
    struct PRESParticipant *me,
    struct PRESParticipantCFTIterator *iterator);

extern PRESDllExport
struct PRESContentFilteredTopic *
PRESParticipant_getNextCFT(
    struct PRESParticipant *me,
    int *failReason,
    struct PRESParticipantCFTIterator *iterator,
    struct REDAWorker *worker);

extern PRESDllExport
struct PRESEntity* PRESParticipant_lookupEntity(
    struct PRESParticipant *me,
    int *failReason,
    struct MIGRtpsGuid *guid,
    struct REDAWorker *worker);


#define PRESTopicTypeIterator REDACursor

extern PRESDllExport
RTIBool PRESParticipant_beginGetTopicTypes(
                              struct PRESParticipant *me,
                              struct PRESTopicTypeIterator **iter,
                              int *maxTopicTypes,
                              struct REDAWorker *worker);

extern PRESDllExport                                   
RTIBool PRESParticipant_endGetTopicTypes(
			      struct PRESParticipant *me,
                              struct PRESTopicTypeIterator *iter,
                              struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_registerContentFilterType(
               struct PRESParticipant *me,
               int *failReason,
               const char *name,
               const struct PRESContentFilter * presContentFilter,
               RTIBool isBuiltin,
               struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_unregisterContentFilterType(
               struct PRESParticipant *me,
               int *failReason,
	       const char *name,
               void **filter_object,
	       struct REDAWorker *worker);

struct REDAWeakReference;

extern PRESDllExport
RTIBool PRESParticipant_lookupContentFilterType(
    struct PRESParticipant *me,
    const char *name,
    struct PRESContentFilter * presContentFilter,
    struct REDAWeakReference *filterWR,
    RTIBool update_refcount,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_getContentFilterTypes(
    struct PRESParticipant *me, 
    char** filter_names, 
    int* num_filters, 
    RTIBool has_ownership, 
    struct REDAWorker *worker);

extern PRESDllExport
struct PRESContentFilteredTopic* PRESParticipant_createContentFilteredTopic(
    struct PRESParticipant *me,
    int *failReason,
    const char *name,
    struct PRESTopic *related_topic,
    const char *filter_expression,
    const char **filter_parameters,
    RTI_INT32 parameter_length,
    const char *filter_name,
    const struct PRESContentFilteredTopicProperty *property,
    struct REDAWorker *worker);

extern PRESDllExport
struct PRESContentFilteredTopicProperty PRESParticipant_getDefaultContentFilteredTopicProperty(void);

extern PRESDllExport
RTIBool PRESParticipant_destroyContentFilteredTopic(
    struct PRESParticipant *me,
    int *failReason,
    struct PRESContentFilteredTopic *topic,
    struct REDAWorker *worker);

extern PRESDllExport
struct PRESContentFilteredTopic* 
PRESParticipant_lookupContentFilteredTopic(
    struct PRESParticipant *me,
    const char *name,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_assertRemoteParticipant(
    struct PRESParticipant *me,
    int *failReason,
    const struct PRESParticipantParameter *participantParameter, /* Used only if called from disc.2.0 */
    const MIGRtpsParticipantId *remoteParticipantId, /*RTPS.2.0*/
    const struct PRESRemoteParticipantProperty *remoteParticipantProperty,
    struct REDAWorker *worker);

struct PRESLivelinessParameter;

extern PRESDllExport
RTIBool PRESParticipant_updateRemoteParticipantLiveliness(
    struct PRESParticipant *me,
    int *failReason,
    const MIGRtpsParticipantId *remoteParticipantId, /*RTPS.2.0*/
    RTIBool manualLivelinessUpdate,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_removeRemoteParticipant(
    struct PRESParticipant *me, int *failReason, 
    const MIGRtpsParticipantId *remoteParticipantId, /*RTPS.2.0*/
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_removeRemoteParticipantFromLocator(
    struct PRESParticipant *me, 
    struct RTINetioLocator *peer_locator,
    struct MIGRtpsGuid *guid,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_unignoreLocator(
    struct PRESParticipant *me, 
    struct RTINetioLocator *peer_locator,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_unregisterRemoteParticipant(
    struct PRESParticipant *me,
    int *failReason,
    const MIGRtpsParticipantId *remoteParticipantId,
    struct REDAWorker *worker);


#define PRESRemoteParticipantIterator REDACursor

extern PRESDllExport
RTIBool PRESParticipant_beginGetRemoteParticipants(
                              struct PRESParticipant *me,
                              struct PRESRemoteParticipantIterator **iter,
                              int *maxRemoteParticipants,
                              struct REDAWorker *worker);

extern PRESDllExport                                   
RTIBool PRESParticipant_endGetRemoteParticipants(
			      struct PRESParticipant *me,
                              struct PRESRemoteParticipantIterator *iter,
                              struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_getNextRemoteParticipant(
			      struct PRESParticipant *me,
			      int *failReason,
                              struct PRESRemoteParticipantIterator *iter,
                              MIGRtpsParticipantId *remoteParticipantId, /*RTPS.2.0*/
                              struct REDAWorker *worker);

struct PRESGroupListener;

extern PRESDllExport
struct PRESGroup* PRESParticipant_createGroup(
    struct PRESParticipant *me, int *failReason,
    RTIBool *autoenableContainedEntities, PRESServiceId serviceId,
    MIGRtpsObjectId oid, 
    const struct PRESGroupProperty *property,
    const struct PRESGroupListener *listener,
    PRESStatusKindMask listenerMask,
    struct REDAExclusiveArea *ea,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_destroyGroup(struct PRESParticipant *me,
				     int *failReason,
				     struct PRESGroup *group,
				     struct REDAWorker *worker);

struct PRESLocalEndpointListener;

struct PRESLocalEndpointStatisticsListener;

extern PRESDllExport
struct PRESLocalEndpoint* PRESParticipant_createLocalEndpoint(
    struct PRESParticipant *me,
    int *failReason,
    RTIBool *autoenableContainedEntities,
    struct PRESGroup *group,
    struct PRESTopic *topic,
    MIGRtpsObjectId oid,
    const struct PRESLocalEndpointProperty *property,
    const struct PRESLocalEndpointListener *listener, 
    PRESStatusKindMask listenerMask,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_destroyLocalEndpoint(
    struct PRESParticipant *me,
    int *failReason,
    struct PRESGroup *group,
    struct PRESLocalEndpoint *localEndpoint, struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_assertRemoteEndpoint(
    struct PRESParticipant *me,
    int *failReason,
    PRESServiceId serviceId,
    const struct MIGRtpsGuid *guid, 
    const struct PRESRemoteEndpointProperty *property,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_removeRemoteEndpoint(
    struct PRESParticipant *me,
    int *failReason,
    PRESServiceId serviceId,
    const struct MIGRtpsGuid *guid, struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_removeRemoteEndpointsOfRemoteParticipant(
    struct PRESParticipant *me, 
    const MIGRtpsParticipantId *remoteParticipantId, /*RTPS.2.0*/
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_unregisterRemoteEndpointsOfRemoteParticipant(
    struct PRESParticipant *me,
    const MIGRtpsParticipantId *remoteParticipantId, /*RTPS.2.0*/
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_removeRemoteEndpointsWithOid(
    struct PRESParticipant *me, MIGRtpsObjectId remoteOid,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_unregisterRemoteEndpoint(
    struct PRESParticipant *me,
    int *failReason,
    PRESServiceId serviceId,
    const struct MIGRtpsGuid *guid,
    struct REDAWorker *worker);

extern PRESDllExport 
PRESWord *PRESParticipant_getUserObject(struct PRESParticipant *me);

extern PRESDllExport
void* PRESEntity_getUserObject(struct PRESEntity *me);

extern PRESDllExport
MIGRtpsHostId PRESParticipant_getHostId(
    const struct PRESParticipant *me);

extern PRESDllExport
MIGRtpsAppId PRESParticipant_getAppId(
    const struct PRESParticipant *me);

extern PRESDllExport
MIGRtpsInstanceId PRESParticipant_getInstanceId(
    const struct PRESParticipant *me);

extern PRESDllExport
RTIBool PRESParticipant_setListener(
    struct PRESParticipant *me,
    const struct PRESParticipantListener *listener,
    PRESStatusKindMask mask, struct REDAWorker *worker);

extern PRESDllExport
const struct PRESParticipantListener* PRESParticipant_getListener(
    const struct PRESParticipant *me, struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_getProperty(
    const struct PRESParticipant *me,
    struct PRESParticipantProperty *property,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_setProperty(
    struct PRESParticipant *me,
    int *failReason,
    const struct PRESParticipantProperty *property,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_setPeerHostEpoch(
    struct PRESParticipant *me,
    int *failReason,
    struct REDAWorker *worker);

extern PRESDllExport
void PRESParticipant_getGuid(
    const struct PRESParticipant *me,
    struct MIGRtpsGuid *guid);

extern PRESDllExport
RTIBool PRESParticipant_setLocalParticipantConfigListener(
    struct PRESParticipant *me,
    const struct PRESLocalParticipantConfigListener *listener, 
    struct REDAWorker *worker);

extern PRESDllExport
const struct PRESLocalParticipantConfigListener *
PRESParticipant_getLocalParticipantConfigListener(
    const struct PRESParticipant *me, struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_setParticipantConfigListener(
    struct PRESParticipant *me,
    const struct PRESParticipantConfigListener *listener,
    struct REDAWorker *worker
    );

extern PRESDllExport
RTIBool PRESParticipant_getRemoteParticipantProperty(
    const struct PRESParticipant *me,
    struct PRESRemoteParticipantProperty *property,
    const MIGRtpsParticipantId *remoteParticipantId, /*RTPS.2.0*/
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_setRemoteParticipantConfigListener(
    struct PRESParticipant *me,
    const struct PRESRemoteParticipantConfigListener *listener, 
    struct REDAWorker *worker);

extern PRESDllExport
const struct PRESRemoteParticipantConfigListener *
PRESParticipant_getRemoteParticipantConfigListener(
    const struct PRESParticipant *me, struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_setLocalEndpointConfigListener(
    struct PRESParticipant *me,
    PRESServiceId serviceId,
    const struct PRESLocalEndpointConfigListener *listener, 
    struct REDAWorker *worker);

extern PRESDllExport
const struct PRESLocalEndpointConfigListener *
PRESParticipant_getLocalEndpointConfigListener(
    const struct PRESParticipant *me,
    PRESServiceId serviceId, struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_setRemoteEndpointConfigListener(
    struct PRESParticipant *me,
    PRESServiceId serviceId,
    const struct PRESRemoteEndpointConfigListener *listener, 
    struct REDAWorker *worker);

extern PRESDllExport
const struct PRESRemoteEndpointConfigListener *
PRESParticipant_getRemoteEndpointConfigListener(
    const struct PRESParticipant *me,
    PRESServiceId serviceId, struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_assertLiveliness(
    struct PRESParticipant *me, struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_refresh(
    struct PRESParticipant *me, struct REDAWorker *worker);

extern PRESDllExport
PRESStatusKind PRESParticipant_getStatusChanges(
    struct PRESParticipant *me, struct REDAWorker *worker);

extern PRESDllExport
const struct PRESTypePlugin *PRESParticipant_lookupTypePlugin(
    struct PRESParticipant *me, const char *typeName,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_ignoreRemotePeer(
    struct PRESParticipant *me,
    const char* peer_desc_string,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_ignoreRemoteParticipant(
    struct PRESParticipant *me,
    const struct MIGRtpsGuid* remoteParticipantGuidIn,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_ignoreRemoteEndpoint(
    struct PRESParticipant *me, PRESServiceId serviceId,
    const struct MIGRtpsGuid* remoteEndpointGuidIn, struct REDAWorker *worker);

extern PRESDllExport
struct COMMENDFacade* PRESParticipant_getFacade(struct PRESParticipant* me);

extern PRESDllExport void PRESParticipant_cleanup(struct PRESParticipant *me,
						  struct REDAWorker *worker);

struct PRESInstanceHandle {
    /*e We use guid to represent an instance */
    struct MIGRtpsKeyHash keyHash;
    /*e so that we can allow all 0 guid values */
    RTIBool isValid;
};


/*e \ingroup PRESInstanceHandleClass
  Invalid instance handle
 */
  #define PRES_INSTANCE_HANDLE_NIL { \
      MIG_RTPS_KEY_HASH_DEFAULT, \
      RTI_FALSE /* isValid */ }

extern PRESDllExport 
int PRESInstanceHandle_compare(const struct PRESInstanceHandle *me,
			       const struct PRESInstanceHandle *handle);

extern PRESDllExport 
RTIBool PRESInstanceHandle_isNil(const struct PRESInstanceHandle *me);

struct PRESSampleRejectedStatus {
    /*e
      Total cumulative count of all samples rejected by the data reader.
    */
    RTI_INT32 totalCount;
    /*e
      The incremental number of samples rejected since the last time the
      listener was called or the status was read.
    */
    RTI_INT32 totalCountChange;
    /*e
      Reason for rejecting the last sample rejected
    */
    PRESSampleRejectedStatusKind lastReason;
    /*e
      Handle to the instance being updated by the last sample that was rejected.
     */
    struct PRESInstanceHandle lastInstanceHandle;
};

struct PRESLivelinessChangedStatus {
    /*e
      The total count of currently active data writers that write the topic
      the data reader readers
    */
    RTI_INT32 activeCount;
    /*e
      The total count of currently inactive data writers that write the topic
      the data reader reads
    */
    RTI_INT32 inactiveCount;
    /*e
      The change in the active count since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 activeCountChange;
    /*e
      The change in the inactive count since the last time the listeenr was
      called or the status was read
    */
    RTI_INT32 inactiveCountChange;

    /*e Last instance of the remote writer whose liveliness has changed */
    struct PRESInstanceHandle lastInstanceHandle;
};

struct PRESRequestedDeadlineMissedStatus {
    /*e
      Total cumulative count of the deadlines detected for any instance
      read by the data reader
    */
    RTI_INT32 totalCount;
    /*e
      The incremental number of deadlines detected since the last time
      the listener was called or the status was read.
    */
    RTI_INT32 totalCountChange;
    /*e
      Handle to the last instance in the data reader for which a deadline was
      detected
    */
    struct PRESInstanceHandle lastInstanceHandle;
};

struct PRESOfferedDeadlineMissedStatus {
    /*e
      The total cumulative count of the number of times the data writer failed
      to write within its offered deadline.
     */
    RTI_INT32 totalCount;
    /*e
      The change in total count since the last time the listener was
      called or the status was read.
    */
    RTI_INT32 totalCountChange;
    /*e
      Handle to the last instance in the data writer for which an offered
      deadline was missed.
     */
    struct PRESInstanceHandle lastInstanceHandle;
};

struct PRESPublicationMatchStatus {
    /*e
      The total number of times the writer has matched a remote reader.
     */
    RTI_INT32 totalCount;
    /*e
      The change in totalCount since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 totalCountChange;
    /*e
      The number of remote readers with which the writer is currently matched.
     */
    RTI_INT32 currentCount;
    /*i
      The highest number of remote readers with which the writer was matched.
     */
    RTI_INT32 currentCountPeak;
    /*e
      The change in currentCount since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 currentCountChange;

    /*e last instance of last remote reader to trigger a status update. */
    struct PRESInstanceHandle lastSubscriptionHandle;
};

struct PRESSubscriptionMatchStatus {
    /*e
      The total number of times the eader has matched a remote writer.
     */
    RTI_INT32 totalCount;
    /*e
      The change in totalCount since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 totalCountChange;
    /*e
      The number of remote writers with which the reader is currently matched.
     */
    RTI_INT32 currentCount;
    /*i
      The highest number of remote readers with which the writer was matched.
     */
    RTI_INT32 currentCountPeak;
    /*e
      The change in currentCount since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 currentCountChange;

    /*e instance handle of last remote writer to trigger a status update. */
    struct PRESInstanceHandle lastPublicationHandle;
};

struct PRESSampleInfo {
    /*e
      Sample state of sample
    */
    RTI_UINT32 sampleState;
    /*e
      View state of instance
    */
    RTI_UINT32 viewState;
    /*e
      Instance state of instance
     */
    RTI_UINT32 instanceState;
    /*e
      Time when sample was sent
     */
    struct PRESIeeeTime sourceTimestamp;
    /*e
      Handle to the sample instance
     */
    struct PRESInstanceHandle instanceHandle;
    /*e
      Handle to the writer that modified the instance
     */
    struct PRESInstanceHandle publicationHandle;
    /*e
      Disposed generation count of instance at sample reception
    */
    RTI_INT32 disposedGenerationCount;
    /*e
      No writers generation count of instance at sample reception
    */
    RTI_INT32 noWritersGenerationCount;
    /*e
      Sample rank of sample
    */
    RTI_INT32 sampleRank;
    /*e
      Generation rank of sample
    */
    RTI_INT32 generationRank;
    /*e
      Absolute generation rank of sample
    */
    RTI_INT32 absoluteGenerationRank;
    /*e
      Denotes whether there is valid data
      This has to match DDS_Boolean
    */
    RTICdrBoolean hasData;
    /*e
      Time when sample was received
     */
    struct PRESIeeeTime receptionTimestamp;
    /*e
      Sequence number
    */
    struct REDASequenceNumber publicationSequenceNumber;
    /*e
      Sequence number
    */
    struct REDASequenceNumber receptionSequenceNumber;
    /*e
      Publication virtual guid
    */
    struct PRESOctetGuid publicationVirtualGuid;
    /*e
      Publication virtual sequence number
    */
    struct REDASequenceNumber publicationVirtualSequenceNumber;
    /*e
      Original Publication virtual guid
    */
    struct PRESOctetGuid originalPublicationVirtualGuid;
    /*e
      Original Publication virtual sequence number
    */
    struct REDASequenceNumber originalPublicationVirtualSequenceNumber;
    /*e
      Related Original Publication virtual guid
    */
    struct PRESOctetGuid relatedOriginalPublicationVirtualGuid;
    /*e
      Related Original Publication virtual sequence number
    */
    struct REDASequenceNumber relatedOriginalPublicationVirtualSequenceNumber;
    
    /*e
      Sample flags
     */
    PRESSampleFlag flag;
    
    struct PRESOctetGuid sourceGuid;
    struct PRESOctetGuid relatedSourceGuid;
    struct PRESOctetGuid relatedSubscriptionGuid;
};

struct PRESAcknowledgmentInfo {
    /*e
    */
    struct PRESInstanceHandle subscriptionHandle;
    /*e
    */
    struct PRESSampleIdentity sampleIdentity;
    /*e
    */
    struct PRESCookie cookie;
    /*e
    */
    RTIBool validResponseData;
    /*e
    */
    struct PRESAckResponseData responseData;
};

struct PRESLoanedSampleInfo {
    struct PRESSampleInfo sampleInfo;
    void* userObject;
    void* internalObject;
};

typedef void
(*PRESLoanedSampleInfoListenerUserObjectInitializeFnc)(
    void** userObject, void* param);

typedef void
(*PRESLoanedSampleInfoListenerUserObjectFinalizeFnc)(
    void** userObject, void* param);

struct PRESLoanedSampleInfoListener {
    PRESLoanedSampleInfoListenerUserObjectInitializeFnc userObjectInitializeFnc;
    void* userObjectInitializeParam;

    PRESLoanedSampleInfoListenerUserObjectFinalizeFnc userObjectFinalizeFnc;
    void* userObjectFinalizeParam;
};

extern PRESDllExport void
PRESParticipant_getInstanceHandle(
    struct PRESParticipant *me,
    struct PRESInstanceHandle *handle);

extern PRESDllExport
RTIBool PRESParticipant_getTopicPropertyByHandle(
			      struct PRESParticipant *me,
			      int *failReason,
			      struct PRESTopicProperty *property,
			      char *topicName, int topicMaxLength,
			      char *typeName, int typeMaxLength,
			      const struct PRESInstanceHandle *handle,
				  struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_ignoreTopicByHandle(
			      struct PRESParticipant *me,
			      int *failReason,
			      const struct PRESInstanceHandle *handle,
				  struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESParticipant_getNextTopicType(
			      struct PRESParticipant *me,
			      int *failReason,
				  struct PRESTopicTypeIterator *iter,
			      struct PRESInstanceHandle *handle,
				  struct REDAWorker *worker);

extern PRESDllExport
int PRESParticipant_getTypeObjectCount(
    struct PRESParticipant * me,
    struct REDAWorker *worker);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "pres/pres_participant_impl.h"

#endif /* pres_participant_h */
