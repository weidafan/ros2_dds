/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)transport_udpv4_impl.h    generated by: makeheader    Mon Apr 25 07:49:59 2016
 *
 *		built from:	udpv4_impl.ifc
 */

#ifndef transport_udpv4_impl_h
#define transport_udpv4_impl_h


#include "osapi/osapi_socket.h"
#ifndef reda_inlineList_h
  #include "reda/reda_inlineList.h"
#endif
#ifdef __cplusplus
    extern "C" {
#endif


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_UP           (0x1)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_BROADCAST    (0x2)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_LOOPBACK     (0x4)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_POINTOPOINT  (0x8)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_MULTICAST   (0x10)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_RUNNING     (0x20)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_NAME_LENGTH     16


struct NDDS_Transport_UDPv4_Interface_t {
    NDDS_Transport_Interface_t        _interface;  
    unsigned int                      _interfaceFlags;
    char _interfaceName[NDDS_TRANSPORT_UDPV4_INTERFACE_NAME_LENGTH];
};


struct NDDS_Transport_UDPv4 {
    NDDS_Transport_Plugin                       parent;
    struct NDDS_Transport_UDPv4_Property_t     _property;
    struct NDDS_Transport_UDPv4_SocketFactory *_socketFactory;

    /* for built-in performance measurement */
    struct RTIClock                   *_clock; 

    /* default sockets used to send */
    int                                _unisocket;
    NDDS_Transport_Port_t              _unisocket_port;
    int                               *_multisocket;

    /* store system information about the running NICs */
    int                                _interfacesCount; 
    struct NDDS_Transport_UDPv4_Interface_t  *_udpv4InterfaceArray;
    int                                _interfaceArraySize; 
    struct NDDS_Transport_UDPv4_Interface_t   _firstAllowedLoopbackInterface; 

    /* user installed function that will be used to prevent an
       instance from using the interface */
    struct NDDS_Transport_UDPv4_InterfaceListener* _interfaceListener;

    char _id[NDDS_TRANSPORT_UDPV4_UNBLOCK_MESSAGE_SIZE];

#if defined(RTI_UDPV4_GATHER_SEND) 
    struct NDDS_Transport_UDPv4_gatherSendBuffer* gatherSendBuffer;
#endif
    /* Thread to be used to poll the network interfaces. This will
       only be created if ignore_nonup_interfaces is FALSE*/
    struct RTIOsapiThread * _pollingThread;
    /* A list of multicast receive resources created for the transport.
       This will be used to rejoin the multicast group if the polling
       thread identifies that some interface transitioend to UP state*/
    struct REDAInlineList _multicastReceiveResourceList;
    /* A list of multicast send resources created for the transport.
       This will be used to rejoin the multicast group if the polling
       thread identifies that some interface transitioend to UP state*/
    struct REDAInlineList _multicastSendResourceList;
    /*To guard the multicast receive resource list*/
    struct RTIOsapiSemaphore * _mutex;
    /*Binary Semaphore signalled by the polling thread at termination*/
    struct RTIOsapiSemaphore* _pollingExitSemaphore;
    /*Binary Semaphore used by the polling thread to wait on for the sleep period. 
      The main thread on termination can trigger this semaphore to wake the thread
      up earlier than the sleep period*/
    struct RTIOsapiSemaphore* _pollingWaitSemaphore;
    /* TODO : Add HANDLE _callbackHandle for Windows Vista and above*/
    /* Public IP address of the transport instantiation */
    NDDS_Transport_Address_t _publicAddress;
    
    struct NDDS_Transport_UDPv4_Statistics _statistics;

    /* For internal use only. Keeps track of the min and max transport
       priorities that send resources are being created with */
    RTI_INT32 _min_priority;
    RTI_INT32 _max_priority;

    /* CORE-4052: Used for determining if ignore loopback interface */
    RTIBool _ignoreLoopbackInterface;

  #if defined(RTI_WIN32) || defined(RTI_WINCE)
    /* CORE-5954 -- Function pointer for the shutdown of the socket. */
    void * _cancelIoExFnc;
  #endif

};


struct NDDS_Transport_UDPv4_SendResource_t {
    /*i Node structure for use in list. */
    struct REDAInlineListNode _node;
    RTI_INT32             unisocket;
    NDDS_Transport_Port_t unisocket_port;
    RTI_INT32            *multisocket;
    RTI_INT32             transport_priority;
};


struct NDDS_Transport_UDPv4_RecvResource_t {
    /*i Node structure for use in list. */
    struct REDAInlineListNode _node;
    RTI_INT32             socket;
    NDDS_Transport_Port_t port;
    RTI_INT32             is_multicast;
    /* Address stored in host byte order when receive resource is created
       This address is used to send the unblock message.
     */
    RTI_UINT32            multicast_address;
#if !defined(RTI_VX653)    
    struct sockaddr_in last_source_socket_address;
#endif    
    RTIBool is_unblocking;
};


#define NDDS_Transport_UDPv4_new(property_in) \
        NDDS_Transport_UDPv4_newI(property_in, NULL, NULL, NULL)


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* transport_udpv4_impl_h */
