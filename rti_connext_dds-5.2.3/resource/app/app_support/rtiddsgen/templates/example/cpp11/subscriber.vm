##/* $Id$
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.
##
##modification history:
##---------------------
##2.2.3,23sep15,djs CODEGENII-481 Added iOS
##2.2,25feb15,ajm CODEGENII-322 Reviewing examples. Checking valid samples
##2.2,20jun14,eam Small formatting edits
##2.2,13jun14,ajm created 
##========================================================================*/*#
/* ${envMap.idlFileName}_subscriber.cxx

   A subscription example

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C++11 -example <arch> ${envMap.idlFileName}.idl

   Example subscription of type ${constructMap.nativeFQName} automatically generated by 
   'rtiddsgen'. To test them, follow these steps:

   (1) Compile this file and the example publication.

   (2) Start the subscription on the same domain used for RTI Data Distribution
       Service  with the command
       objs/<arch>/${envMap.idlFileName}_subscriber <domain_id> <sample_count>

   (3) Start the publication on the same domain used for RTI Data Distribution
       Service with the command
       objs/<arch>/${envMap.idlFileName}_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
                          
       On UNIX systems: 
       
       objs/<arch>/${envMap.idlFileName}_publisher <domain_id> 
       objs/<arch>/${envMap.idlFileName}_subscriber <domain_id> 
                            
       On Windows systems:
       
       objs\<arch>\\${envMap.idlFileName}_publisher <domain_id>  
       objs\<arch>\\${envMap.idlFileName}_subscriber <domain_id>   
       
*/
${envMap.POUND_CHAR}include <algorithm>
${envMap.POUND_CHAR}include <iostream>

${envMap.POUND_CHAR}include <dds/sub/ddssub.hpp>
${envMap.POUND_CHAR}include <dds/core/ddscore.hpp>
// Or simply include <dds/dds.hpp> 

${envMap.POUND_CHAR}include "${envMap.idlFileName}.hpp"

#*--*##if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#*--*##end
#*--*##if( ${envMap.android} || ${envMap.universal})
${envMap.POUND_CHAR}include <android/log.h>

typedef int (*RTIAndroidOnCoutMethod)(const char *text);
static RTIAndroidOnCoutMethod publisher_onCout = NULL;
extern "C" void RTIAndroid_registerOnCout(RTIAndroidOnCoutMethod onCout) {
    publisher_onCout = onCout;
}

#*--*#${envMap.POUND_CHAR}define RTI_ANDROID_BUFFER_SIZE 512

class RTIAndroidBuffer : public std::streambuf {
  public:
    RTIAndroidBuffer() { 
	this->setp(buffer, buffer + RTI_ANDROID_BUFFER_SIZE - 1); 
    }

  private:
    int overflow(int c) {
	if (c == traits_type::eof()) {
	    *this->pptr() = traits_type::to_char_type(c);
	    this->sbumpc();
	}
	return this->sync()? traits_type::eof(): traits_type::not_eof(c);
    }

    int sync() {
	int rc = 0;
	if (this->pbase() != this->pptr()) {
	    char writebuf[RTI_ANDROID_BUFFER_SIZE + 1];
	    memcpy(writebuf, this->pbase(), this->pptr() - this->pbase());
	    writebuf[this->pptr() - this->pbase()] = '\0';

	    /* forward message */
	    if (publisher_onCout != NULL) {
		rc = publisher_onCout(writebuf);
	    } else {
		rc = __android_log_write(ANDROID_LOG_INFO, "RTIConnextLog", writebuf) >  0;
	    }

	    this->setp(buffer, buffer + RTI_ANDROID_BUFFER_SIZE - 1);
	}
	return rc;
    }

    char buffer[RTI_ANDROID_BUFFER_SIZE];
};
#*--*##end
#*--*##if( ${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#*--*##end

#*--*##if(${envMap.universal})
${envMap.POUND_CHAR}if defined(RTI_IOS)
#*--*##end
#*--*##if(${envMap.iOS} || ${envMap.universal}) 
extern "C"
#*--*##end
#*--*##if(${envMap.universal})
${envMap.POUND_CHAR}endif
#*--*##end
int subscriber_main(int domain_id, int sample_count)
{
    // Create a DomainParticipant with default Qos
    dds::domain::DomainParticipant participant(domain_id);

    // Create a Topic -- and automatically register the type
    dds::topic::Topic<${constructMap.nativeFQName}> topic(participant, "Example ${constructMap.nativeCFQName}");

    // Create a DataReader with default Qos (Subscriber created in-line)
    dds::sub::DataReader<${constructMap.nativeFQName}> reader(dds::sub::Subscriber(participant), topic);

    // Create a ReadCondition for any data on this reader and associate a handler
    int count = 0;
    dds::sub::cond::ReadCondition read_condition(
        reader,
        dds::sub::status::DataState::any(),
        [&reader, &count]()
        {
            // Take all samples
            dds::sub::LoanedSamples<${constructMap.nativeFQName}> samples = reader.take();
            for (auto sample : samples){
                if (sample.info().valid()){
                    count++;
                    std::cout << sample.data() << std::endl; 
                }   
            }
            
        } // The LoanedSamples destructor returns the loan
    );

    // Create a WaitSet and attach the ReadCondition
    dds::core::cond::WaitSet waitset;
    waitset += read_condition;

    while (count < sample_count || sample_count == 0) {
        // Dispatch will call the handlers associated to the WaitSet conditions
        // when they activate
        std::cout << "${constructMap.nativeFQName} subscriber sleeping for 4 sec..." << std::endl;
        waitset.dispatch(dds::core::Duration(4)); // Wait up to 4s each time
    }
    return 1;
}

#*--*##if(${envMap.universal})
${envMap.POUND_CHAR}if !defined(RTI_IOS)
#*--*##end
#*--*##if(!${envMap.iOS})
int main(int argc, char *argv[])
{

#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#*----*##end
#*----*##if( ${envMap.android} || ${envMap.universal})
    std::cout.rdbuf(new RTIAndroidBuffer);
    std::cerr.rdbuf(new RTIAndroidBuffer);
#*----*##end
#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#*----*##end

    int domain_id = 0;
    int sample_count = 0; // infinite loop

    if (argc >= 2) {
        domain_id = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    // To turn on additional logging, include <rti/config/Logger.hpp> and
    // uncomment the following line:
    // rti::config::Logger::instance().verbosity(rti::config::Verbosity::STATUS_ALL);

    try {
        subscriber_main(domain_id, sample_count);
    } catch (const std::exception& ex) {
        // This will catch DDS exceptions
        std::cerr << "Exception in subscriber_main(): " << ex.what() << std::endl;
        return -1;
    }
    
    // RTI Connext provides a finalize_participant_factory() method
    // if you want to release memory used by the participant factory singleton.
    // Uncomment the following line to release the singleton:
    //
    // dds::domain::DomainParticipant::finalize_participant_factory();

#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#*----*##end
#*----*##if( ${envMap.android} || ${envMap.universal})
    std::cout.rdbuf(0);
    std::cerr.rdbuf(0);
#*----*##end
#*----*##if(${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#*----*##end
    return 0;
}
#*----*##if(${envMap.universal})
${envMap.POUND_CHAR}endif // !defined(RTI_IOS)
#*----*##end
#*--*##end

           
       
