##/* $Id$
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.

##modification history:
##---------------------
##2.2,04sep14,ajm CODEGENII-374 Adding hidden option -modifyPubData
##10a,10jun13,ajm CODEGENII-109 adding envMap and constructMapList variables
##10a,28may13,ajm Adding constructMap node for the example type
##10a,02Apr13,ajm Fixing bug
##10a,14oct11,jmt created 
##========================================================================*/*#
/* ${envMap.idlFileName}_publisher.cpp

   A publication of data of type ${envMap.idlFileName}

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C++/CLI -example <arch> ${envMap.idlFileName}.idl

   Example publication of type ${envMap.idlFileName} automatically generated by 
   'rtiddsgen'. To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription with the command
       ${envMap.idlFileName}_subscriber <domain_id> <sample_count>
                
   (3) Start the publication with the command
       ${envMap.idlFileName}_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 

   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.


   Example:

       To run the example application on domain <domain_id>:

       ${constructMap.nativeFQNameInModule}_publisher <domain_id> <sample_count>
       ${constructMap.nativeFQNameInModule}_subscriber <domain_id> <sample_count>
*/

${envMap.POUND_CHAR}ifndef IMPORT_${envMap.idlFileName}
/* If this example code is packaged into an assembly other than that
 * containing the generated types themselves, no header inclusion is
 * necessary. In that case, simply define IMPORT_${constructMap.nativeFQNameInModule}.
 */
${envMap.POUND_CHAR}include "${envMap.idlFileName}Support.h"
${envMap.POUND_CHAR}endif

using namespace System;


public ref class ${constructMap.nativeFQNameInModule}Publisher {
public:
    static void publish(int domain_id, int sample_count);

private:
    static void shutdown(
        DDS::DomainParticipant^ participant);
};

int main(array<System::String^>^ argv) {
    int domain_id = 0;
    if (argv->Length >= 1) {
        domain_id = Int32::Parse(argv[0]);
    }

    int sample_count = 0; /* infinite loop */
    if (argv->Length >= 2) {
        sample_count = Int32::Parse(argv[1]);
    }

    /* Uncomment this to turn on additional logging
    NDDS::ConfigLogger::get_instance()->set_verbosity_by_category(
        NDDS::LogCategory::NDDS_CONFIG_LOG_CATEGORY_API, 
        NDDS::LogVerbosity::NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
    try {
        ${constructMap.nativeFQNameInModule}Publisher::publish(
            domain_id, sample_count);
    }
    catch(DDS::Exception^) {
        return -1;
    }
    return 0;
}

void ${constructMap.nativeFQNameInModule}Publisher::publish(int domain_id, int sample_count) {

    /* To customize participant QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    DDS::DomainParticipant^ participant =
        DDS::DomainParticipantFactory::get_instance()->create_participant(
            domain_id,
            DDS::DomainParticipantFactory::PARTICIPANT_QOS_DEFAULT, 
            nullptr /* listener */,
            DDS::StatusMask::STATUS_MASK_NONE);
    if (participant == nullptr) {
        shutdown(participant);
        throw gcnew ApplicationException("create_participant error");
    }

    /* To customize publisher QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    DDS::Publisher^ publisher = participant->create_publisher(
        DDS::DomainParticipant::PUBLISHER_QOS_DEFAULT,
        nullptr /* listener */,
        DDS::StatusMask::STATUS_MASK_NONE);
    if (publisher == nullptr) {
        shutdown(participant);
        throw gcnew ApplicationException("create_publisher error");
    }

    /* Register type before creating topic */
    System::String^ type_name = ${constructMap.FQName}TypeSupport::get_type_name();
    try {
        ${constructMap.FQName}TypeSupport::register_type(
            participant, type_name);
    } catch (DDS::Exception^ e) {
        shutdown(participant);
        throw e;
    }

    /* To customize topic QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    DDS::Topic^ topic = participant->create_topic(
        "Example ${constructMap.nativeCFQName}",
        type_name,
        DDS::DomainParticipant::TOPIC_QOS_DEFAULT,
        nullptr /* listener */,
        DDS::StatusMask::STATUS_MASK_NONE);
    if (topic == nullptr) {
        shutdown(participant);
        throw gcnew ApplicationException("create_topic error");
    }

    /* To customize data writer QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    DDS::DataWriter^ writer = publisher->create_datawriter(
        topic,
        DDS::Publisher::DATAWRITER_QOS_DEFAULT,
        nullptr /* listener */,
        DDS::StatusMask::STATUS_MASK_NONE);
    if (writer == nullptr) {
        shutdown(participant);
        throw gcnew ApplicationException("create_datawriter error");
    }
    ${constructMap.FQName}DataWriter^ ${constructMap.nativeFQNameInModule}_writer =
        safe_cast<${constructMap.FQName}DataWriter^>(writer);

    /* Create data sample for writing */
    ${constructMap.FQName}^ instance = ${constructMap.FQName}TypeSupport::create_data();
    if (instance == nullptr) {
        shutdown(participant);
        throw gcnew ApplicationException(
            "${constructMap.FQName}TypeSupport::create_data error");
    }

    /* For a data type that has a key, if the same instance is going to be
       written multiple times, initialize the key here
       and register the keyed instance prior to writing */
    DDS::InstanceHandle_t instance_handle = DDS::InstanceHandle_t::HANDLE_NIL;
/*
    instance_handle = ${constructMap.nativeFQNameInModule}_writer->register_instance(instance);
*/

    /* Main loop */
    const System::Int32 send_period = 4000; // milliseconds
    for (int count=0; (sample_count == 0) || (count < sample_count); ++count) {
        Console::WriteLine("Writing ${constructMap.nativeFQNameInModule}, count {0}", count);

        /* Modify the data to be sent here */
        ${envMap.modifyPubData}

        try {
            ${constructMap.nativeFQNameInModule}_writer->write(instance, instance_handle);
        }
        catch(DDS::Exception ^e) {
            Console::WriteLine("write error: {0}", e);
        }

        System::Threading::Thread::Sleep(send_period);
    }

/*
    try {
        ${constructMap.nativeFQNameInModule}_writer->unregister_instance(
            instance, instance_handle);
    }
    catch(DDS::Exception ^e) {
        Console::WriteLine("unregister instance error: {0}", e);
    }
*/

    /* Delete data sample */
    try {
        ${constructMap.FQName}TypeSupport::delete_data(instance);
    }
    catch(DDS::Exception ^e) {
        Console::WriteLine("${constructMap.FQName}TypeSupport::delete_data error: {0}", e);
    }

    /* Delete all entities */
    shutdown(participant);
}

/* Delete all entities */
void ${constructMap.nativeFQNameInModule}Publisher::shutdown(
        DDS::DomainParticipant^ participant) {

    if (participant != nullptr) {
        participant->delete_contained_entities();
        DDS::DomainParticipantFactory::get_instance()->delete_participant(participant);
    }

    /* RTI Connext provides finalize_instance() method on
       domain participant factory for people who want to release memory used
       by the participant factory. Uncomment the following block of code for
       clean destruction of the singleton. */
/*
    DDS::DomainParticipantFactory::finalize_instance();
*/
}
