##/* $Id$
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.

##modification history:
##---------------------
##2.2.3,23sep15,djs CODEGENII-481 Added iOS
##2.2,03sep14,vmg CODEGENII-82 Added Android
##2.2,30apr14,vmg CODEGENII-82 Adding smart architecture-based code generation
##2.2,11jun14,eys PLATFORMS-147: Added Android support
##10a,10jun13,ajm CODEGENII-109 adding envMap and constructMapList variables
##10a,28may13,ajm Adding constructMap node for the example type
##10a,25oct12, ajm Refactorizing code and variable names.
##                 RRTIDDSGEN-32 support for -use42eAlignment and -generateCTypecode
##10a,05ene12, ajm Upgrading to lola
##10a,17oct11,ajm variable name changes acording to the emitters
##10a,14oct11,jmt created 
##========================================================================*/*#
/* ${envMap.idlFileName}_subscriber.c

   A subscription example

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C -example <arch> ${envMap.idlFileName}.idl

   Example subscription of type ${constructMap.nativeFQName} automatically generated by 
   'rtiddsgen'. To test them, follow these steps:

   (1) Compile this file and the example publication.

   (2) Start the subscription on the same domain used for RTI Data Distribution
       Service  with the command
       objs/<arch>/${envMap.idlFileName}_subscriber <domain_id> <sample_count>

   (3) Start the publication on the same domain used for RTI Data Distribution
       Service with the command
       objs/<arch>/${envMap.idlFileName}_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
                          
       On UNIX systems: 
       
       objs/<arch>/${envMap.idlFileName}_publisher <domain_id> 
       objs/<arch>/${envMap.idlFileName}_subscriber <domain_id> 
                            
       On Windows systems:
       
       objs\<arch>\\${envMap.idlFileName}_publisher <domain_id>  
       objs\<arch>\\${envMap.idlFileName}_subscriber <domain_id>   
       
*/

${envMap.POUND_CHAR}include <stdio.h>
${envMap.POUND_CHAR}include <stdlib.h>
${envMap.POUND_CHAR}include "ndds/ndds_c.h"
${envMap.POUND_CHAR}include "${envMap.idlFileName}.h"
${envMap.POUND_CHAR}include "${envMap.idlFileName}Support.h"

#*--*##if(${envMap.universal})
${envMap.POUND_CHAR}if defined(RTI_IOS)
#*--*##end

#*--*##if( ${envMap.iOS} || ${envMap.universal})
#*----*##parse("example/c/subscriber_ios.vm")
#*--*##end

#*--*##if(!${envMap.iOS})

#*----*##if(${envMap.universal})
${envMap.POUND_CHAR}else //Not RTI_IOS
#*----*##end

#if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#end
#if( ${envMap.android} || ${envMap.universal})
${envMap.POUND_CHAR}include <stdarg.h>
${envMap.POUND_CHAR}include <android/log.h>

typedef int (*RTIAndroidOnPrintfMethod)(const char *format, va_list ap);
static RTIAndroidOnPrintfMethod subscriber_onPrintf = NULL;

${envMap.POUND_CHAR}define printf Android_printf

static int Android_printf(const char *format, ...) {

    int len;
    va_list ap;
    va_start(ap, format);

    if (subscriber_onPrintf!= NULL) {
	len = subscriber_onPrintf(format, ap);
    } else {
	len = __android_log_vprint(ANDROID_LOG_INFO, "RTIConnextLog", format, ap);
    }

    va_end(ap);

    return len;
}

void RTIAndroid_registerOnPrintf(RTIAndroidOnPrintfMethod onPrintf) {
    subscriber_onPrintf = onPrintf;
}
#end

#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#end

void ${constructMap.nativeFQName}Listener_on_requested_deadline_missed(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_RequestedDeadlineMissedStatus *status)
{
}

void ${constructMap.nativeFQName}Listener_on_requested_incompatible_qos(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_RequestedIncompatibleQosStatus *status)
{
}

void ${constructMap.nativeFQName}Listener_on_sample_rejected(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_SampleRejectedStatus *status)
{
}

void ${constructMap.nativeFQName}Listener_on_liveliness_changed(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_LivelinessChangedStatus *status)
{
}

void ${constructMap.nativeFQName}Listener_on_sample_lost(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_SampleLostStatus *status)
{
}

void ${constructMap.nativeFQName}Listener_on_subscription_matched(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_SubscriptionMatchedStatus *status)
{
}

void ${constructMap.nativeFQName}Listener_on_data_available(
    void* listener_data,
    DDS_DataReader* reader)
{
    ${constructMap.nativeFQName}DataReader *${constructMap.nativeFQName}_reader = NULL;
    struct ${constructMap.nativeFQName}Seq data_seq = DDS_SEQUENCE_INITIALIZER;
    struct DDS_SampleInfoSeq info_seq = DDS_SEQUENCE_INITIALIZER;
    DDS_ReturnCode_t retcode;
    int i;

    ${constructMap.nativeFQName}_reader = ${constructMap.nativeFQName}DataReader_narrow(reader);
    if (${constructMap.nativeFQName}_reader == NULL) {
        printf("DataReader narrow error\n");
        return;
    }

    retcode = ${constructMap.nativeFQName}DataReader_take(
        ${constructMap.nativeFQName}_reader,
        &data_seq, &info_seq, DDS_LENGTH_UNLIMITED,
        DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE, DDS_ANY_INSTANCE_STATE);
    if (retcode == DDS_RETCODE_NO_DATA) {
        return;
    } else if (retcode != DDS_RETCODE_OK) {
        printf("take error %d\n", retcode);
        return;
    }

    for (i = 0; i < ${constructMap.nativeFQName}Seq_get_length(&data_seq); ++i) {
        if (DDS_SampleInfoSeq_get_reference(&info_seq, i)->valid_data) {
            printf("Received data\n");
            ${constructMap.nativeFQName}TypeSupport_print_data(
                ${constructMap.nativeFQName}Seq_get_reference(&data_seq, i));
        }
    }

    retcode = ${constructMap.nativeFQName}DataReader_return_loan(
        ${constructMap.nativeFQName}_reader,
        &data_seq, &info_seq);
    if (retcode != DDS_RETCODE_OK) {
        printf("return loan error %d\n", retcode);
    }
}

/* Delete all entities */
static int subscriber_shutdown(
    DDS_DomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = DDS_DomainParticipant_delete_contained_entities(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDS_DomainParticipantFactory_delete_participant(
            DDS_TheParticipantFactory, participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Data Distribution Service provides the finalize_instance() method on
       domain participant factory for users who want to release memory used
       by the participant factory. Uncomment the following block of code for
       clean destruction of the singleton. */
/*
    retcode = DDS_DomainParticipantFactory_finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        printf("finalize_instance error %d\n", retcode);
        status = -1;
    }
*/

    return status;
}

static int subscriber_main(int domainId, int sample_count)
{
    DDS_DomainParticipant *participant = NULL;
    DDS_Subscriber *subscriber = NULL;
    DDS_Topic *topic = NULL;
    struct DDS_DataReaderListener reader_listener =
        DDS_DataReaderListener_INITIALIZER;
    DDS_DataReader *reader = NULL;
    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;
    struct DDS_Duration_t poll_period = {4,0};

    /* To customize participant QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    participant = DDS_DomainParticipantFactory_create_participant(
        DDS_TheParticipantFactory, domainId, &DDS_PARTICIPANT_QOS_DEFAULT,
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize subscriber QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    subscriber = DDS_DomainParticipant_create_subscriber(
        participant, &DDS_SUBSCRIBER_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (subscriber == NULL) {
        printf("create_subscriber error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Register the type before creating the topic */
    type_name = ${constructMap.nativeFQName}TypeSupport_get_type_name();
    retcode = ${constructMap.nativeFQName}TypeSupport_register_type(participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize topic QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    topic = DDS_DomainParticipant_create_topic(
        participant, "Example ${constructMap.nativeFQName}",
        type_name, &DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Set up a data reader listener */
    reader_listener.on_requested_deadline_missed  =
        ${constructMap.nativeFQName}Listener_on_requested_deadline_missed;
    reader_listener.on_requested_incompatible_qos =
        ${constructMap.nativeFQName}Listener_on_requested_incompatible_qos;
    reader_listener.on_sample_rejected =
        ${constructMap.nativeFQName}Listener_on_sample_rejected;
    reader_listener.on_liveliness_changed =
        ${constructMap.nativeFQName}Listener_on_liveliness_changed;
    reader_listener.on_sample_lost =
        ${constructMap.nativeFQName}Listener_on_sample_lost;
    reader_listener.on_subscription_matched =
        ${constructMap.nativeFQName}Listener_on_subscription_matched;
    reader_listener.on_data_available =
        ${constructMap.nativeFQName}Listener_on_data_available;

    /* To customize data reader QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    reader = DDS_Subscriber_create_datareader(
        subscriber, DDS_Topic_as_topicdescription(topic),
        &DDS_DATAREADER_QOS_DEFAULT, &reader_listener, DDS_STATUS_MASK_ALL);
    if (reader == NULL) {
        printf("create_datareader error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {
        printf("${constructMap.nativeFQName} subscriber sleeping for %d sec...\n",
               poll_period.sec);
        NDDS_Utility_sleep(&poll_period);
    }

    /* Cleanup and delete all entities */ 
    return subscriber_shutdown(participant);
}


#if( ${envMap.universal} )
${envMap.POUND_CHAR}if (!defined(RTI_VXWORKS) || defined(__RTP__))
#end
#if( !${envMap.vxWorks} || ${envMap.rtp}  || ${envMap.universal} )
int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDS_Config_Logger_set_verbosity_by_category(
        NDDS_Config_Logger_get_instance(),
        NDDS_CONFIG_LOG_CATEGORY_API, 
        NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
    
    return subscriber_main(domainId, sample_count);
}
#end
#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif
#end

#if( ${envMap.universal} )
${envMap.POUND_CHAR}ifdef RTI_VX653
#end
#if( ${envMap.vx653} || ${envMap.universal} )
const unsigned char* __ctype = NULL;

void usrAppInit ()
{
${envMap.POUND_CHAR}ifdef  USER_APPL_INIT
    USER_APPL_INIT;         /* for backwards compatibility */
${envMap.POUND_CHAR}endif
    
    /* add application specific code here */
    taskSpawn("sub", RTI_OSAPI_THREAD_PRIORITY_NORMAL, 0x8, 0x150000, (FUNCPTR)subscriber_main, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
   
}
#end
#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif
#end
#*----*##if(${envMap.universal})
${envMap.POUND_CHAR}endif /*RTI_IOS*/
#*----*##end

#*--*##end

