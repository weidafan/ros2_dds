##/* $Id$
##
##   (c) Copyright, Real-Time Innovations, Inc. 2015.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.
##
##modification history:
##---------------------
##2.2.3,23sep15,djs created 
##========================================================================*/*#

${envMap.POUND_CHAR}include "${envMap.idlFileName}_publisher.h"


/* Delete all entities */
extern int publisher_shutdown(
    const struct DDS_Entities* self)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (self == NULL) {
        return -1;
    }
    retcode = ${constructMap.nativeFQName}DataWriter_unregister_instance(
        self->${constructMap.nativeFQName}_writer, self->instance, &self->instance_handle);
    if (retcode != DDS_RETCODE_OK) {
        printf("unregister instance error %d\n", retcode);
    }

    /* Delete data sample */
    retcode = ${constructMap.nativeFQName}TypeSupport_delete_data_ex(self->instance, DDS_BOOLEAN_TRUE);
    if (retcode != DDS_RETCODE_OK) {
        printf("${constructMap.nativeFQName}TypeSupport_delete_data error %d\n", retcode);
    }

    if (self->participant != NULL) {
        retcode = DDS_DomainParticipant_delete_contained_entities(self->participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDS_DomainParticipantFactory_delete_participant(
            DDS_TheParticipantFactory, self->participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* Release memory used by the participant factory. */
    retcode = DDS_DomainParticipantFactory_finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        printf("finalize_instance error %d\n", retcode);
        status = -1;
    }

    return status;
}

extern int dds_setup(struct DDS_Entities* self, int domainId)
{
    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;

    if (self == NULL ) {
        printf("dds_setup error\n");
        return -1;
    }

    /* To customize participant QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    self->participant = DDS_DomainParticipantFactory_create_participant(
        DDS_TheParticipantFactory, domainId, &DDS_PARTICIPANT_QOS_DEFAULT,
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (self->participant == NULL) {
        printf("create_participant error\n");
        publisher_shutdown(self);
        return -1;
    }

    /* To customize publisher QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    self->publisher = DDS_DomainParticipant_create_publisher(
        self->participant, &DDS_PUBLISHER_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (self->publisher == NULL) {
        printf("create_publisher error\n");
        publisher_shutdown(self);
        return -1;
    }

    /* Register type before creating topic */
    type_name = ${constructMap.nativeFQName}TypeSupport_get_type_name();
    retcode = ${constructMap.nativeFQName}TypeSupport_register_type(
        self->participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        publisher_shutdown(self);
        return -1;
    }

    /* To customize topic QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    self->topic = DDS_DomainParticipant_create_topic(
        self->participant, "Example ${constructMap.nativeFQName}",
        type_name, &DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (self->topic == NULL) {
        printf("create_topic error\n");
        publisher_shutdown(self);
        return -1;
    }

    /* To customize data writer QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    self->writer = DDS_Publisher_create_datawriter(
        self->publisher, self->topic,
        &DDS_DATAWRITER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (self->writer == NULL) {
        printf("create_datawriter error\n");
        publisher_shutdown(self);
        return -1;
    }
    self->${constructMap.nativeFQName}_writer = ${constructMap.nativeFQName}DataWriter_narrow(self->writer);
    if (self->${constructMap.nativeFQName}_writer == NULL) {
        printf("DataWriter narrow error\n");
        publisher_shutdown(self);
        return -1;
    }

    /* Create data sample for writing */
    self->instance = ${constructMap.nativeFQName}TypeSupport_create_data_ex(DDS_BOOLEAN_TRUE);
    if (self->instance == NULL) {
        printf("${constructMap.nativeFQName}TypeSupport_create_data error\n");
        publisher_shutdown(self);
        return -1;
    }

    /* For a data type that has a key, if the same instance is going to be
    written multiple times, initialize the key here
    and register the keyed instance prior to writing */
    /*
    instance_handle = ${constructMap.nativeFQName}DataWriter_register_instance(
        self->${constructMap.nativeFQName}_writer, self->instance);
    */
    return DDS_RETCODE_OK;
}

extern void dds_publish(const struct DDS_Entities* self, const int count)
{
    DDS_ReturnCode_t retcode;

    printf("Writing ${constructMap.nativeFQName}, count %d\n", count);

    /* Modify the data to be written here */
    ${envMap.modifyPubData}

    /* Write data */
    retcode = ${constructMap.nativeFQName}DataWriter_write(
        self->${constructMap.nativeFQName}_writer, self->instance, &self->instance_handle);
    if (retcode != DDS_RETCODE_OK) {
        printf("write error %d\n", retcode);
    }
}


