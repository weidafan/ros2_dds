##/* $Id$
##
##   (c) Copyright, Real-Time Innovations, Inc. 2015.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.
##
##modification history:
##---------------------
##2.2.3,23sep15,djs created 
##========================================================================*/*#
${envMap.POUND_CHAR}include "${envMap.idlFileName}_publisher.h"

DDS_Entities::DDS_Entities() {
    participant = NULL;
    publisher = NULL;
    topic = NULL;
    writer = NULL;
    ${constructMap.nativeFQName}_writer = NULL;
    instance = NULL;
    DDS_InstanceHandle_t instance_handle = DDS_HANDLE_NIL;
}

int DDS_Entities::publisher_shutdown()
{
    DDS_ReturnCode_t retcode;
    int status = 0;

/*
    retcode = ${constructMap.nativeFQName}_writer->unregister_instance(
        *instance, instance_handle);
    if (retcode != DDS_RETCODE_OK) {
        printf("unregister instance error %d\n", retcode);
    }
*/

    /* Delete data sample */
    retcode = ${constructMap.nativeFQName}TypeSupport::delete_data(instance);
    if (retcode != DDS_RETCODE_OK) {
        printf("${constructMap.nativeFQName}TypeSupport::delete_data error %d\n", retcode);
    }


    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* Release memory used by the participant factory. */
    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        printf("finalize_instance error %d\n", retcode);
        status = -1;
    }

    return status;
}


int DDS_Entities::dds_setup(int domainId)
{
    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;

    /* To customize participant QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        publisher_shutdown();
        return -1;
    }

    /* To customize publisher QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    publisher = participant->create_publisher(
        DDS_PUBLISHER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (publisher == NULL) {
        printf("create_publisher error\n");
        publisher_shutdown();
        return -1;
    }

    /* Register type before creating topic */
    type_name = ${constructMap.nativeFQName}TypeSupport::get_type_name();
    retcode = ${constructMap.nativeFQName}TypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        publisher_shutdown();
        return -1;
    }

    /* To customize topic QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        "Example ${constructMap.nativeFQName}",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        publisher_shutdown();
        return -1;
    }

    /* To customize data writer QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    writer = publisher->create_datawriter(
        topic, DDS_DATAWRITER_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (writer == NULL) {
        printf("create_datawriter error\n");
        publisher_shutdown();
        return -1;
    }
    ${constructMap.nativeFQName}_writer = ${constructMap.nativeFQName}DataWriter::narrow(writer);
    if (${constructMap.nativeFQName}_writer == NULL) {
        printf("DataWriter narrow error\n");
        publisher_shutdown();
        return -1;
    }

    /* Create data sample for writing */
    instance = ${constructMap.nativeFQName}TypeSupport::create_data();
    if (instance == NULL) {
        printf("${constructMap.nativeFQName}TypeSupport::create_data error\n");
        publisher_shutdown();
        return -1;
    }

    /* For a data type that has a key, if the same instance is going to be
       written multiple times, initialize the key here
       and register the keyed instance prior to writing */
/*
    instance_handle = ${constructMap.nativeFQName}_writer->register_instance(*instance);
*/
    return 1;
}

void DDS_Entities::dds_publish(const int count) {
    DDS_ReturnCode_t retcode;
    printf("Writing ${constructMap.nativeFQName}, count %d\n", count);

    /* Modify the data to be sent here */
    ${envMap.modifyPubData}

    retcode = ${constructMap.nativeFQName}_writer->write(*instance, instance_handle);
    if (retcode != DDS_RETCODE_OK) {
        printf("write error %d\n", retcode);
    }
}

 
