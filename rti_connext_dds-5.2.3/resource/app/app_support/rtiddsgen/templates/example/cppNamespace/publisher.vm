##/* $Id$
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.

##modification history:
##---------------------
##2.2.3,23sep15,djs CODEGENII-481 Added iOS
##2.2,04sep14,ajm CODEGENII-374 Adding hidden option -modifyPubData
##2.2,03sep14,vmg CODEGENII-82 Added Android
##2.2,30apr14,vmg CODEGENII-82 Adding smart architecture-based code generation
##2.2,15apr14,vmg CODEGENII-200 examples with modules and -namespace option don't compile
##2.2,11jun14,eys PLATFORMS-147: Added Android support
##10a,10jun13,ajm CODEGENII-109 adding envMap and constructMapList variables
##10a,28may13,ajm Adding constructMap node for the example type
##10a,25oct12, ajm Refactorizing code and variable names.
##                 RRTIDDSGEN-32 support for -use42eAlignment and -generateCTypecode
##10a,10oct12, ajm Upgrade to Bigpine.Formatting and commenting
##10a,05ene12, ajm Upgrading to lola
##10a,17oct11,ajm variable name changes acording to the emitters
##10a,14oct11,jmt created 
##========================================================================*/*#
/* ${envMap.idlFileName}_publisher.cxx

   A publication of data of type ${constructMap.FQName}

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C++ -example <arch> ${envMap.idlFileName}.idl

   Example publication of type ${constructMap.FQName} automatically generated by 
   'rtiddsgen'. To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription with the command
       objs/<arch>/${envMap.idlFileName}_subscriber <domain_id> <sample_count>
                
   (3) Start the publication with the command
       objs/<arch>/${envMap.idlFileName}_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.

                                   
   Example:
        
       To run the example application on domain <domain_id>:
                          
       On Unix: 
       
       objs/<arch>/${envMap.idlFileName}_publisher <domain_id> o
       objs/<arch>/${envMap.idlFileName}_subscriber <domain_id> 
                            
       On Windows:
       
       objs\<arch>\\${envMap.idlFileName}_publisher <domain_id>  
       objs\<arch>\\${envMap.idlFileName}_subscriber <domain_id>    

*/

${envMap.POUND_CHAR}include <stdio.h>
${envMap.POUND_CHAR}include <stdlib.h>
#if( ${envMap.universal} )
${envMap.POUND_CHAR}ifdef RTI_VX653
#end
#if( ${envMap.vx653} || ${envMap.universal} )
${envMap.POUND_CHAR}include <vThreadsData.h>
#end
#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif
#end
${envMap.POUND_CHAR}include "${envMap.idlFileName}.h"
${envMap.POUND_CHAR}include "${envMap.idlFileName}Support.h"
${envMap.POUND_CHAR}include "ndds/ndds_cpp.h"

${envMap.POUND_CHAR}include "ndds/ndds_namespace_cpp.h"

using namespace DDS;

#if(${envMap.universal})
${envMap.POUND_CHAR}if defined(RTI_IOS)
#end

#if( ${envMap.iOS} || ${envMap.universal})
#parse("example/cppNamespace/publisher_ios.vm")
#end

#if(!${envMap.iOS})

#if(${envMap.universal})
${envMap.POUND_CHAR}else //Not RTI_IOS
#end

#if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#end
#if( ${envMap.android} || ${envMap.universal})
${envMap.POUND_CHAR}include <stdarg.h>
${envMap.POUND_CHAR}include <android/log.h>

typedef int (*RTIAndroidOnPrintfMethod)(const char *format, va_list ap);
static RTIAndroidOnPrintfMethod publisher_onPrintf = NULL;

${envMap.POUND_CHAR}define printf Android_printf

static int Android_printf(const char *format, ...) {

    int len;
    va_list ap;
    va_start(ap, format);

    if (publisher_onPrintf!= NULL) {
	len = publisher_onPrintf(format, ap);
    } else {
	len = __android_log_vprint(ANDROID_LOG_INFO, "RTIConnextLog", format, ap);
    }

    va_end(ap);

    return len;
}

extern "C" void RTIAndroid_registerOnPrintf(RTIAndroidOnPrintfMethod onPrintf) {
    publisher_onPrintf = onPrintf;
}
#end

#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#end

/* Delete all entities */
static int publisher_shutdown(
    DomainParticipant *participant)
{
    ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = TheParticipantFactory->delete_participant(participant);
        if (retcode != RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides finalize_instance() method on
       domain participant factory for people who want to release memory used
       by the participant factory. Uncomment the following block of code for
       clean destruction of the singleton. */
/*
    retcode = DomainParticipantFactory::finalize_instance();
    if (retcode != RETCODE_OK) {
        printf("finalize_instance error %d\n", retcode);
        status = -1;
    }
*/

    return status;
}

extern "C" int publisher_main(int domainId, int sample_count)
{
    DomainParticipant *participant = NULL;
    Publisher *publisher = NULL;
    Topic *topic = NULL;
    DataWriter *writer = NULL;
    ${constructMap.FQName}DataWriter * ${constructMap.name}_writer = NULL;
    ${constructMap.FQName} *instance = NULL;
    ReturnCode_t retcode;
    InstanceHandle_t instance_handle = HANDLE_NIL;
    const char *type_name = NULL;
    int count = 0;  
    Duration_t send_period = {4,0};

    /* To customize participant QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    participant = TheParticipantFactory->create_participant(
        domainId, PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize publisher QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    publisher = participant->create_publisher(
        PUBLISHER_QOS_DEFAULT, NULL /* listener */, STATUS_MASK_NONE);
    if (publisher == NULL) {
        printf("create_publisher error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* Register type before creating topic */
    type_name = ${constructMap.FQName}TypeSupport::get_type_name();
    retcode = ${constructMap.FQName}TypeSupport::register_type(
        participant, type_name);
    if (retcode != RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize topic QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        "Example ${constructMap.nativeCFQName}",
        type_name, TOPIC_QOS_DEFAULT, NULL /* listener */,
        STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize data writer QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    writer = publisher->create_datawriter(
        topic, DATAWRITER_QOS_DEFAULT, NULL /* listener */,
        STATUS_MASK_NONE);
    if (writer == NULL) {
        printf("create_datawriter error\n");
        publisher_shutdown(participant);
        return -1;
    }
    ${constructMap.name}_writer = ${constructMap.FQName}DataWriter::narrow(writer);
    if (${constructMap.name}_writer == NULL) {
        printf("DataWriter narrow error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* Create data sample for writing */
    instance = ${constructMap.FQName}TypeSupport::create_data();
    if (instance == NULL) {
        printf("${constructMap.FQName}TypeSupport::create_data error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* For a data type that has a key, if the same instance is going to be
       written multiple times, initialize the key here
       and register the keyed instance prior to writing */
/*
    instance_handle = ${constructMap.name}_writer->register_instance(*instance);
*/

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {

        printf("Writing ${constructMap.FQName}, count %d\n", count);

        /* Modify the data to be sent here */
        ${envMap.modifyPubData}

        retcode = ${constructMap.name}_writer->write(*instance, instance_handle);
        if (retcode != RETCODE_OK) {
            printf("write error %d\n", retcode);
        }

        NDDSUtility::sleep(send_period);
    }

/*
    retcode = ${constructMap.name}_writer->unregister_instance(
        *instance, instance_handle);
    if (retcode != RETCODE_OK) {
        printf("unregister instance error %d\n", retcode);
    }
*/

    /* Delete data sample */
    retcode = ${constructMap.FQName}TypeSupport::delete_data(instance);
    if (retcode != RETCODE_OK) {
        printf("${constructMap.FQName}TypeSupport::delete_data error %d\n", retcode);
    }

    /* Delete all entities */
    return publisher_shutdown(participant);
}

 
#if( ${envMap.universal} )
${envMap.POUND_CHAR}if (!defined(RTI_VXWORKS) || defined(__RTP__))
#end
#if( !${envMap.vxWorks} || ${envMap.rtp}  || ${envMap.universal} )
int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
        set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
                                  NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
    
    return publisher_main(domainId, sample_count);
}
#end
#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif
#end

#if( ${envMap.universal} )
${envMap.POUND_CHAR}ifdef RTI_VX653
#end
#if( ${envMap.vx653} || ${envMap.universal} )
const unsigned char* __ctype = *(__ctypePtrGet());

extern "C" void usrAppInit ()
{
${envMap.POUND_CHAR}ifdef  USER_APPL_INIT
    USER_APPL_INIT;         /* for backwards compatibility */
${envMap.POUND_CHAR}endif
    
    /* add application specific code here */
    taskSpawn("pub", RTI_OSAPI_THREAD_PRIORITY_NORMAL, 0x8, 0x150000, (FUNCPTR)publisher_main, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
   
}
#end
#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif
#end

#if(${envMap.universal})
${envMap.POUND_CHAR}endif /*RTI_IOS*/
#end

#end
