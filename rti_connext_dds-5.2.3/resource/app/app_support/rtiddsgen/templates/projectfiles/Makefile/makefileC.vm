## $Id$
##
## (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
## No duplications, whole or partial, manual or electronic, may be made
## without prior written permission.  Any such copies, or
## revisions thereof, must display this notice unaltered.
## This code contains trade secrets of Real-Time Innovations, Inc.
##
## modification history:
## ---------------------
## 2.3,13may15,gpc Added setting of NDDSHOME if undefined in environment
## 2.2,9jun14,vmg created
##========================================================================
#[[######################################################################]]#
#[[#]]# makefile_${global.idlFileName}_${global.architectureName}
#[[#]]#
#[[#]]# (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
#[[#]]# No duplications, whole or partial, manual or electronic, may be made
#[[#]]# without express written permission.  Any such copies, or
#[[#]]# revisions thereof, must display this notice unaltered.
#[[#]]# This code contains trade secrets of Real-Time Innovations, Inc.
#[[#]]#
#[[#]]#
#[[#]]# This makefile was automatically generated by rtiddsgen.
#[[#]]#
#[[#]]# To compile, type:
#[[#]]# 	gmake -f makefile_${global.idlFileName}_${global.architectureName}
#[[#]]#
#[[#]]# Note: This makefile is only meant to build our example applications and
#[[#]]#       may require alterations to build on your system.
#[[#]]#
#[[#]]# This makefile assumes that your build environment is already correctly
#[[#]]# configured. (For example, the correct version of your compiler and
#[[#]]# linker should be on your PATH.)
#[[######################################################################]]#

#[[#]]# If undefined in the environment default NDDSHOME to install dir
ifndef NDDSHOME
NDDSHOME := "${global.nddsHome}"
endif

TARGET_ARCH = ${global.architectureName}

ifndef COMPILER
COMPILER = ${compiler}
endif
COMPILER_FLAGS =#foreach($compilerFlag in ${compilerFlags}) -$compilerFlag#end

ifndef LINKER
LINKER = ${linker}
endif
LINKER_FLAGS =#foreach($linkerFlag in ${linkerFlags}) -$linkerFlag#end

SYSLIBS =#foreach($syslib in ${syslibs}) -$syslib#end

DEFINES =#foreach($define in ${defines}) -$define#end #foreach($define in ${additionalDefines}) -$define#end



#if($envPrefix)#[[#]]#export ENV_PREFIX = ${envPrefix}#end

INCLUDES = -I.#foreach($headersDirectory in ${headerDirectories}) -I$headersDirectory#end #if($includes.size()>0)\ #end

       #foreach($include in ${includes}) -I$include#end

LIBS = -L#[[$]]#(NDDSHOME)/lib/#[[$]]#(TARGET_ARCH) \
       #foreach($coreLib in ${corelibs}) -l$coreLib#end #[[$]]#(SYSLIBS)

CDRSOURCES    = ${global.idlFileName}.idl
COMMONSOURCES =#foreach($sharedSource in ${sharedSources}) $sharedSource#end #foreach($s in ${additionalSourceFiles}) $s#end


EXEC          = ${global.idlFileName}_subscriber ${global.idlFileName}_publisher
DIRECTORIES   = objs.dir objs/#[[$]]#(TARGET_ARCH).dir
COMMONOBJS    = #[[$]]#(COMMONSOURCES:%${sourceFileExtension}=objs/#[[$]]#(TARGET_ARCH)/%.o)

#[[#]]# We actually stick the objects in a sub directory to keep your directory clean.
#[[$]]#(TARGET_ARCH) : #[[$]]#(DIRECTORIES) #[[$]]#(COMMONOBJS) \
	#[[$]]#(EXEC:%=objs/#[[$]]#(TARGET_ARCH)/%.o) \
	#[[$]]#(EXEC:%=objs/#[[$]]#(TARGET_ARCH)/%)

objs/#[[$]]#(TARGET_ARCH)/% : objs/#[[$]]#(TARGET_ARCH)/%.o
	#[[$]]#(LINKER) #[[$]]#(LINKER_FLAGS) ${compilerDebugFlag} ${linkerFlag} -o #[[$]]#@ #[[$]]#@.o #[[$]]#(COMMONOBJS) #[[$]]#(LIBS)

objs/#[[$]]#(TARGET_ARCH)/%.o : %${sourceFileExtension} #foreach($h in ${additionalHeaderFiles}) $h#end ${global.idlFileName}${headerFileExtension} 
	#[[$]]#(COMPILER) #[[$]]#(COMPILER_FLAGS) ${compilerDebugFlag} -o #[[$]]#@ #[[$]]#(DEFINES) #[[$]]#(INCLUDES) -c #[[$]]#<

#[[#]]#
#[[#]]# Uncomment these lines if you want the support files regenerated when idl
#[[#]]# file is modified
#[[#]]#
#[[#]]#
#[[#]]# #foreach($sharedSource in ${sharedSources}) $sharedSource#end \
#[[#]]# #foreach($sharedHeader in ${sharedHeaders}) $sharedHeader#end : \
#[[#]]#		${global.idlFileName}.idl
#[[#]]#	#[[$]]#(NDDSHOME)/bin/rtiddsgen ${global.idlFileName}.idl -replace -language ${global.language}

#[[#]]# Here is how we create those subdirectories automatically.
%.dir : 
	@echo "Checking directory #[[$]]#*"
	@if [ ! -d #[[$]]#* ]; then \
		echo "Making directory #[[$]]#*"; \
		mkdir -p #[[$]]#* ; \
	fi;

#if($isAndroid)
#parse("projectfiles/Makefile/specificAndroid.vm")
#end
