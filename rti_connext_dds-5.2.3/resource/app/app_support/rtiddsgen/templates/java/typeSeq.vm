##/* $Id$
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.

##modification history:
##--------------------- 
##10a,13jun13,ajm CODEGENII-109 joining the type variables in the constructMap 
##10a,10jun13,ajm CODEGENII-109 adding envMap and constructMapList variables
##10a,8mar13, ajm CODEGENII-30 and CODEGENII-87 Code reviews and Xtypes in Java
##10a,31oct12, ajm RTIDDSGEN-34 support for the first set of copy directives (java ones)
##10a,15oct12, ajm Support for the -noCopyable option
##10a,10oct12, ajm Upgrade to Bigpine.Formatting and commenting
##10a,11nov11, ajm Changing the name of the templates to camelCase
##10a,04nov11, ajm Refactoring code. Variable name changed
##10a,29ag11,jmt Fixing macros consistency by adding the missing parameters
##10a,09ag11,ajm Fixing tabulations and length of the lines
##10a,05ag11,jmt Modification of the history header (a comment missing)
##           ajm Fixing the bug for a struct without a module
##10a,04ag11,jmt Adding all the basic type and testing them
##10a,04ag11,jmt adding modification history header
##10a,02ag11,jmt Moved to be under the path "resource/templates/java/"
##10a,02ag11,jmt New dessing using auxiliary files for the macros
##10a,01ag11,jmt created 
##========================================================================*/*#
##-----------------------------------------------------------------
##               
##             Template for the Java Type Seq file
## 
##------------------------------------------------------------------
##------------------------------------------------------------------
## Variables names
##
## $constructMap.packageName : Name of the package where the file will be included
## $constructMap.name  : Name of the structure related with this file
## $seqName: Name of the main class. Also name of the file
/*
  WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.

  This file was generated from .idl using "rtiddsgen".
  The rtiddsgen tool is part of the RTI Connext distribution.
  For more information, type 'rtiddsgen -help' at a command shell
  or consult the RTI Connext manual.
*/
    
#if ($constructMap.packageName)  
package $constructMap.packageName;
#end
      
        

import java.util.Collection;

import com.rti.dds.infrastructure.Copyable;
import com.rti.dds.util.Enum;
import com.rti.dds.util.Sequence;
import com.rti.dds.util.LoanableSequence;

#foreach($element in $constructMap.directives)
$element.getValue()
#end

/**
 * A sequence of $constructMap.name instances.
 */
public final class $constructMap.typeSeqName extends LoanableSequence implements Copyable {
    // -----------------------------------------------------------------------
    // Package Fields
    // -----------------------------------------------------------------------

    /**
     * When a memory loan has been taken out in the lower layers of 
     * RTI Data Distribution Service, store a pointer to the native sequence here. 
     * That way, when we call finish(), we can give the memory back.
     */
    /*package*/ transient Sequence _loanedInfoSequence = null;

    // -----------------------------------------------------------------------
    // Public Fields
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    public ${constructMap.typeSeqName}() {
        super(${constructMap.name}.class);
    }


    public $constructMap.typeSeqName (int initialMaximum) {
        super(${constructMap.name}.class, initialMaximum);
    }


    public $constructMap.typeSeqName (Collection elements) {
        super(${constructMap.name}.class, elements);
    }
    

    // --- From Copyable: ----------------------------------------------------
    
    /**
     * Copy data into <code>this</code> object from another.
     * The result of this method is that both <code>this</code>
     * and <code>src</code> will be the same size and contain the
     * same data.
     * 
     * @param src The Object which contains the data to be copied
     * @return <code>this</code>
     * @exception NullPointerException If <code>src</code> is null.
     * @exception ClassCastException If <code>src</code> is not a 
     * <code>Sequence</code> OR if one of the objects contained in
     * the <code>Sequence</code> is not of the expected type.
     * @see com.rti.dds.infrastructure.Copyable${envMap.POUND_CHAR}copy_from(java.lang.Object)
     */
    public Object copy_from(Object src) {
        Sequence typedSrc = (Sequence) src;
        final int srcSize = typedSrc.size();
        final int origSize = size();
        
        // if this object's size is less than the source, ensure we have
        // enough room to store all of the objects
        if (getMaximum() < srcSize) {
            setMaximum(srcSize);
        }
        
        // trying to avoid clear() method here since it allocates memory
        // (an Iterator)
        // if the source object has fewer items than the current object,
        // remove from the end until the sizes are equal
        if (srcSize < origSize){
            removeRange(srcSize, origSize);
        }
        
        // copy the data from source into this (into positions that already
        // existed)
        for(int i = 0; (i < origSize) && (i < srcSize); i++){
            if (typedSrc.get(i) == null){
                set(i, null);
            } else {
                // check to see if our entry is null, if it is, a new instance has to be allocated
                if (get(i) == null){ 
                
                 #if($envMap.noCopyable)
                  set(i, ${constructMap.name}TypeSupport.get_instance().create_data());
                 #else
                    set(i, ${constructMap.name}.create());
                 #end   
                }
                set(i, ((Copyable) get(i)).copy_from(typedSrc.get(i)));
            }
        }
        
        // copy 'new' $constructMap.name objects (beyond the original size of this object)
        for(int i = origSize; i < srcSize; i++){
            if (typedSrc.get(i) == null) {
                add(null);
            } else {
                // NOTE: we need to create a new object here to hold the copy
                #if($envMap.noCopyable)
                 add(${constructMap.name}TypeSupport.get_instance().create_data());
                #else
                add(${constructMap.name}.create());
                #end
                // we need to do a set here since enums aren't truely Copyable
                set(i, ((Copyable) get(i)).copy_from(typedSrc.get(i)));
            }
        }
        
        return this;
    }

}


