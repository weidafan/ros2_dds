##/* $Id$
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.

##modification history:
##--------------------- 
##10a,13jun13,ajm CODEGENII-109 joining the type variables in the constructMap 
##10a,8mar13, ajm CODEGENII-30 and CODEGENII-87 Code reviews and Xtypes in Java
##10a,31oct12, ajm RTIDDSGEN-34 support for the first set of copy directives (java ones)
##10a,10oct12, ajm Upgrade to Bigpine.Formatting and commenting
##10a,04jan12, jmt Upgrade to LOLA
##10a,11nov11, ajm Changing the name of the templates to camelCase
##10a,04nov11, ajm Refactoring code. Variable name changed
##10a,21oct11,ajm Adding a return at the end of the file
##10a,01ag11,jmt created 
##10a,02ag11,jmt New dessing using auxiliary files for the macros
##10a,02ag11,jmt adding modification history header
##10a,04ag11,jmt Adding all the basic type and testing them
##10a,05ag11,jmt Modification of the history header (a comment missing)
##           ajm Fixing the bug for a struct without a module
##========================================================================*/*#
##-----------------------------------------------------------------
##               
##             Template for the Java Data Reader file
## 
##------------------------------------------------------------------
##------------------------------------------------------------------
## Variables names
##
## $constructMap.packageName : Name of the package where the file will be included
## $constructMap.name  : Name of the structure related with this file
## $constructMap.dataReaderName: Name of the main class. Also name of the file

/*
  WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.

  This file was generated from .idl using "rtiddsgen".
  The rtiddsgen tool is part of the RTI Connext distribution.
  For more information, type 'rtiddsgen -help' at a command shell
  or consult the RTI Connext manual.
*/

    
#if ($constructMap.packageName)  
package $constructMap.packageName;
#end
      
        
import com.rti.dds.infrastructure.InstanceHandle_t;
import com.rti.dds.subscription.DataReaderImpl;
import com.rti.dds.subscription.DataReaderListener;
import com.rti.dds.subscription.ReadCondition;
import com.rti.dds.subscription.SampleInfo;
import com.rti.dds.subscription.SampleInfoSeq;
import com.rti.dds.topic.TypeSupportImpl;

#foreach($element in $constructMap.directives)
$element.getValue()
#end

// ===========================================================================

/**
 * A reader for the $constructMap.name user type.
 */
public class $constructMap.dataReaderName extends DataReaderImpl {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public void read($constructMap.typeSeqName received_data, SampleInfoSeq info_seq,
             int max_samples,
             int sample_states, int view_states, int instance_states) {
        read_untyped(received_data, info_seq, max_samples, sample_states,
             view_states, instance_states);
    }


    public void take($constructMap.typeSeqName received_data, SampleInfoSeq info_seq,
             int max_samples,
             int sample_states, int view_states, int instance_states) {
        take_untyped(received_data, info_seq, max_samples, sample_states,
             view_states, instance_states);
    }


    public void read_w_condition($constructMap.typeSeqName received_data, 
                 SampleInfoSeq info_seq,
                 int max_samples,
                 ReadCondition condition) {
        read_w_condition_untyped(received_data, info_seq, max_samples,
                 condition);
    }


    public void take_w_condition($constructMap.typeSeqName received_data, 
                 SampleInfoSeq info_seq,
                 int max_samples,
                 ReadCondition condition) {
        take_w_condition_untyped(received_data, info_seq, max_samples,
                 condition);
    }


    public void read_next_sample($constructMap.name received_data, SampleInfo sample_info) {
        read_next_sample_untyped(received_data, sample_info);
    }


    public void take_next_sample($constructMap.name received_data, SampleInfo sample_info) {
        take_next_sample_untyped(received_data, sample_info);
    }


    public void read_instance($constructMap.typeSeqName received_data, SampleInfoSeq info_seq,
            int max_samples, InstanceHandle_t a_handle, int sample_states,
            int view_states, int instance_states) {

        read_instance_untyped(received_data, info_seq, max_samples, a_handle,
            sample_states, view_states, instance_states);
    }


    public void take_instance($constructMap.typeSeqName received_data, SampleInfoSeq info_seq,
            int max_samples, InstanceHandle_t a_handle, int sample_states,
            int view_states, int instance_states) {

        take_instance_untyped(received_data, info_seq, max_samples, a_handle,
            sample_states, view_states, instance_states);
    }


    public void read_instance_w_condition($constructMap.typeSeqName received_data,
            SampleInfoSeq info_seq, int max_samples,
            InstanceHandle_t a_handle, ReadCondition condition) {

        read_instance_w_condition_untyped(received_data, info_seq, 
            max_samples, a_handle, condition);
    }


    public void take_instance_w_condition($constructMap.typeSeqName received_data,
            SampleInfoSeq info_seq, int max_samples,
            InstanceHandle_t a_handle, ReadCondition condition) {

        take_instance_w_condition_untyped(received_data, info_seq, 
            max_samples, a_handle, condition);
    }
    
    
    public void read_next_instance($constructMap.typeSeqName received_data,
            SampleInfoSeq info_seq, int max_samples,
            InstanceHandle_t a_handle, int sample_states, int view_states,
            int instance_states) {

        read_next_instance_untyped(received_data, info_seq, max_samples,
            a_handle, sample_states, view_states, instance_states);
    }


    public void take_next_instance($constructMap.typeSeqName received_data,
            SampleInfoSeq info_seq, int max_samples,
            InstanceHandle_t a_handle, int sample_states, int view_states,
            int instance_states) {

        take_next_instance_untyped(received_data, info_seq, max_samples,
            a_handle, sample_states, view_states, instance_states);
    }


    public void read_next_instance_w_condition($constructMap.typeSeqName received_data,
            SampleInfoSeq info_seq, int max_samples,
            InstanceHandle_t a_handle, ReadCondition condition) {

        read_next_instance_w_condition_untyped(received_data, info_seq, 
            max_samples, a_handle, condition);
    }


    public void take_next_instance_w_condition($constructMap.typeSeqName received_data,
            SampleInfoSeq info_seq, int max_samples,
            InstanceHandle_t a_handle, ReadCondition condition) {

        take_next_instance_w_condition_untyped(received_data, info_seq, 
            max_samples, a_handle, condition);
    }


    public void return_loan($constructMap.typeSeqName received_data, SampleInfoSeq info_seq) {
        return_loan_untyped(received_data, info_seq);
    }


    public void get_key_value($constructMap.name key_holder, InstanceHandle_t handle){
        get_key_value_untyped(key_holder, handle);
    }


    public InstanceHandle_t lookup_instance($constructMap.name key_holder) {
        return lookup_instance_untyped(key_holder);
    }

    // -----------------------------------------------------------------------
    // Package Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    /*package*/  $constructMap.dataReaderName (long native_reader, DataReaderListener listener,
                              int mask, TypeSupportImpl data_type) {
        super(native_reader, listener, mask, data_type);
    }

}

