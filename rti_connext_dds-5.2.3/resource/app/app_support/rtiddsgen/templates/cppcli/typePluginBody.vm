##/* $Id$
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.
##
##modification history:
##---------------------
##2.0,24mar15, CODEGENII-433 Incorrect code generation for a mutable struct that inherits
## from a struct with key
##2.2.0,17nov14,ajm CODEGENII-234 Support for optional members
##2.2.0,18sep14,ajm CODEGENII-278 Unbounded string and sequences support in .Net
##2.2,28aug14,ajm CODEGENII-179 Support enums with duplicate values
##2.2,11may14,vmg CODEGENII-204 fixed generated code with keyed members and a copy declaration
##2.0,30oct13,ajm CODEGENII-147 removing warnings
##10a,28oct13,ajm CODEGENII-143 nddsgen1.0 fixes for CODEGEN-564 CODEGEN-494 CODEGEN-632
##2.0,21oct13,ajm CODEGENII-143 CODEGEN-494 and CODEGEN-626 .Net Bug fixes
##2.0,12sep13,ajm CODEGENII-143 and CODEGEN-567 
##           The TypePlugin get_size functions do not provide the right value for Mutable types
##2.0,12sep13,ajm CODEGENII-143 and CODEGEN-622 Enum as last field of a type
##10a,10jun13,ajm CODEGENII-109 adding envMap and constructMapList variables
##10a,02Apr13,ajm Adding support for XTypes in .Net
##10a,26mar13,ajm Bug fixing
##10a,26mar13,ajm Adding support for unions in .Net
##10a,25mar13,ajm Adding support for enums and inheritance 
##10a,19mar13,ajm Adding support for typedefs and const 
##10a,18mar13,ajm created 
##
##------------------------------------------------------------------
##
##             Template for the TypePluginBody CPP/CLI file
## 
##------------------------------------------------------------------
##------------------------------------------------------------------
##---------------------------------------------------------------------
/*
  WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.

  This file was generated from ${envMap.idlFileName}.idl using "rtiddsgen".
  The rtiddsgen tool is part of the RTI Connext distribution.
  For more information, type 'rtiddsgen -help' at a command shell
  or consult the RTI Connext manual.
*/


${envMap.POUND_CHAR}include "${envMap.idlFileName}Plugin.h"


${envMap.POUND_CHAR}pragma unmanaged
${envMap.POUND_CHAR}include "ndds/ndds_cpp.h"
${envMap.POUND_CHAR}include "osapi/osapi_utility.h"
${envMap.POUND_CHAR}pragma managed

using namespace System::Runtime::InteropServices;

#*--*##foreach($node in $constructMapList)
##if it is a directive we print its value
#*----*##if($node.constructKind=="directive") 
##we avoid to copy the declaration directives
#*------*##if($node.directiveKind=="copy-c"||$node.directiveKind=="copy") 
$node.value
#*------*##end
##if the module node is here is because its for c++ and namespace option
#*----*##elseif($node.constructKind=="module")
namespace $node.name {
##if the module node is here is because its for c++ and namespace option
#*----*##elseif($node.constructKind=="moduleClose") 
} /* namespace $node.name  */
#*----*##elseif($node.constructKind=="enum")
#************Start of Code for Enum********************************************#
/* ------------------------------------------------------------------------
   Enum Type: ${node.nativeFQNameInModule}
 * ------------------------------------------------------------------------ */

/* ------------------------------------------------------------------------
 * (De)Serialization Methods
 * ------------------------------------------------------------------------ */


Boolean
${node.nativeFQNameInModule}Plugin::serialize(
    TypePluginEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule} sample,
    CdrStream% stream, 
    Boolean serialize_encapsulation,
    UInt16 encapsulation_id,
    Boolean serialize_sample,
    Object^ endpoint_plugin_qos)
{
    CdrStreamPosition position;

    if (serialize_encapsulation) {
        if (!stream.serialize_and_set_cdr_encapsulation(encapsulation_id)) {
            return false;
        }

        position = stream.reset_alignment();

    }

    if (serialize_sample) {

        if (!stream.serialize_enum(sample)) {
            return false;
        }

    }


    if (serialize_encapsulation) {
        stream.restore_alignment(position);

    }

    return true;
}


Boolean 
${node.nativeFQNameInModule}Plugin::deserialize_sample(
    TypePluginEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule}% sample,
    CdrStream% stream, 
    Boolean deserialize_encapsulation,  
    Boolean deserialize_data, 
    Object^ endpoint_plugin_qos)
{
    CdrStreamPosition position;

    if (deserialize_encapsulation) {
        if (!stream.deserialize_and_set_cdr_encapsulation()) {
            return false;
        }


        position = stream.reset_alignment();

    }

    if (deserialize_data) {

        sample = stream.deserialize_enum<${node.nativeFQNameInModule}>();

    
    switch (sample){
#*--*##foreach($member in $node.memberFieldMapList)
#*-----*##if($member.directive)
#*-----*##copyDirectiveNoDeclaration($member)
#*-----*##elseif (!$member.duplicated)
    case $member.nativeFQName:
#*-----*##end
#*-----*##end
    {
    }  break;
    default:
        {
           throw gcnew Unassignable("invalid enumerator " + sample.ToString());
        } break;
    }
    
    }
    if(deserialize_encapsulation) {
        stream.restore_alignment(position);
    }


    return true;
}


Boolean
${node.nativeFQNameInModule}Plugin::skip(
    TypePluginEndpointData^ endpoint_data,
    CdrStream% stream, 
    Boolean skip_encapsulation,  
    Boolean skip_sample, 
    Object^ endpoint_plugin_qos)
{
    CdrStreamPosition position;

    if (skip_encapsulation) {
        if (!stream.skip_encapsulation()) {
            return false;
        }

        position = stream.reset_alignment();

    }
    if (skip_sample) {

        if (!stream.skip_enum()) {
            return false;
        }


    }


    if(skip_encapsulation) {
        stream.restore_alignment(position);
    }


    return true;
}


UInt32
${node.nativeFQNameInModule}Plugin::get_serialized_sample_max_size(
    TypePluginEndpointData^ endpoint_data,
    Boolean include_encapsulation,
    UInt16 encapsulation_id,
    UInt32 current_alignment)
{
    UInt32 initial_alignment = current_alignment;

    UInt32 encapsulation_size = current_alignment;


    if (include_encapsulation) {
        if (!CdrStream::valid_encapsulation_id(encapsulation_id)) {
            return 1;
        }


        encapsulation_size = CdrSizes::ENCAPSULATION->serialized_size(
            current_alignment);
        current_alignment = 0;
        initial_alignment = 0;

    }

    current_alignment += RTICdrType_getEnumMaxSizeSerialized(current_alignment);


    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }


    return current_alignment - initial_alignment;
}


UInt32
${node.nativeFQNameInModule}Plugin::get_serialized_sample_min_size(
    TypePluginEndpointData^ endpoint_data,
    Boolean include_encapsulation,
    UInt16 encapsulation_id,
    UInt32 current_alignment)
{
    UInt32 initial_alignment = current_alignment;

    UInt32 encapsulation_size = current_alignment;


    if (include_encapsulation) {
        if (!CdrStream::valid_encapsulation_id(encapsulation_id)) {
            return 1;
        }


        encapsulation_size = CdrSizes::ENCAPSULATION->serialized_size(
            current_alignment);
        current_alignment = 0;
        initial_alignment = 0;

    }

    current_alignment += RTICdrType_getEnumMaxSizeSerialized(current_alignment);


    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }


    return current_alignment - initial_alignment;
}


UInt32
${node.nativeFQNameInModule}Plugin::get_serialized_sample_size(
    TypePluginEndpointData^ endpoint_data,
    Boolean include_encapsulation,
    UInt16 encapsulation_id,
    UInt32 current_alignment,
    ${node.nativeFQNameInModule} sample) 
{
    UInt32 initial_alignment = current_alignment;

    UInt32 encapsulation_size = current_alignment;


    if (include_encapsulation) {
        if (!CdrStream::valid_encapsulation_id(encapsulation_id)) {
            return 1;
        }


        encapsulation_size = CdrSizes::ENCAPSULATION->serialized_size(
            current_alignment);
        current_alignment = 0;
        initial_alignment = 0;

    }

    current_alignment += RTICdrType_getEnumMaxSizeSerialized(current_alignment);


    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }


    return current_alignment - initial_alignment;
}

/* ------------------------------------------------------------------------
    Key Management functions:
 * ------------------------------------------------------------------------ */


Boolean
${node.nativeFQNameInModule}Plugin::serialize_key(
    TypePluginEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule} sample,
    CdrStream% stream,
    Boolean serialize_encapsulation,
    UInt16 encapsulation_id,
    Boolean serialize_key,
    Object^ endpoint_plugin_qos)
{
    return serialize(
            endpoint_data, sample, stream, serialize_encapsulation, 
            encapsulation_id, 
            serialize_key, endpoint_plugin_qos);
}


Boolean
${node.nativeFQNameInModule}Plugin::deserialize_key_sample(
    TypePluginEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule}% sample,
    CdrStream% stream,
    Boolean deserialize_encapsulation,
    Boolean deserialize_key,
    Object^ endpoint_plugin_qos)
{
    return deserialize_sample(
            endpoint_data, sample, stream, deserialize_encapsulation, 
            deserialize_key, endpoint_plugin_qos);
}


UInt32
${node.nativeFQNameInModule}Plugin::get_serialized_key_max_size(
    TypePluginEndpointData^ endpoint_data,
    Boolean include_encapsulation,
    UInt16 encapsulation_id,
    UInt32 current_alignment)
{
    UInt32 initial_alignment = current_alignment;

    current_alignment += get_serialized_sample_max_size(
        endpoint_data,include_encapsulation,
        encapsulation_id,current_alignment);

    return current_alignment - initial_alignment;
}


Boolean
${node.nativeFQNameInModule}Plugin::serialized_sample_to_key(
    TypePluginEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule}% sample,
    CdrStream% stream, 
    Boolean deserialize_encapsulation,  
    Boolean deserialize_key, 
    Object^ endpoint_plugin_qos)
{    
    return deserialize_sample(
            endpoint_data,
            sample,
            stream,
            deserialize_encapsulation, 
            deserialize_key,
            endpoint_plugin_qos);
}


/* ------------------------------------------------------------------------
   Support functions:
 * ------------------------------------------------------------------------ */


void
${node.nativeFQNameInModule}Plugin::print_data(
    ${node.nativeFQNameInModule} sample,
    String^ description,
    UInt32 indent_level)
{
    if (description != nullptr) {
        for (UInt32 i = 0; i < indent_level; ++i) { Console::Write("   "); }
        Console::WriteLine("{0}:", description);
    }

    RTICdrType_printEnum((RTICdrEnum*) &sample,
                         "${node.nativeFQNameInModule}", indent_level + 1);
}
/* ------------------------------------------------------------------------
 * Plug-in Lifecycle Methods
 * ------------------------------------------------------------------------ */

${node.nativeFQNameInModule}Plugin^
${node.nativeFQNameInModule}Plugin::get_instance() {
    if (_singleton == nullptr) {
        _singleton = gcnew ${node.nativeFQNameInModule}Plugin();
    }
    return _singleton;
}


void
${node.nativeFQNameInModule}Plugin::dispose() {
    delete _singleton;
    _singleton = nullptr;
}

#************End of Code for Enum**********************************************#
#*----*##elseif(($node.isAggregationType)
                 ||(($node.constructKind=="alias") 
                   && (($node.firstMember.typeKind.equals("user")&& !$node.firstMember.isEnum) 
                   ||($node.firstMember.dimensionList) 
                   || ($node.firstMember.seqSize)))) 


    
/* ------------------------------------------------------------------------
 *  Type ${node.nativeFQNameInModule}
 * ------------------------------------------------------------------------ */

/* ------------------------------------------------------------------------
    Support functions:
 * ------------------------------------------------------------------------ */

void 
${node.nativeFQNameInModule}Plugin::print_data(
        ${node.nativeFQNameInModule}^ sample,
        String^ desc,
        UInt32 indent_level) {

    for (UInt32 i = 0; i < indent_level; ++i) { Console::Write("   "); }

    if (desc != nullptr) {
        Console::WriteLine("{0}:", desc);
    } else {
        Console::WriteLine();
    }

    if (sample == nullptr) {
        Console::WriteLine("null");
        return;
    }

#*------*##if(${node.baseTypeFQName})
${node.baseTypeFQName}Plugin::get_instance()->print_data(sample, "", indent_level);
#*------*##end

#*------*##if($node.constructKind.equals("union"))
#*--------*##printMember($node.unionDiscriminatorMap)
    switch(sample->_d) {
#*------*##end

#*------*##print($node)
#*------*##if($node.constructKind.equals("union"))
       }
#*------*##end            
}


/* ------------------------------------------------------------------------
    (De)Serialize functions:
 * ------------------------------------------------------------------------ */

Boolean 
${node.nativeFQNameInModule}Plugin::serialize(
    TypePluginDefaultEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule}^ sample,
    CdrStream% stream,    
    Boolean serialize_encapsulation,
    UInt16 encapsulation_id,
    Boolean serialize_sample, 
    Object^ endpoint_plugin_qos)
{
    CdrStreamPosition position;

#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY")|| $node.hasOptionalMember) 
#*--------*##serializeHeaderMutable()
#*------*##end
    if (serialize_encapsulation) {
        /* Encapsulate sample */
#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY") || $node.hasOptionalMember)
#*--------*##serializeEncapsulationMutable()
#*------*##end
        
        if (!stream.serialize_and_set_cdr_encapsulation(encapsulation_id)) {
            return false;
        }


        position = stream.reset_alignment();

    }

    if (serialize_sample) {
#*------*##if(${node.baseTypeFQName})
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
        stream.skipListEndId = true;
#*--------*##end
        if (!${node.baseTypeFQName}Plugin::get_instance()->serialize(endpoint_data,sample, stream, false, encapsulation_id, true, endpoint_plugin_qos)) {
           return false;
        }
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
        stream.skipListEndId = false;
#*--------*##end        
#*------*##end

#*------*##if($node.constructKind.equals("union"))
#*--------*##serializeMember($node.unionDiscriminatorMap "" $node)
        switch(sample->_d) {
#*------*##end

#*------*##serialize($node)
#*------*##if($node.constructKind.equals("union"))
        } 
#*------*##end

#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
#*--------*##serializeEndMutable()
#*------*##end
    }


    if(serialize_encapsulation) {
        stream.restore_alignment(position);
    }


    return true;
}


Boolean 
${node.nativeFQNameInModule}Plugin::deserialize_sample(
    TypePluginDefaultEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule}^ sample,
    CdrStream% stream,   
    Boolean deserialize_encapsulation,
    Boolean deserialize_data, 
    Object^ endpoint_plugin_qos)
{
    CdrStreamPosition position;

#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
    UInt32 memberId = 0;
    UInt32 length = 0;
    Boolean end = false;
#*------*##end     
 
    if(deserialize_encapsulation) {
        /* Deserialize encapsulation */
        if (!stream.deserialize_and_set_cdr_encapsulation()) {
            return false;
        }


        position = stream.reset_alignment();

    }
    
  
    if (deserialize_data) {
#*------*##if((($node.extensibility.equals("MUTABLE_EXTENSIBILITY")) 
                  || ($node.extensibility.equals("EXTENSIBLE_EXTENSIBILITY")))                   
              && (!$node.constructKind.equals("union")))
    sample->clear();                
#*------*##end 
#*------*##if(${node.baseTypeFQName})

#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
    {
        CdrStreamPosition begin = stream.get_current_position();
#*--------*##end
        if (!${node.baseTypeFQName}Plugin::get_instance()->deserialize_sample(
                endpoint_data,sample, stream, false, true, endpoint_plugin_qos)) {
            return false;
        }
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
       stream.set_current_position(begin);
   } 
#*--------*##end    
#*------*##end


#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))   
#*--------*##deserializeMutableType($node "deserialize_sample")

#*------*##else    
         
#*--------*##if(($node.constructKind=="valueType" || $node.constructKind=="struct")
                && $node.extensibility.equals("EXTENSIBLE_EXTENSIBILITY"))              
        try{
#*--------*##end

#*--------*##if($node.constructKind.equals("union"))
#*----------*##deserializeMember($node.unionDiscriminatorMap "deserialize_sample")
            switch(sample->_d) {
#*--------*##end

#*--------*##deserialize($node "deserialize_sample")
#*--------*##if($node.constructKind.equals("union"))
             }
#*--------*##end

#*--------*##if(($node.constructKind=="valueType" || $node.constructKind=="struct") 
                && $node.extensibility.equals("EXTENSIBLE_EXTENSIBILITY"))              
        } catch (System::ApplicationException^  e) {
            if (stream.get_remainder() >= RTI_CDR_PARAMETER_HEADER_ALIGNMENT) {
                throw gcnew System::ApplicationException("Error deserializing sample! Remainder: " + stream.get_remainder() + "\n" +
                                                              "Exception caused by: " + e->Message);
            }
        }
#*--------*##end
#*------*##end
    }


    if(deserialize_encapsulation) {
        stream.restore_alignment(position);
    }


    return true;
}


Boolean
${node.nativeFQNameInModule}Plugin::skip(
    TypePluginDefaultEndpointData^ endpoint_data,
    CdrStream% stream,   
    Boolean skip_encapsulation,
    Boolean skip_sample, 
    Object^ endpoint_plugin_qos)
{
    CdrStreamPosition position;
    
#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
    UInt32 memberId = 0;
    UInt32 length = 0;
    Boolean end = false;
#*------*##end     

    if (skip_encapsulation) {
        if (!stream.skip_encapsulation()) {
            return false;
        }

        position = stream.reset_alignment();

    }

    if (skip_sample) {
#*------*##if(${node.baseTypeFQName})
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
      {
        CdrStreamPosition begin = stream.get_current_position();
#*--------*##end    
        if (!${node.baseTypeFQName}Plugin::get_instance()->skip(endpoint_data, stream,false, true, endpoint_plugin_qos)) {
            return false;
        }
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
        stream.set_current_position(begin);
      } 
#*--------*##end        
#*------*##end
#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))   
#*--------*##skipMutableType($node)
#*------*##else  
#*--------*##skip($node)
#*------*##end 
      }

    if(skip_encapsulation) {
        stream.restore_alignment(position);
    }


    return true;
}

/*
  size is the offset from the point where we have do a logical reset
  Return difference in size, not the final offset.
*/
UInt32 
${node.nativeFQNameInModule}Plugin::get_serialized_sample_max_size(
    TypePluginDefaultEndpointData^ endpoint_data,
    Boolean include_encapsulation,
    UInt16 encapsulation_id,
    UInt32 current_alignment)
{
#*------*##if($node.hasUnboundedMember && $envMap.unboundedSupport)
throw gcnew System::OverflowException();
#*------*##else

#*--------*##if($node.constructKind.equals("union"))
    UInt32 union_max_size_serialized = 0;
#*--------*##end
    UInt32 initial_alignment = current_alignment;

    UInt32 encapsulation_size = current_alignment;


    if (include_encapsulation) {
        if (!CdrStream::valid_encapsulation_id(encapsulation_id)) {
            return 1;
        }


        encapsulation_size = CdrSizes::ENCAPSULATION->serialized_size(
            current_alignment);
        encapsulation_size -= current_alignment;
        current_alignment = 0;
        initial_alignment = 0;

    }

#*--------*##if(${node.baseTypeFQName})
    current_alignment += ${node.baseTypeFQName}Plugin::get_instance()->get_serialized_sample_max_size(endpoint_data,false,encapsulation_id,current_alignment);
#*--------*##end 

#*--------*##if($node.constructKind.equals("union"))
#*----------*##alignmentMaxSizeUnion($node)
#*--------*##else
#*----------*##alignmentMaxSize($node)
#*--------*##end
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
// Sentinel
#*----------*##if($node.constructKind.equals("union"))
    union_max_size_serialized += RTICdrStream_getExtendedParameterHeaderMaxSizeSerialized(union_max_size_serialized);
#*--------*##else
    current_alignment += RTICdrStream_getExtendedParameterHeaderMaxSizeSerialized(current_alignment);
#*----------*##end 
#*--------*##end                                        
                                        
    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }

    return #if($node.constructKind=="union")union_max_size_serialized +#*
------------*##end current_alignment - initial_alignment;
#*--------*##end 
}


UInt32
${node.nativeFQNameInModule}Plugin::get_serialized_sample_min_size(
    TypePluginDefaultEndpointData^ endpoint_data,
    Boolean include_encapsulation,
    UInt16 encapsulation_id,
    UInt32 current_alignment)
{

#*------*##if($node.constructKind.equals("union"))
    UInt32 union_min_size_serialized = 0xffffffff;
#*------*##end
    UInt32 initial_alignment = current_alignment;

    UInt32 encapsulation_size = current_alignment;


    if (include_encapsulation) {
        if (!CdrStream::valid_encapsulation_id(encapsulation_id)) {
            return 1;
        }


        encapsulation_size = CdrSizes::ENCAPSULATION->serialized_size(
            encapsulation_size);
        current_alignment = 0;
        initial_alignment = 0;

    }

#*------*##if(${node.baseTypeFQName})
    current_alignment += ${node.baseTypeFQName}Plugin::get_instance()->get_serialized_sample_min_size(endpoint_data,false,encapsulation_id,current_alignment);
#*------*##end 

#*------*##if($node.constructKind.equals("union"))
#*--------*##alignmentMinSizeUnion($node)
#*------*##else
#*--------*##alignmentMinSize($node)
#*------*##end    
        
#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
// Sentinel
#*--------*##if($node.constructKind.equals("union"))
    union_min_size_serialized += RTICdrStream_getParameterHeaderMaxSizeSerialized(union_min_size_serialized);
#*--------*##else
    current_alignment += RTICdrStream_getParameterHeaderMaxSizeSerialized(current_alignment);
#*--------*##end     
#*------*##end            
    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }

    return #if($node.constructKind=="union")union_min_size_serialized +#*
----------*##end current_alignment - initial_alignment;
}


UInt32 
${node.nativeFQNameInModule}Plugin::get_serialized_sample_size(
    TypePluginDefaultEndpointData^ endpoint_data,
    Boolean include_encapsulation,
    UInt16 encapsulation_id,
    UInt32 current_alignment,
    ${node.nativeFQNameInModule}^ sample)
{

    UInt32 initial_alignment = current_alignment;

    UInt32 encapsulation_size = current_alignment;


    if (include_encapsulation) {
        if (!CdrStream::valid_encapsulation_id(encapsulation_id)) {
            return 1;
        }


        encapsulation_size = CdrSizes::ENCAPSULATION->serialized_size(
            current_alignment);
        encapsulation_size -= current_alignment;
        current_alignment = 0;
        initial_alignment = 0;

    }

#*------*##if(${node.baseTypeFQName})
    current_alignment += ${node.baseTypeFQName}Plugin::get_instance()->get_serialized_sample_size(endpoint_data,false,encapsulation_id,current_alignment,sample);
#*------*##end

#*------*##if($node.constructKind.equals("union"))
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
          current_alignment += RTICdrStream_getParameterHeaderMaxSizeSerialized(current_alignment);
#*--------*##end          
#*--------*##alignmentSampleMember($node.unionDiscriminatorMap)
    switch(sample->_d) {
#*------*##end
#*------*##alignmentSample($node)
#*------*##if($node.constructKind.equals("union"))
    }
#*------*##end          
#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
    // Sentinel
    current_alignment += RTICdrStream_getParameterHeaderMaxSizeSerialized(current_alignment);
#*------*##end             
    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }

    return current_alignment - initial_alignment;
}


UInt32
${node.nativeFQNameInModule}Plugin::get_serialized_key_max_size(
    TypePluginDefaultEndpointData^ endpoint_data,
    Boolean include_encapsulation,
    UInt16 encapsulation_id,
    UInt32 current_alignment)
{

#*------*##if($node.hasUnboundedKeyMember && $envMap.unboundedSupport)
throw gcnew System::OverflowException();
#*------*##else
    UInt32 encapsulation_size = current_alignment;


    UInt32 initial_alignment = current_alignment;

    if (include_encapsulation) {
        if (!CdrStream::valid_encapsulation_id(encapsulation_id)) {
            return 1;
        }


        encapsulation_size = CdrSizes::ENCAPSULATION->serialized_size(
            current_alignment);
        current_alignment = 0;
        initial_alignment = 0;

    }
        
#*--------*##if($node.hasKeyBaseType)  
    current_alignment += ${node.baseTypeFQName}Plugin::get_instance()->get_serialized_key_max_size(
        endpoint_data,
        false, encapsulation_id, 
        current_alignment);
#*--------*##end

#*----------*##alignmentMaxSizeKey($node)

#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
// Sentinel
    current_alignment += RTICdrStream_getExtendedParameterHeaderMaxSizeSerialized(current_alignment);
    
#*--------*##end     
    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }

    return current_alignment - initial_alignment;
   
#*------*##end    
}

/* ------------------------------------------------------------------------
    Key Management functions:
 * ------------------------------------------------------------------------ */

Boolean 
${node.nativeFQNameInModule}Plugin::serialize_key(
    TypePluginDefaultEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule}^ sample,
    CdrStream% stream,    
    Boolean serialize_encapsulation,
    UInt16 encapsulation_id,
    Boolean serialize_key,
    Object^ endpoint_plugin_qos)
{


    CdrStreamPosition position;

#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY") && ($node.hasKeyBaseType || $node.hasKey)) 
#*--------*##serializeHeaderMutable()
#*------*##end
    
    if (serialize_encapsulation) {
        /* Encapsulate sample */
#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY")) 
#*--------*##serializeEncapsulationMutable()
#*------*##end


        if (!stream.serialize_and_set_cdr_encapsulation(encapsulation_id)) {
            return false;
        }


        position = stream.reset_alignment();

    }

    if (serialize_key) {
#*------*##if($node.hasKeyBaseType)  
      if (!${node.baseTypeFQName}Plugin::get_instance()->serialize_key(
            endpoint_data,sample, stream, false, encapsulation_id, true, endpoint_plugin_qos)) {
            return false;
      }
#*------*##end
#*--------*##serializeKey($node)
    
#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY") && ($node.hasKeyBaseType || $node.hasKey)) 
#*--------*##serializeEndMutable()
#*------*##end
    
    }

 
    if(serialize_encapsulation) {
        stream.restore_alignment(position);
    }


    return true;
   
}


Boolean ${node.nativeFQNameInModule}Plugin::deserialize_key_sample(
    TypePluginDefaultEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule}^ sample,
    CdrStream% stream, 
    Boolean deserialize_encapsulation,
    Boolean deserialize_key,
    Object^ endpoint_plugin_qos)
{

    CdrStreamPosition position;

    if (deserialize_encapsulation) {
        /* Deserialize encapsulation */
        if (!stream.deserialize_and_set_cdr_encapsulation()) {
            return false;  
        }


        position = stream.reset_alignment();

    }

    if (deserialize_key) {



#*------*##if($node.hasKeyBaseType) 
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
     {
            CdrStreamPosition begin = stream.get_current_position(); 
#*--------*##end       
      if (!${node.baseTypeFQName}Plugin::get_instance()->deserialize_key_sample(
                endpoint_data, sample, stream, deserialize_encapsulation, deserialize_key, endpoint_plugin_qos)) {
            return false;
        }
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
        stream.set_current_position(begin);
     }
#*--------*##end        
#*------*##end        

#*------*##deserializeKey($node)
    
    }


    if(deserialize_encapsulation) {
        stream.restore_alignment(position);
    }


    return true;
    
}


Boolean
${node.nativeFQNameInModule}Plugin::serialized_sample_to_key(
    TypePluginDefaultEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule}^ sample,
    CdrStream% stream, 
    Boolean deserialize_encapsulation,  
    Boolean deserialize_key, 
    Object^ endpoint_plugin_qos)
{

    CdrStreamPosition position;
    
#*------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY") && !$node.constructKind.equals("union"))
    UInt32 memberId = 0;
    UInt32 length = 0;
    Boolean end = false;
#*------*##end
    
    if(deserialize_encapsulation) {
        if (!stream.deserialize_and_set_cdr_encapsulation()) {
            return false;
        }

        position = stream.reset_alignment();

    }

    if (deserialize_key) {
#*------*##if($node.hasKeyBaseType || ($node.hasKey && $node.baseTypeFQName))
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
     {
            CdrStreamPosition begin = stream.get_current_position(); 
#*--------*##end   
     
#*----------*##if(${node.hasKeyBaseType})
         if (!${node.baseTypeFQName}Plugin::get_instance()->serialized_sample_to_key(
                        endpoint_data,
                        sample,
                        stream,
                        false, 
                        true,
                        endpoint_plugin_qos)) {
                    return false;

        }    
#*----------*##elseif($node.hasKey && $node.baseTypeFQName) 
        if (!${node.baseTypeFQName}Plugin::get_instance()->skip(endpoint_data, stream,
            false, true,
            endpoint_plugin_qos)) {
            return false;
        }
#*--------*##end
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
           stream.set_current_position(begin);
      }
#*--------*##end  
#*--------*##end  


#*--------*##deserializeKeyAndSkip($node)

    }


    if(deserialize_encapsulation) {
        stream.restore_alignment(position);
    }


    return true;
  
}
#*------*##if($node.hasKey || $node.hasKeyBaseType)
Boolean 
${node.nativeFQNameInModule}Plugin::instance_to_key(
    TypePluginDefaultEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule}^ dst, 
    ${node.nativeFQNameInModule}^ src)
{

#*--------*##if(${node.hasKeyBaseType})
    if (!${node.baseTypeFQName}Plugin::get_instance()->instance_to_key(endpoint_data,dst,src)) {
        return false;
    }
#*--------*##end    
#*--------*##foreach($member in $node.memberFieldMapList)
#*----------*##if($member.isKey)
#*------------*##copyMember($member)
#*----------*##end
#*--------*##end
            
    return true;
}

Boolean 
${node.nativeFQNameInModule}Plugin::key_to_instance(
    TypePluginDefaultEndpointData^ endpoint_data,
    ${node.nativeFQNameInModule}^ dst,
    ${node.nativeFQNameInModule}^ src)
{

#*--------*##if(${node.hasKeyBaseType})
    if (!${node.baseTypeFQName}Plugin::get_instance()->key_to_instance(endpoint_data,dst,src)) {
        return false;
    }
#*--------*##end  
#*--------*##foreach($member in $node.memberFieldMapList)
#*----------*##if($member.isKey)
#*------------*##copyMember($member)
#*----------*##end
#*--------*##end            
    return true;
}


Boolean 
${node.nativeFQNameInModule}Plugin::serialized_sample_to_key_hash(
    TypePluginDefaultEndpointData^ endpoint_data,
    CdrStream% stream, 
    KeyHash_t% key_hash,
    Boolean deserialize_encapsulation,
    Object^ endpoint_plugin_qos) 
{   
    CdrStreamPosition position;

#*------*##if($node.extensibility=="MUTABLE_EXTENSIBILITY")
    UInt32 memberId = 0;
    UInt32 length = 0;
    Boolean end = false;
#*------*##end


    if(deserialize_encapsulation) {
        if (!stream.deserialize_and_set_cdr_encapsulation()) {
            return false;
        }

        position = stream.reset_alignment();
    }

    
    GCHandle sample_handle = GCHandle::FromIntPtr(IntPtr(const_cast<void*>(endpoint_data->get_temp_sample())));
    ${node.nativeFQNameInModule}^ sample = static_cast<${node.nativeFQNameInModule}^>(sample_handle.Target);
    if (sample == nullptr) {
        return false;
    }

#*------*##if($node.hasKeyBaseType || ($node.hasKey && $node.baseTypeFQName))
#*--------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
     {
            CdrStreamPosition begin = stream.get_current_position(); 
#*--------*##end   
     
#*--------*##if($node.hasKeyBaseType)
    if (!${node.baseTypeFQName}Plugin::get_instance()->serialized_sample_to_key(
            endpoint_data, sample, stream, false, true, endpoint_plugin_qos)) {
            return false;
    }     
#*--------*##elseif($node.hasKey && $node.baseTypeFQName)
    if (!${node.baseTypeFQName}Plugin::get_instance()->skip(
            endpoint_data,
            stream, 
            false, true, 
            endpoint_plugin_qos)) {
        return false;
    }
#*----------*##end 
#*----------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
        stream.set_current_position(begin);
    } 
#*--------*##end   
        
#*------*##end
   
#*--------*##if($node.hasKey || $node.hasKeyBaseType)
#*----------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
#*--------------*##mutableTypeStartDesBlock()
#*----------*##end
#*----------*##set($keysFound=0)
#*----------*##foreach($member in $node.memberFieldMapList)
#*------------*##if($member.directive)
#*--------------*##copyDirectiveNoDeclaration ($member)
#*------------*##else
#*--------------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY") &&($keysFound!=$node.hasKey))
#*------------*##set($needSwitch=1)
            case $member.id:
#*------------*##end 
#*------------*##if($member.isKey)
#*--------------*##deserializeMember($member "serialized_sample_to_key")
#*--------------*##set($keysFound=$keysFound+1)
#*--------------*##if($needSwitch==1)
                  break;
#*--------------*##end   
#*------------*##elseif($node.hasKey && ($keysFound<$node.hasKey))
#*----------------*##skipMember($member)            
#*--------------*##if($needSwitch==1)
                  break;
#*--------------*##end
#*--------------*##end
#*------------*##end##member.directive
#*----------*##end##foreach
#*--------*##end##node.hasKey



#*----------*##if($node.extensibility.equals("MUTABLE_EXTENSIBILITY"))
#*-------------*##mutableTypeEndDesBlock($node)
#*----------*##end
#*------------*##set($needSwitch=0)
            
    if(deserialize_encapsulation) {
        stream.restore_alignment(position);
    }


    if (!instance_to_key_hash(
            endpoint_data, key_hash, sample)) {
        return false;
    }

    return true;
}

#*------*##end


/* ------------------------------------------------------------------------
 * Plug-in Lifecycle Methods
 * ------------------------------------------------------------------------ */

${node.nativeFQNameInModule}Plugin^
${node.nativeFQNameInModule}Plugin::get_instance() {
    if (_singleton == nullptr) {
        _singleton = gcnew ${node.nativeFQNameInModule}Plugin();
    }
    return _singleton;
}


void
${node.nativeFQNameInModule}Plugin::dispose() {
    delete _singleton;
    _singleton = nullptr;
}

#*----*##end
#*--*##end