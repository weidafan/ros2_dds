###############################################################################
##         (c) Copyright, Real-Time Innovations, All rights reserved.        ##
##                                                                           ##
##         Permission to modify and use for internal purposes granted.       ##
## This software is provided "as is", without warranty, express or implied.  ##
##                                                                           ##
###############################################################################

# This Makefile contains the common rules to build for all the architectures.
# It is included from the architecture-specific Makefile.
# This Makefile requires the following variables:
# - ARCH: Architecture to build (for example i86Linux2.6gcc4.1.1)
#
# Optional variables:
# - DEBUG: If set to '1', it turns on debugging information
# - SHAREDLIB: If set to '1', shared libraries will be used
# - CXX: compiler name.
# - CXXFLAGS: compiler flags: will be appended to $CXX command-line
# - CXXLD: linker name.
# - CXXLDFLAGS: linker flags: will be inserted at the beginning of CXXLD cmdline
# - SYSLIBS: additional system libraries to append to the CXXLD command-line

###############################################################################
# Ensure this Makefile is invoked with the right variable set
###############################################################################
ifeq ($(ARCH), )
all:
	@echo "***************************************************************"
	@echo "You cannot use this Makefile directly, instead use the"
	@echo "architecture-specific Makefile. For example:"
	@echo "         gmake -f make/Makefile.i86Linux2.6gcc4.1.1"
	@echo "***************************************************************"
	@false
else
###############################################################################
# Ensure $NDDSHOME is defined
###############################################################################
ifeq ($(NDDSHOME), )
all:
	@echo "***************************************************************"
	@echo "The environment variable 'NDDSHOME' is not set!"
	@echo "To use this makefile you need to set NDDSHOME to the directory"
	@echo "where you have RTI Connext installed."
	@echo "***************************************************************"
	@false
endif
endif


# Define the sources and NDDS search path
INCLUDES = -Isrc -I$(NDDSHOME)/include -I$(NDDSHOME)/include/ndds $(VX_INCLUDES)

###############################################################################
# Modify build flags for debug/release
###############################################################################
ifeq ($(DEBUG),1)
CXXFLAGS += -g -O0
ifeq ($(SHAREDLIB),1)
NDDSLIBS = -lrtidlcppd -lrtidlcd -lnddscppd -lnddscd -lnddscored
else
NDDSLIBS = -lrtidlcppzd -lrtidlczd -lnddscppzd -lnddsczd -lnddscorezd
endif
else
CXXFLAGS += -O2 
ifeq ($(SHAREDLIB),1)
NDDSLIBS = -lrtidlcpp -lrtidlc -lnddscpp -lnddsc -lnddscore
else
NDDSLIBS = -lrtidlcppz -lrtidlcz -lnddscppz -lnddscz -lnddscorez
endif
endif

ifeq ($(VX_SHAREDLIB),1)
ifneq ($(findstring rtp,$(ARCH)),)
LIBS = -L$(NDDSHOME)/lib/$(ARCH) -non-static $(NDDSLIBS) $(SYSLIBS)
else
LIBS = $(SYSLIBS)
endif
else
LIBS = -L$(NDDSHOME)/lib/$(ARCH) $(NDDSLIBS) $(SYSLIBS)
endif


SOURCES = src/Hello.cxx                 

HEADERS = src/Hello.h                   

DIRECTORIES   = objs.dir objs/$(ARCH).dir
EXECUTABLE    = Hello
SOURCES_NODIR = $(notdir $(SOURCES))
OBJECTS       = $(SOURCES_NODIR:%.cxx=objs/$(ARCH)/%.o)


###############################################################################
# Build Rules
###############################################################################
ifneq ($(findstring rtp,$(ARCH)),)
  $(ARCH): $(DIRECTORIES) $(OBJECTS) $(EXECUTABLE:%=objs/$(ARCH)/%.o) \
	$(EXECUTABLE:%=objs/$(ARCH)/%.vxe)

  objs/$(ARCH)/%.vxe: objs/$(ARCH)/%.o
	$(CXXLD) $(CXXLDFLAGS) $(OPTS) -o $@ $(OBJECTS) $(LIBS)
else
  ifneq ($(findstring Vx,$(ARCH)),)
    $(ARCH): $(DIRECTORIES) $(OBJECTS) $(EXECUTABLE:%=objs/$(ARCH)/%.o) \
	$(EXECUTABLE:%=objs/$(ARCH)/%.so)

    objs/$(ARCH)/%.so: objs/$(ARCH)/%.o
	$(CXXLD) $(CXXLDFLAGS) $(OPTS) -o $@ $(OBJECTS) $(LIBS)
  else
      $(ARCH): $(DIRECTORIES) $(OBJECTS) $(EXECUTABLE:%=objs/$(ARCH)/%.o) \
	$(EXECUTABLE:%=objs/$(ARCH)/%)

    objs/$(ARCH)/%: objs/$(ARCH)/%.o
	$(CXXLD) $(CXXLDFLAGS) $(OPTS) -o $@ $(OBJECTS) $(LIBS)
  endif
endif
  objs/$(ARCH)/%.o: src/%.cxx $(HEADERS)
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

# Here is how we create those subdirectories automatically.
%.dir : 
	@echo "Checking directory $*"
	@if [ ! -d $* ]; then \
		echo "Making directory $*"; \
		mkdir -p $* ; \
	fi;
