// ****************************************************************************
//         (c) Copyright, Real-Time Innovations, All rights reserved.
//
//         Permission to modify and use for internal purposes granted.
// This software is provided "as is", without warranty, express or implied.
//
// ****************************************************************************

package com.rti.routingservice.adapter.jms;

import java.util.List;
import java.util.Properties;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageProducer;
import com.rti.dds.dynamicdata.DynamicData;
import com.rti.dds.subscription.SampleInfo;
import com.rti.routingservice.adapter.StreamWriter;
import com.rti.routingservice.adapter.infrastructure.AdapterException;

/**
 * The JMSAdapterStreamWriter class implements the StreamWriter interface to
 * create a JMS MessageProducer to receive DDS Samples, translate them to JMS
 * Messages, and send them to the JMS middleware.
 *
 * Because a DynamicData Sample received by this StreamWriter was sent from a
 * DynamicData Producer and already received by a DynamicData Consumer (for
 * example, a DDS Publisher and a DDS Subscriber), and this StreamWriter sends
 * the Sample translated to the configured JMS Destination; any StreamReader
 * receiving JMS Messages from that same JMS Destination will translate the
 * JMS Message back again to a DynamicData Sample and send it to its
 * configured DynamicData Destination and received by a DynamicData Consumer
 * for that Destination (for example, a DDS Topic and a DDS Subscriber), the
 * DynamicData Consumer (in this case, the DDS Subscriber) will receive the
 * sample twice: one from the DynamicData Producer and one more from the
 * StreamReader receiving an "echo" of the translated Sample generated by this
 * StreamWriter. To avoid receiving the "echo" Sample in the DynamicData
 * Consumers, this StreamWriter sends its JMS Messages with a JMS Property
 * with the name specified in
 * JMSAdapter.GENERATED_BY_JMS_ADAPTER_ROUTING_GROUP, with the value set to
 * the Routing Group Name configured for the Connection that contains this
 * StreamWriter. When a StreamReader receives a JMS Message, it checks if the
 * Message contains the JMS Property named
 * JMSAdapter.GENERATED_BY_JMS_ADAPTER_ROUTING_GROUP. If the JMS Property is
 * found, its value is compared to the Routing Group Name configured for the
 * Connection that contains the StreamReader. If the names are the same, that
 * is, the StreamWriter and StreamReader belong to the same Routing Group in a
 * Connection, the JMS Message is discarded by the StreamReader; and the
 * "echo" Message is not translated and sent again to DynamicData Destination.
 *
 * The Translation class used in this StreamWriter can be configured in the
 * Routing Service configuration file, in the Property section of this
 * StreamWriter's output configuration section with the name
 * DynamicDataJMSTranslator. The Translation class must implement the
 * com.rti.routingservice.adapter.jms.DynamicDataToJMSMessageTranslation interface.
 */
public class JMSAdapterStreamWriter implements StreamWriter {
    /**
     * The JMSAdapterStreamWriterErrors enum contains error codes and their
     * description. It also creates new AdapterException exceptions to be
     * thrown with the error code, description, and cause. This enum class
     * can't be instantiated. Use its methods only through the enum values.
     */
    private enum JMSAdapterStreamWriterErrors {
        // JMSAdapterStreamWriterErrors enumeration values
        ERROR_CREATING_TRANSLATION_INSTANCE
            ("Could not create Translation class instance for StreamWriter"),
        ERROR_ON_SAMPLE_SIZE_TO_WRITE
            ("Data and Information DynamicData List sizes do not match. " +
             "Cannot translate incomplete DynamicData samples to send JMS " +
             "Message messages in StreamWriter."),
        ERROR_TRANSLATING_DYNAMICDATA_SAMPLE
            ("Error translating DynamicData to JMS Message in StreamWriter"),
        ERROR_WRITING_COULD_NOT_SEND_JMS_MESSAGE
            ("Error in StreamWriter while sending translated JMS Message"),
        REMOTE_ADMINISTRATION_NOT_SUPPORTED
            ("Remote Administration not supported in JMSAdapter. Modify " +
             "source code to support it.");

        /** Error Message */
        private final String _errorMessage;

        /**
         * Constructor. Assign enumeration field.
         *
         * @param message   Error message.
         */
        private JMSAdapterStreamWriterErrors(String message) {
            this._errorMessage = message;
        }

        /**
         * This method returns a new AdapterException with this instance's error
         * information.
         *
         * @returns An AdapterException with the error information
         */
        private AdapterException createAdapterException() {
            return new AdapterException(this.ordinal(), this._errorMessage);
        }

        /**
         * This method returns a new AdapterException with this instance's error
         * information and the information of the Throwable that caused it.
         *
         * @param originalException The Throwable that caused the error.
         *
         * @returns An AdapterException with the error information
         */
        private AdapterException createAdapterException(
                                                Throwable originalException) {
            return new AdapterException(this.ordinal(), this._errorMessage +
                                        " (caused by " +
                                        originalException.getMessage() + ")",
                                        originalException);
        }
    }

    /** Property Name that defines the class to use to translate messages */
    private static final String DYNAMICDATA_TO_JMS_TRANSLATOR_CLASS_ELEMENT =
                                                   "DynamicDataJMSTranslator";
    /** Default translation interface implementation class */
    private static final String DEFAULT_DYNAMICDATA_TO_JMS_TRANSLATOR_CLASS =
           "com.rti.routingservice.adapter.jms.JMSAdapterDynamicDataToJMSTranslation";
    /** StreamWriter's connection routing service group name */
    private final String _streamWriterRoutingGroupName;
    /** StreamWriter's properties */
    private final Properties _streamWriterProperties;
    /** StreamWriter's DynamicData to JMS translator */
    private final DynamicDataToJMSMessageTranslation
                                        _streamWriterJMSDynamicDataTranslator;
    /** JMS MessageProducer */
    private final MessageProducer _jmsProducer;
    /** StreamWriter's JMS Message Factory */
    private final JMSAdapterMessageFactory _streamWriterJMSMessageFactory;

    /**
     * Constructor. Attempts to create a new JMS MessageProducer.
     *
     * @param jmsProducer       StreamWriter's JMS Message Producer
     * @param routingGroupName  The Routing Group Name of the Connection that
     *                          contains this StreamWriter.
     * @param messageFactory    StreamWriter's JMS Message Factory.
     * @param properties        StreamWriter's properties.
     *
     * @throws AdapterException If the StreamWriter could not be created.
     */
    JMSAdapterStreamWriter(MessageProducer jmsProducer,
                           String routingGroupName,
                           JMSAdapterMessageFactory messageFactory,
                           Properties properties) throws AdapterException {
        // Assign JMS Message Producer, Routing Group Name, and Message
        // Factory
        _jmsProducer = jmsProducer;
        _streamWriterRoutingGroupName = routingGroupName;
        _streamWriterJMSMessageFactory = messageFactory;

        // Create local copies of parameters so we don't depend on them
        _streamWriterProperties = new Properties();
        _streamWriterProperties.putAll(properties);

        // Create a Translator instance. Check if it was configured.
        String translatorClassName = _streamWriterProperties.getProperty(
                                 DYNAMICDATA_TO_JMS_TRANSLATOR_CLASS_ELEMENT);

        // Translator not configured?
        if (translatorClassName == null) {
            // Use default translator implementation
            translatorClassName = DEFAULT_DYNAMICDATA_TO_JMS_TRANSLATOR_CLASS;
        }

        try {
            // Load and instantiate translation class
            _streamWriterJMSDynamicDataTranslator =
                                          (DynamicDataToJMSMessageTranslation)
                                            Class.forName(translatorClassName,
                                                          true,
                                                          ClassLoader.
                                                      getSystemClassLoader()).
                                                                newInstance();
        } catch (Exception translatorException) {
            // Notify failure
            throw JMSAdapterStreamWriterErrors.
                                          ERROR_CREATING_TRANSLATION_INSTANCE.
                                  createAdapterException(translatorException);
        }
    }

    /**
     * This method is invoked by the Routing Service to send data in this
     * StreamWriter.
     *
     * @param sampleList        List of samples.
     * @param infoList          List of sample infos.
     *
     * @throws AdapterException	If data couldn't be sent.
     *
     */
    public int write(List<Object> sampleList, List<Object> infoList)
                                                     throws AdapterException {
        // Is the same number of sample data and sample information?
        if (sampleList.size() != infoList.size()) {
            // Notify failure
            throw JMSAdapterStreamWriterErrors.ERROR_ON_SAMPLE_SIZE_TO_WRITE.
                                                     createAdapterException();
        }

        // Translate all DynamicData samples and send them as JMS Messages
        int samplesSent = 0;

        for (int numberOfSamples = sampleList.size();
             samplesSent < numberOfSamples;
             samplesSent++) {
            // Translate DynamicData sample to JMS Message
            Message jmsMessage = null;

            try {
                jmsMessage = _streamWriterJMSDynamicDataTranslator.
                                             translateDynamicDataToJMSMessage(
                                               _streamWriterJMSMessageFactory,
                                    (DynamicData) sampleList.get(samplesSent),
                                      (SampleInfo) infoList.get(samplesSent));

                // Indicate that this message was generated by a JMSAdapter
                // StreamWriter in its Routing Group
                jmsMessage.setStringProperty(
                            JMSAdapter.GENERATED_BY_JMS_ADAPTER_ROUTING_GROUP,
                                             _streamWriterRoutingGroupName);
            } catch (Exception translationException) {
                // Notify failure
                throw JMSAdapterStreamWriterErrors.
                                         ERROR_TRANSLATING_DYNAMICDATA_SAMPLE.
                                 createAdapterException(translationException);
            }

            // Send JMS Message
            try {
                _jmsProducer.send(jmsMessage);
            } catch (JMSException jmsException) {
                // Notify failure
                throw JMSAdapterStreamWriterErrors.
                                     ERROR_WRITING_COULD_NOT_SEND_JMS_MESSAGE.
                                         createAdapterException(jmsException);
            }
        }

        // Return number of samples sent
        return samplesSent;
    }

    /**
     * This method is invoked by the Routing Service to set new properties to
     * this object. This is a result of remote administration.
     *
     * @param properties        New properties.
     *
     * @throws AdapterException If the properties couldn't be changed.
     *
     */
    public void update(Properties properties) throws AdapterException {
        // Remote Administration not supported in this implementation
        throw JMSAdapterStreamWriterErrors.
                                          REMOTE_ADMINISTRATION_NOT_SUPPORTED.
                                                     createAdapterException();
    }

    /**
     * This method attempts to release the existing JMS MessageProducer.
     *
     * @throws JMSException If a StreamWriter could not be released.
     */
    void close() throws JMSException {
        try {
            // Close MessageConsumer
            _jmsProducer.close();
        } finally {
            // Release its properties
            _streamWriterProperties.clear();
        }
    }
}
