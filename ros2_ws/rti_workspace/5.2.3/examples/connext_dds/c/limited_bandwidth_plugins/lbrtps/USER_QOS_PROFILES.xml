<?xml version="1.0"?>
<!-- 
(c) Copyright, Real-Time Innovations, 2012-2016.
All rights reserved.
No duplications, whole or partial, manual or electronic, may be made
without express written permission.  Any such copies, or
revisions thereof, must display this notice unaltered.
This code contains trade secrets of Real-Time Innovations, Inc.

Description
XML QoS Profile for HelloWorld

The QoS configuration of the DDS entities in the generated example is 
loaded from this file.

This file is used only when it is in the current working directory
or when the enviroment variable
NDDS_QOS_PROFILES is defined and points to this file.

For more information about XML QoS Profiles see Chapter 15 in the 
RTI Data Distribution Service user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/5.2.3/rti_dds_qos_profiles.xsd"
    version="5.2.3">
    <!-- QoS Library containing the QoS profile used in the generated example.

    A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="HelloWorld_Library">

        <!-- QoS profile used to configure reliable communication between the DataWriter 
        and DataReader created in the example code.

        A QoS profile groups a set of related QoS.
        -->
        <qos_profile name="HelloWorld_Profile">
            <!-- QoS used to configure the data writer created in the example code -->                
            <participant_qos>
                <!-- Deactivate all built-in transports -->
                <transport_builtin>
                    <mask>MASK_NONE</mask>
                </transport_builtin>
                <property>
                    <value>
                        <element>
                            <name>dds.transport.load_plugins</name>
                            <value>dds.transport.lbrtps</value>
                        </element>
                        <element>
                            <name>dds.transport.lbrtps.library</name>
                            <value>rtilbrtps</value>
                        </element>
                        <element>
                            <name>dds.transport.lbrtps.create_function</name>
                            <value>LBRTPS_Transport_create_plugin</value>
                        </element>
                        <element>
                            <name>dds.transport.lbrtps.aliases</name>
                            <value>lbrtps.udpv4</value>
                        </element>
                        <element>
                            <name>dds.transport.lbrtps.subtransport</name>
                            <value>UDPv4</value>
                        </element>
                        <element>
                            <name>dds.transport.lbrtps.UDPv4.multicast_enabled</name>
                            <value>1</value>
                        </element>
                        <!-- The rtps_header.protocol ("RTPS") is eliminated-->
                        <element>
                            <name>dds.transport.lbrtps.rtps_header.eliminate_protocol</name>
                            <value>true</value>
                        </element>
                        <!-- The rtps_header.version (2.1) is eliminated-->
                        <element>
                            <name>dds.transport.lbrtps.rtps_header.eliminate_version</name>
                            <value>true</value>
                        </element>
                        <!-- The rtps_header.vendorId (11) is eliminated-->
                        <element>
                            <name>dds.transport.lbrtps.rtps_header.eliminate_vendorId</name>
                            <value>true</value>
                        </element>
                        <!-- The rtps_header.guidPrefix is reduced. The publisher and the subscriber
                        applications must be run over in the same machine. hostId (first value) is set
                        to 0, then  the participant.rtps_hostId value must set to 1.
                        
                        Each application has a participant. Publisher's participant will use the identifier 1 (01),
                        and the subscriber's participant will be use the identifier 2 (10). It's necessary two bytes.
                        Then the participantId (second value) is set to 2.

                        Each application creates the participant once. Then the participant.instanceId could be
                        set to 1 and the instanceId (third value) is set to 0.

                        Two bits are necessary, then the LBRTPS transport plug-in reduces the rtps_header.guidPrefix to one byte-->
                        <element>
                            <name>dds.transport.lbrtps.rtps_header.reduce_guidPrefix</name>
                            <value>0,2,0</value>
                        </element>
                        <!-- submessage_header.submessageId and submessage_header.flags are combined-->
                        <element>
                            <name>dds.transport.lbrtps.submessage_header.combine_submessageId_with_flags</name>
                            <value>true</value>
                        </element>
                        <!-- Each application has one entity. Publisher application has a writer and subscriber
                        application has a reader. Minimum values in this property is 8,8. These values permits 3 bits to writers
                        and 3 bits to readers. This is enough. The writer identifier will be set to 1 and the reader identifier
                        will be set to 1.-->
                        <element>
                            <name>dds.transport.lbrtps.submessages.reduce_entitiesId</name>
                            <value>8,8</value>
                        </element>
                        <!-- Reduce the submessages.sequenceNumber of RTPS packages to 32 bits instead of 64 bits.-->
                        <element>
                            <name>dds.transport.lbrtps.submessages.reduce_sequenceNumber</name>
                            <value>32</value>
                        </element>
						<element>
                            <name>dds.transport.lbrtps.verbosity</name>
                            <value>0</value>
						</element>
                </value>
            </property>
        </participant_qos>
    </qos_profile>
    <qos_profile name="HelloWorld_Profile_Publisher" base_name="HelloWorld_Profile">
            <participant_qos>
                <wire_protocol>
                    <!-- The rtps_header.guidPrefix is reduced to 0,1, 0-->
                    <rtps_host_id>1</rtps_host_id>
                    <rtps_app_id>1</rtps_app_id>
                    <rtps_instance_id>1</rtps_instance_id>
                </wire_protocol>
            </participant_qos>
            <datawriter_qos>
                <protocol>
                    <rtps_object_id>1</rtps_object_id>
                </protocol>
            </datawriter_qos>
    </qos_profile>
    <qos_profile name="HelloWorld_Profile_Subscriber" base_name="HelloWorld_Profile">
            <participant_qos>
                <wire_protocol>
                    <rtps_host_id>1</rtps_host_id>
                    <rtps_app_id>2</rtps_app_id>
                    <rtps_instance_id>1</rtps_instance_id>
                </wire_protocol>
            </participant_qos>
            <datareader_qos>
                <protocol>
                    <rtps_object_id>1</rtps_object_id>
                </protocol>
            </datareader_qos>
    </qos_profile>
</qos_library>
</dds>
