###############################################################################
##         (c) Copyright, Real-Time Innovations, All rights reserved.        ##
##                                                                           ##
##         Permission to modify and use for internal purposes granted.       ##
## This software is provided "as is", without warranty, express or implied.  ##
##                                                                           ##
###############################################################################

# This Makefile contains the common rules to build for all the architectures.
# It is included from the architecture-specific Makefile.
# This Makefile requires the following variables:
# - ARCH: Architecture to build (for example i86Linux2.6gcc4.1.1)
#
# Optional variables:
# - DEBUG: If set to '1', it turns on debugging information
# - SHAREDLIB: If set to '1', shared libraries will be used
# - CXX: compiler name.
# - CXXFLAGS: compiler flags: will be appended to $CXX command-line
# - CXXLD: linker name.
# - CXXLDFLAGS: linker flags: will be inserted at the beginning of CXXLD cmdline
# - SYSLIBS: additional system libraries to append to the CXXLD command-line

###############################################################################
# Ensure this Makefile is invoked with the right variable set
###############################################################################
ifeq ($(ARCH), )
all:
	@echo "***************************************************************"
	@echo "You cannot use this Makefile directly, instead use the"
	@echo "architecture-specific Makefile. For example:"
	@echo "         gmake -f make/Makefile.i86Linux2.6gcc4.1.1"
	@echo "***************************************************************"
	@false
else
###############################################################################
# Ensure $NDDSHOME is defined
###############################################################################
ifeq ($(NDDSHOME), )
all:
	@echo "***************************************************************"
	@echo "The environment variable 'NDDSHOME' is not set!"
	@echo "To use this makefile you need to set NDDSHOME to the directory"
	@echo "where you have RTI Connext installed."
	@echo "***************************************************************"
	@false
endif
endif

# Define the sources and NDDS search path
INCLUDES = -I$(NDDSHOME)/include -I$(NDDSHOME)/include/ndds

###############################################################################
# Modify build flags for debug/release
###############################################################################
ifeq ($(DEBUG),1)
CXXFLAGS += -g -O0
ifeq ($(SHAREDLIB),1)
NDDSLIBS = -lnddscppd -lnddscd -lnddscored
else
NDDSLIBS = -lnddscppzd -lnddsczd -lnddscorezd
endif
else
CXXFLAGS += -O2
ifeq ($(SHAREDLIB),1)
NDDSLIBS = -lnddscpp -lnddsc -lnddscore
else
NDDSLIBS = -lnddscppz -lnddscz -lnddscorez
endif
endif

LIBS = -L$(NDDSHOME)/lib/$(ARCH) $(NDDSLIBS) $(SYSLIBS)

EXEC          = HelloWorld_publisher HelloWorld_subscriber
DIRECTORIES   = objs.dir objs/$(ARCH).dir


###############################################################################
# Build Rules
###############################################################################

# We actually stick the objects in a sub directory to keep your directory clean.
$(ARCH) : $(DIRECTORIES) \
	       $(EXEC:%=objs/$(ARCH)/%.o) \
	       $(EXEC:%=objs/$(ARCH)/%.out)

objs/$(ARCH)/%.out : objs/$(ARCH)/%.o 
	$(CXXLD) $(CXXLDFLAGS) -o $(@:%.out=%) $(@:%.out=%.o)  $(LIBS)

objs/$(ARCH)/%.o : %.cxx
	$(CXXLD) $(CXXLDFLAGS) -o $@ $(CXXFLAGS) $(INCLUDES) -c $<


# Here is how we create those subdirectories automatically.
%.dir : 
	@echo "Checking directory $*"
	@if [ ! -d $* ]; then \
		echo "Making directory $*"; \
		mkdir -p $* ; \
	fi;

###############################################################################
# Clean target: removes the objs dir
###############################################################################
clean:
	@rm -Rf objs/$(ARCH)
	@echo "Successfully deleted object and executable files for architecture $(ARCH)"
	@echo "To delete ALL the architectures and any generated file use target 'veryclean'"

veryclean:
	@rm -Rf objs
	@echo "Deleted all executables, objects and generated files"
