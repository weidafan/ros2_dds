###############################################################################
##         (c) Copyright, Real-Time Innovations, All rights reserved.        ##
##                                                                           ##
##         Permission to modify and use for internal purposes granted.       ##
## This software is provided "as is", without warranty, express or implied.  ##
##                                                                           ##
###############################################################################

# This Makefile contains the common rules to build for all the architectures.
# It is included from the architecture-specific Makefile.
# This Makefile requires the following variables:
# - ARCH: Architecture to build (for example i86Linux2.6gcc4.1.1)
#
# Optional variables:
# - DEBUG: If set to '1', it turns on debugging information
# - SHAREDLIB: If set to '1', shared libraries will be used
# - CXX: compiler name.
# - CXXFLAGS: compiler flags: will be appended to $CXX command-line
# - VX_INCLUDES: additional include files to append to the $CXX command line
# - CXXLD: linker name.
# - CXXLDFLAGS: linker flags: will be inserted at the beginning of CXXLD cmdline
# - SYSLIBS: additional system libraries to append to the CXXLD command-line

###############################################################################
# Ensure this Makefile is invoked with the right variable set
###############################################################################


ifeq ($(ARCH), )
all:
	@echo "***************************************************************"
	@echo "You cannot use this Makefile directly, instead use the"
	@echo "architecture-specific Makefile. For example:"
	@echo "         gmake -f make/Makefile.i86Linux2.6gcc4.1.1"
	@echo "***************************************************************"
	@false
else
###############################################################################
# Ensure $NDDSHOME is defined
###############################################################################
ifeq ($(NDDSHOME), )
all:
	@echo "***************************************************************"
	@echo "The environment variable 'NDDSHOME' is not set!"
	@echo "To use this makefile you need to set NDDSHOME to the directory"
	@echo "where you have RTI Connext installed."
	@echo "***************************************************************"
	@false
endif
endif

# Define the sources and NDDS search path
INCLUDES = -Isrc -Isrc/idl -I$(NDDSHOME)/include -I$(NDDSHOME)/include/ndds $(VX_INCLUDES)

###############################################################################
# Modify build flags for debug/release
###############################################################################
ifeq ($(DEBUG),1)
 CXXFLAGS += -g -O0
 ifeq ($(SHAREDLIB),1)
  ifneq ($(findstring rtp,$(ARCH)),)
   NDDSLIBS = -lrticonnextmsgcppd -lnddscppd -lnddscd -lnddscored
  else
   ifneq ($(findstring Vx,$(ARCH)),)
    NDDSLIBS = -l:librticonnextmsgcppd.lo -l:libnddscppd.so -l:libnddscd.so -l:libnddscored.so
   else
    NDDSLIBS = -lrticonnextmsgcppd -lnddscppd -lnddscd -lnddscored
   endif
  endif
 else
  NDDSLIBS = -lrticonnextmsgcppzd -lnddscppzd -lnddsczd -lnddscorezd
 endif
else
 ### RELEASE ###
 CXXFLAGS += -O2
 ifeq ($(SHAREDLIB),1)
  ### DYNAMIC ###
  ifneq ($(findstring rtp,$(ARCH)),)
   NDDSLIBS = -lrticonnextmsgcpp -lnddscpp -lnddsc -lnddscore
  else
   ifneq ($(findstring Vx,$(ARCH)),)
    NDDSLIBS = -l:librticonnextmsgcpp.lo -l:libnddscpp.so -l:libnddsc.so -l:libnddscore.so
   else
    NDDSLIBS = -lrticonnextmsgcpp -lnddscpp -lnddsc -lnddscore
   endif
  endif
 else
  NDDSLIBS = -lrticonnextmsgcppz -lnddscppz -lnddscz -lnddscorez
 endif
endif

ifeq ($(VX_SHAREDLIB),1)
ifneq ($(findstring rtp,$(ARCH)),)
LIBS = -L$(NDDSHOME)/lib/$(ARCH) -non-static $(NDDSLIBS) $(SYSLIBS)
else
LIBS = $(SYSLIBS)
endif
else
LIBS = -L$(NDDSHOME)/lib/$(ARCH) $(NDDSLIBS) $(SYSLIBS)
endif


SOURCES = 

SOURCES_IDL = src/idl/Primes.cxx      \
          src/idl/PrimesPlugin.cxx    \
          src/idl/PrimesSupport.cxx

HEADERS = 

HEADERS_IDL = src/idl/Primes.h      \
          src/idl/PrimesPlugin.h    \
          src/idl/PrimesSupport.h

DIRECTORIES   = objs.dir objs/$(ARCH).dir
EXECUTABLE    = PrimeNumberRequester PrimeNumberReplier
SOURCES_NODIR = $(notdir $(SOURCES)) $(notdir $(SOURCES_IDL))
OBJECTS       = $(SOURCES_NODIR:%.cxx=objs/$(ARCH)/%.o)


###############################################################################
# Build Rules
###############################################################################
ifneq ($(findstring rtp,$(ARCH)),)
  $(ARCH): $(DIRECTORIES) $(OBJECTS) \
         $(foreach exec, $(EXECUTABLE),objs/$(ARCH)/$(exec).o) \
         $(foreach exec, $(EXECUTABLE),objs/$(ARCH)/$(exec).vxe)

  objs/$(ARCH)/%.vxe: objs/$(ARCH)/%.o
	  $(CXXLD) $(CXXLDFLAGS) -o $(@:%.vxe=%) $(OBJECTS) $(@:%.vxe=%.o) $(LIBS)

else
  ifneq ($(findstring Vx,$(ARCH)),)
  $(ARCH): $(DIRECTORIES) $(OBJECTS) \
         $(foreach exec, $(EXECUTABLE),objs/$(ARCH)/$(exec).o) \
         $(foreach exec, $(EXECUTABLE),objs/$(ARCH)/$(exec).lo) \

  objs/$(ARCH)/%.lo:
	  $(CXXLD)  $(OPTS) -o $(@:%.lo=%.tmp.lo) $(@:%.lo=%.o) $(OBJECTS) $(LIBS)
	  $(NM) $(@:%.lo=%).tmp.lo | $(MUNCH) > $(@:%.lo=%.o)_ctordtor.c
	  $(CXX) -fdollars-in-identifiers -c $(CXXFLAGS) $(@:%.lo=%.o)_ctordtor.c \
	      -o $(@:%.lo=%.o)_ctordtor.o
	  $(CXXLD)  $(OPTS) -nostdlib $(MUNCHFLAGS) -o $@ $(@:%.lo=%.tmp.lo) $(@:%.lo=%.o)_ctordtor.o

  else
  $(ARCH): $(DIRECTORIES) $(OBJECTS) \
         $(foreach exec, $(EXECUTABLE),objs/$(ARCH)/$(exec).o) \
         $(foreach exec, $(EXECUTABLE),objs/$(ARCH)/$(exec).out)

  objs/$(ARCH)/%.out: objs/$(ARCH)/%.o 
	  $(CXXLD) $(CXXLDFLAGS) -o $(@:%.out=%) $(OBJECTS) $(@:%.out=%.o) $(LIBS)
  endif
endif

objs/$(ARCH)/Primes.o: src/idl/Primes.cxx $(HEADERS_IDL)
	$(CXX)  $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

objs/$(ARCH)/PrimesPlugin.o: src/idl/PrimesPlugin.cxx $(HEADERS_IDL)
	$(CXX)  $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

objs/$(ARCH)/PrimesSupport.o: src/idl/PrimesSupport.cxx $(HEADERS_IDL)
	$(CXX)  $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

objs/$(ARCH)/%.o: src/%.cxx $(HEADERS) $(HEADERS_IDL)
	$(CXX)  $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<


# Rule to rebuild the generated files when the .idl file change
$(SOURCES_IDL) $(HEADERS_IDL): src/Primes.idl
	@mkdir -p src/idl
ifeq ($(OS_ARCH), i86Win32)
	call $(NDDSHOME)/bin/rtiddsgen.bat -d src/idl src/Primes.idl -replace -language C++
else
	$(NDDSHOME)/bin/rtiddsgen -d src/idl src/Primes.idl -replace -language C++
endif

generate: $(SOURCES_IDL) $(HEADERS_IDL)

# Here is how we create those subdirectories automatically.
%.dir : 
	@echo "Checking directory $*"
	@if [ ! -d $* ]; then \
		echo "Making directory $*"; \
		mkdir -p $* ; \
	fi;

###############################################################################
# Clean target: removes the objs dir
###############################################################################
clean:
	@rm -Rf objs/$(ARCH)
	@echo "Successfully deleted object and executable files for architecture $(ARCH)"
	@echo "To delete ALL the architectures and any generated file use target 'veryclean'"

veryclean:
	@rm -Rf objs
	@rm -Rf src/idl
	@echo "Deleted all executables, objects and generated files"
