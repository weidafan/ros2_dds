// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/proto/kalman_local_trajectory_builder_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fkalman_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fkalman_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/kalman_filter/proto/pose_tracker_options.pb.h"
#include "cartographer/mapping_2d/scan_matching/proto/real_time_correlative_scan_matcher_options.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_3d {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fkalman_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2fkalman_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2fkalman_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();

class KalmanLocalTrajectoryBuilderOptions;

// ===================================================================

class KalmanLocalTrajectoryBuilderOptions : public ::google::protobuf::Message {
 public:
  KalmanLocalTrajectoryBuilderOptions();
  virtual ~KalmanLocalTrajectoryBuilderOptions();

  KalmanLocalTrajectoryBuilderOptions(const KalmanLocalTrajectoryBuilderOptions& from);

  inline KalmanLocalTrajectoryBuilderOptions& operator=(const KalmanLocalTrajectoryBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KalmanLocalTrajectoryBuilderOptions& default_instance();

  void Swap(KalmanLocalTrajectoryBuilderOptions* other);

  // implements Message ----------------------------------------------

  KalmanLocalTrajectoryBuilderOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KalmanLocalTrajectoryBuilderOptions& from);
  void MergeFrom(const KalmanLocalTrajectoryBuilderOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_online_correlative_scan_matching = 1;
  inline bool has_use_online_correlative_scan_matching() const;
  inline void clear_use_online_correlative_scan_matching();
  static const int kUseOnlineCorrelativeScanMatchingFieldNumber = 1;
  inline bool use_online_correlative_scan_matching() const;
  inline void set_use_online_correlative_scan_matching(bool value);

  // optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 2;
  inline bool has_real_time_correlative_scan_matcher_options() const;
  inline void clear_real_time_correlative_scan_matcher_options();
  static const int kRealTimeCorrelativeScanMatcherOptionsFieldNumber = 2;
  inline const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& real_time_correlative_scan_matcher_options() const;
  inline ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* mutable_real_time_correlative_scan_matcher_options();
  inline ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* release_real_time_correlative_scan_matcher_options();
  inline void set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options);

  // optional .cartographer.kalman_filter.proto.PoseTrackerOptions pose_tracker_options = 3;
  inline bool has_pose_tracker_options() const;
  inline void clear_pose_tracker_options();
  static const int kPoseTrackerOptionsFieldNumber = 3;
  inline const ::cartographer::kalman_filter::proto::PoseTrackerOptions& pose_tracker_options() const;
  inline ::cartographer::kalman_filter::proto::PoseTrackerOptions* mutable_pose_tracker_options();
  inline ::cartographer::kalman_filter::proto::PoseTrackerOptions* release_pose_tracker_options();
  inline void set_allocated_pose_tracker_options(::cartographer::kalman_filter::proto::PoseTrackerOptions* pose_tracker_options);

  // optional double scan_matcher_variance = 6;
  inline bool has_scan_matcher_variance() const;
  inline void clear_scan_matcher_variance();
  static const int kScanMatcherVarianceFieldNumber = 6;
  inline double scan_matcher_variance() const;
  inline void set_scan_matcher_variance(double value);

  // optional double odometer_translational_variance = 4;
  inline bool has_odometer_translational_variance() const;
  inline void clear_odometer_translational_variance();
  static const int kOdometerTranslationalVarianceFieldNumber = 4;
  inline double odometer_translational_variance() const;
  inline void set_odometer_translational_variance(double value);

  // optional double odometer_rotational_variance = 5;
  inline bool has_odometer_rotational_variance() const;
  inline void clear_odometer_rotational_variance();
  static const int kOdometerRotationalVarianceFieldNumber = 5;
  inline double odometer_rotational_variance() const;
  inline void set_odometer_rotational_variance(double value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions)
 private:
  inline void set_has_use_online_correlative_scan_matching();
  inline void clear_has_use_online_correlative_scan_matching();
  inline void set_has_real_time_correlative_scan_matcher_options();
  inline void clear_has_real_time_correlative_scan_matcher_options();
  inline void set_has_pose_tracker_options();
  inline void clear_has_pose_tracker_options();
  inline void set_has_scan_matcher_variance();
  inline void clear_has_scan_matcher_variance();
  inline void set_has_odometer_translational_variance();
  inline void clear_has_odometer_translational_variance();
  inline void set_has_odometer_rotational_variance();
  inline void clear_has_odometer_rotational_variance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options_;
  ::cartographer::kalman_filter::proto::PoseTrackerOptions* pose_tracker_options_;
  double scan_matcher_variance_;
  double odometer_translational_variance_;
  double odometer_rotational_variance_;
  bool use_online_correlative_scan_matching_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fkalman_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2fkalman_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2fkalman_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static KalmanLocalTrajectoryBuilderOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// KalmanLocalTrajectoryBuilderOptions

// optional bool use_online_correlative_scan_matching = 1;
inline bool KalmanLocalTrajectoryBuilderOptions::has_use_online_correlative_scan_matching() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_has_use_online_correlative_scan_matching() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_has_use_online_correlative_scan_matching() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_use_online_correlative_scan_matching() {
  use_online_correlative_scan_matching_ = false;
  clear_has_use_online_correlative_scan_matching();
}
inline bool KalmanLocalTrajectoryBuilderOptions::use_online_correlative_scan_matching() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.use_online_correlative_scan_matching)
  return use_online_correlative_scan_matching_;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_use_online_correlative_scan_matching(bool value) {
  set_has_use_online_correlative_scan_matching();
  use_online_correlative_scan_matching_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.use_online_correlative_scan_matching)
}

// optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 2;
inline bool KalmanLocalTrajectoryBuilderOptions::has_real_time_correlative_scan_matcher_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_has_real_time_correlative_scan_matcher_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_has_real_time_correlative_scan_matcher_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_real_time_correlative_scan_matcher_options() {
  if (real_time_correlative_scan_matcher_options_ != NULL) real_time_correlative_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::Clear();
  clear_has_real_time_correlative_scan_matcher_options();
}
inline const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& KalmanLocalTrajectoryBuilderOptions::real_time_correlative_scan_matcher_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  return real_time_correlative_scan_matcher_options_ != NULL ? *real_time_correlative_scan_matcher_options_ : *default_instance_->real_time_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* KalmanLocalTrajectoryBuilderOptions::mutable_real_time_correlative_scan_matcher_options() {
  set_has_real_time_correlative_scan_matcher_options();
  if (real_time_correlative_scan_matcher_options_ == NULL) real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions;
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  return real_time_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* KalmanLocalTrajectoryBuilderOptions::release_real_time_correlative_scan_matcher_options() {
  clear_has_real_time_correlative_scan_matcher_options();
  ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* temp = real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
  return temp;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options) {
  delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = real_time_correlative_scan_matcher_options;
  if (real_time_correlative_scan_matcher_options) {
    set_has_real_time_correlative_scan_matcher_options();
  } else {
    clear_has_real_time_correlative_scan_matcher_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
}

// optional .cartographer.kalman_filter.proto.PoseTrackerOptions pose_tracker_options = 3;
inline bool KalmanLocalTrajectoryBuilderOptions::has_pose_tracker_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_has_pose_tracker_options() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_has_pose_tracker_options() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_pose_tracker_options() {
  if (pose_tracker_options_ != NULL) pose_tracker_options_->::cartographer::kalman_filter::proto::PoseTrackerOptions::Clear();
  clear_has_pose_tracker_options();
}
inline const ::cartographer::kalman_filter::proto::PoseTrackerOptions& KalmanLocalTrajectoryBuilderOptions::pose_tracker_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.pose_tracker_options)
  return pose_tracker_options_ != NULL ? *pose_tracker_options_ : *default_instance_->pose_tracker_options_;
}
inline ::cartographer::kalman_filter::proto::PoseTrackerOptions* KalmanLocalTrajectoryBuilderOptions::mutable_pose_tracker_options() {
  set_has_pose_tracker_options();
  if (pose_tracker_options_ == NULL) pose_tracker_options_ = new ::cartographer::kalman_filter::proto::PoseTrackerOptions;
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.pose_tracker_options)
  return pose_tracker_options_;
}
inline ::cartographer::kalman_filter::proto::PoseTrackerOptions* KalmanLocalTrajectoryBuilderOptions::release_pose_tracker_options() {
  clear_has_pose_tracker_options();
  ::cartographer::kalman_filter::proto::PoseTrackerOptions* temp = pose_tracker_options_;
  pose_tracker_options_ = NULL;
  return temp;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_allocated_pose_tracker_options(::cartographer::kalman_filter::proto::PoseTrackerOptions* pose_tracker_options) {
  delete pose_tracker_options_;
  pose_tracker_options_ = pose_tracker_options;
  if (pose_tracker_options) {
    set_has_pose_tracker_options();
  } else {
    clear_has_pose_tracker_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.pose_tracker_options)
}

// optional double scan_matcher_variance = 6;
inline bool KalmanLocalTrajectoryBuilderOptions::has_scan_matcher_variance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_has_scan_matcher_variance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_has_scan_matcher_variance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_scan_matcher_variance() {
  scan_matcher_variance_ = 0;
  clear_has_scan_matcher_variance();
}
inline double KalmanLocalTrajectoryBuilderOptions::scan_matcher_variance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.scan_matcher_variance)
  return scan_matcher_variance_;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_scan_matcher_variance(double value) {
  set_has_scan_matcher_variance();
  scan_matcher_variance_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.scan_matcher_variance)
}

// optional double odometer_translational_variance = 4;
inline bool KalmanLocalTrajectoryBuilderOptions::has_odometer_translational_variance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_has_odometer_translational_variance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_has_odometer_translational_variance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_odometer_translational_variance() {
  odometer_translational_variance_ = 0;
  clear_has_odometer_translational_variance();
}
inline double KalmanLocalTrajectoryBuilderOptions::odometer_translational_variance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.odometer_translational_variance)
  return odometer_translational_variance_;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_odometer_translational_variance(double value) {
  set_has_odometer_translational_variance();
  odometer_translational_variance_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.odometer_translational_variance)
}

// optional double odometer_rotational_variance = 5;
inline bool KalmanLocalTrajectoryBuilderOptions::has_odometer_rotational_variance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_has_odometer_rotational_variance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_has_odometer_rotational_variance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KalmanLocalTrajectoryBuilderOptions::clear_odometer_rotational_variance() {
  odometer_rotational_variance_ = 0;
  clear_has_odometer_rotational_variance();
}
inline double KalmanLocalTrajectoryBuilderOptions::odometer_rotational_variance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.odometer_rotational_variance)
  return odometer_rotational_variance_;
}
inline void KalmanLocalTrajectoryBuilderOptions::set_odometer_rotational_variance(double value) {
  set_has_odometer_rotational_variance();
  odometer_rotational_variance_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.KalmanLocalTrajectoryBuilderOptions.odometer_rotational_variance)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fkalman_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED
