// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/proto/optimizing_local_trajectory_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping_3d/proto/optimizing_local_trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_3d {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* OptimizingLocalTrajectoryBuilderOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptimizingLocalTrajectoryBuilderOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping_3d/proto/optimizing_local_trajectory_builder_options.proto");
  GOOGLE_CHECK(file != NULL);
  OptimizingLocalTrajectoryBuilderOptions_descriptor_ = file->message_type(0);
  static const int OptimizingLocalTrajectoryBuilderOptions_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizingLocalTrajectoryBuilderOptions, high_resolution_grid_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizingLocalTrajectoryBuilderOptions, low_resolution_grid_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizingLocalTrajectoryBuilderOptions, velocity_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizingLocalTrajectoryBuilderOptions, translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizingLocalTrajectoryBuilderOptions, rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizingLocalTrajectoryBuilderOptions, odometry_translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizingLocalTrajectoryBuilderOptions, odometry_rotation_weight_),
  };
  OptimizingLocalTrajectoryBuilderOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptimizingLocalTrajectoryBuilderOptions_descriptor_,
      OptimizingLocalTrajectoryBuilderOptions::default_instance_,
      OptimizingLocalTrajectoryBuilderOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizingLocalTrajectoryBuilderOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizingLocalTrajectoryBuilderOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptimizingLocalTrajectoryBuilderOptions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptimizingLocalTrajectoryBuilderOptions_descriptor_, &OptimizingLocalTrajectoryBuilderOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
  delete OptimizingLocalTrajectoryBuilderOptions::default_instance_;
  delete OptimizingLocalTrajectoryBuilderOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nOcartographer/mapping_3d/proto/optimizi"
    "ng_local_trajectory_builder_options.prot"
    "o\022\035cartographer.mapping_3d.proto\"\207\002\n\'Opt"
    "imizingLocalTrajectoryBuilderOptions\022#\n\033"
    "high_resolution_grid_weight\030\006 \001(\001\022\"\n\032low"
    "_resolution_grid_weight\030\007 \001(\001\022\027\n\017velocit"
    "y_weight\030\001 \001(\001\022\032\n\022translation_weight\030\002 \001"
    "(\001\022\027\n\017rotation_weight\030\003 \001(\001\022#\n\033odometry_"
    "translation_weight\030\004 \001(\001\022 \n\030odometry_rot"
    "ation_weight\030\005 \001(\001", 378);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping_3d/proto/optimizing_local_trajectory_builder_options.proto", &protobuf_RegisterTypes);
  OptimizingLocalTrajectoryBuilderOptions::default_instance_ = new OptimizingLocalTrajectoryBuilderOptions();
  OptimizingLocalTrajectoryBuilderOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OptimizingLocalTrajectoryBuilderOptions::kHighResolutionGridWeightFieldNumber;
const int OptimizingLocalTrajectoryBuilderOptions::kLowResolutionGridWeightFieldNumber;
const int OptimizingLocalTrajectoryBuilderOptions::kVelocityWeightFieldNumber;
const int OptimizingLocalTrajectoryBuilderOptions::kTranslationWeightFieldNumber;
const int OptimizingLocalTrajectoryBuilderOptions::kRotationWeightFieldNumber;
const int OptimizingLocalTrajectoryBuilderOptions::kOdometryTranslationWeightFieldNumber;
const int OptimizingLocalTrajectoryBuilderOptions::kOdometryRotationWeightFieldNumber;
#endif  // !_MSC_VER

OptimizingLocalTrajectoryBuilderOptions::OptimizingLocalTrajectoryBuilderOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
}

void OptimizingLocalTrajectoryBuilderOptions::InitAsDefaultInstance() {
}

OptimizingLocalTrajectoryBuilderOptions::OptimizingLocalTrajectoryBuilderOptions(const OptimizingLocalTrajectoryBuilderOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
}

void OptimizingLocalTrajectoryBuilderOptions::SharedCtor() {
  _cached_size_ = 0;
  high_resolution_grid_weight_ = 0;
  low_resolution_grid_weight_ = 0;
  velocity_weight_ = 0;
  translation_weight_ = 0;
  rotation_weight_ = 0;
  odometry_translation_weight_ = 0;
  odometry_rotation_weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptimizingLocalTrajectoryBuilderOptions::~OptimizingLocalTrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
  SharedDtor();
}

void OptimizingLocalTrajectoryBuilderOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OptimizingLocalTrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptimizingLocalTrajectoryBuilderOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptimizingLocalTrajectoryBuilderOptions_descriptor_;
}

const OptimizingLocalTrajectoryBuilderOptions& OptimizingLocalTrajectoryBuilderOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2foptimizing_5flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  return *default_instance_;
}

OptimizingLocalTrajectoryBuilderOptions* OptimizingLocalTrajectoryBuilderOptions::default_instance_ = NULL;

OptimizingLocalTrajectoryBuilderOptions* OptimizingLocalTrajectoryBuilderOptions::New() const {
  return new OptimizingLocalTrajectoryBuilderOptions;
}

void OptimizingLocalTrajectoryBuilderOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OptimizingLocalTrajectoryBuilderOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(high_resolution_grid_weight_, odometry_rotation_weight_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptimizingLocalTrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double velocity_weight = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_weight_)));
          set_has_velocity_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_translation_weight;
        break;
      }

      // optional double translation_weight = 2;
      case 2: {
        if (tag == 17) {
         parse_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));
          set_has_translation_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_rotation_weight;
        break;
      }

      // optional double rotation_weight = 3;
      case 3: {
        if (tag == 25) {
         parse_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));
          set_has_rotation_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_odometry_translation_weight;
        break;
      }

      // optional double odometry_translation_weight = 4;
      case 4: {
        if (tag == 33) {
         parse_odometry_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometry_translation_weight_)));
          set_has_odometry_translation_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_odometry_rotation_weight;
        break;
      }

      // optional double odometry_rotation_weight = 5;
      case 5: {
        if (tag == 41) {
         parse_odometry_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometry_rotation_weight_)));
          set_has_odometry_rotation_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_high_resolution_grid_weight;
        break;
      }

      // optional double high_resolution_grid_weight = 6;
      case 6: {
        if (tag == 49) {
         parse_high_resolution_grid_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_resolution_grid_weight_)));
          set_has_high_resolution_grid_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_low_resolution_grid_weight;
        break;
      }

      // optional double low_resolution_grid_weight = 7;
      case 7: {
        if (tag == 57) {
         parse_low_resolution_grid_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_resolution_grid_weight_)));
          set_has_low_resolution_grid_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
  return false;
#undef DO_
}

void OptimizingLocalTrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
  // optional double velocity_weight = 1;
  if (has_velocity_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->velocity_weight(), output);
  }

  // optional double translation_weight = 2;
  if (has_translation_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->translation_weight(), output);
  }

  // optional double rotation_weight = 3;
  if (has_rotation_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rotation_weight(), output);
  }

  // optional double odometry_translation_weight = 4;
  if (has_odometry_translation_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->odometry_translation_weight(), output);
  }

  // optional double odometry_rotation_weight = 5;
  if (has_odometry_rotation_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->odometry_rotation_weight(), output);
  }

  // optional double high_resolution_grid_weight = 6;
  if (has_high_resolution_grid_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->high_resolution_grid_weight(), output);
  }

  // optional double low_resolution_grid_weight = 7;
  if (has_low_resolution_grid_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->low_resolution_grid_weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
}

::google::protobuf::uint8* OptimizingLocalTrajectoryBuilderOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
  // optional double velocity_weight = 1;
  if (has_velocity_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->velocity_weight(), target);
  }

  // optional double translation_weight = 2;
  if (has_translation_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->translation_weight(), target);
  }

  // optional double rotation_weight = 3;
  if (has_rotation_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rotation_weight(), target);
  }

  // optional double odometry_translation_weight = 4;
  if (has_odometry_translation_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->odometry_translation_weight(), target);
  }

  // optional double odometry_rotation_weight = 5;
  if (has_odometry_rotation_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->odometry_rotation_weight(), target);
  }

  // optional double high_resolution_grid_weight = 6;
  if (has_high_resolution_grid_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->high_resolution_grid_weight(), target);
  }

  // optional double low_resolution_grid_weight = 7;
  if (has_low_resolution_grid_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->low_resolution_grid_weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping_3d.proto.OptimizingLocalTrajectoryBuilderOptions)
  return target;
}

int OptimizingLocalTrajectoryBuilderOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double high_resolution_grid_weight = 6;
    if (has_high_resolution_grid_weight()) {
      total_size += 1 + 8;
    }

    // optional double low_resolution_grid_weight = 7;
    if (has_low_resolution_grid_weight()) {
      total_size += 1 + 8;
    }

    // optional double velocity_weight = 1;
    if (has_velocity_weight()) {
      total_size += 1 + 8;
    }

    // optional double translation_weight = 2;
    if (has_translation_weight()) {
      total_size += 1 + 8;
    }

    // optional double rotation_weight = 3;
    if (has_rotation_weight()) {
      total_size += 1 + 8;
    }

    // optional double odometry_translation_weight = 4;
    if (has_odometry_translation_weight()) {
      total_size += 1 + 8;
    }

    // optional double odometry_rotation_weight = 5;
    if (has_odometry_rotation_weight()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptimizingLocalTrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptimizingLocalTrajectoryBuilderOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptimizingLocalTrajectoryBuilderOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptimizingLocalTrajectoryBuilderOptions::MergeFrom(const OptimizingLocalTrajectoryBuilderOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_high_resolution_grid_weight()) {
      set_high_resolution_grid_weight(from.high_resolution_grid_weight());
    }
    if (from.has_low_resolution_grid_weight()) {
      set_low_resolution_grid_weight(from.low_resolution_grid_weight());
    }
    if (from.has_velocity_weight()) {
      set_velocity_weight(from.velocity_weight());
    }
    if (from.has_translation_weight()) {
      set_translation_weight(from.translation_weight());
    }
    if (from.has_rotation_weight()) {
      set_rotation_weight(from.rotation_weight());
    }
    if (from.has_odometry_translation_weight()) {
      set_odometry_translation_weight(from.odometry_translation_weight());
    }
    if (from.has_odometry_rotation_weight()) {
      set_odometry_rotation_weight(from.odometry_rotation_weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptimizingLocalTrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizingLocalTrajectoryBuilderOptions::CopyFrom(const OptimizingLocalTrajectoryBuilderOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizingLocalTrajectoryBuilderOptions::IsInitialized() const {

  return true;
}

void OptimizingLocalTrajectoryBuilderOptions::Swap(OptimizingLocalTrajectoryBuilderOptions* other) {
  if (other != this) {
    std::swap(high_resolution_grid_weight_, other->high_resolution_grid_weight_);
    std::swap(low_resolution_grid_weight_, other->low_resolution_grid_weight_);
    std::swap(velocity_weight_, other->velocity_weight_);
    std::swap(translation_weight_, other->translation_weight_);
    std::swap(rotation_weight_, other->rotation_weight_);
    std::swap(odometry_translation_weight_, other->odometry_translation_weight_);
    std::swap(odometry_rotation_weight_, other->odometry_rotation_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptimizingLocalTrajectoryBuilderOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptimizingLocalTrajectoryBuilderOptions_descriptor_;
  metadata.reflection = OptimizingLocalTrajectoryBuilderOptions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
