// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/sparse_pose_graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/sparse_pose_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* SparsePoseGraph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsePoseGraph_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsePoseGraph_Constraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsePoseGraph_Constraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsePoseGraph_Constraint_SubmapId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsePoseGraph_Constraint_SubmapId_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsePoseGraph_Constraint_ScanId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsePoseGraph_Constraint_ScanId_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SparsePoseGraph_Constraint_Tag_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/sparse_pose_graph.proto");
  GOOGLE_CHECK(file != NULL);
  SparsePoseGraph_descriptor_ = file->message_type(0);
  static const int SparsePoseGraph_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph, constraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph, trajectory_),
  };
  SparsePoseGraph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparsePoseGraph_descriptor_,
      SparsePoseGraph::default_instance_,
      SparsePoseGraph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparsePoseGraph));
  SparsePoseGraph_Constraint_descriptor_ = SparsePoseGraph_descriptor_->nested_type(0);
  static const int SparsePoseGraph_Constraint_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint, submap_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint, scan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint, relative_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint, translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint, rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint, tag_),
  };
  SparsePoseGraph_Constraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparsePoseGraph_Constraint_descriptor_,
      SparsePoseGraph_Constraint::default_instance_,
      SparsePoseGraph_Constraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparsePoseGraph_Constraint));
  SparsePoseGraph_Constraint_SubmapId_descriptor_ = SparsePoseGraph_Constraint_descriptor_->nested_type(0);
  static const int SparsePoseGraph_Constraint_SubmapId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint_SubmapId, trajectory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint_SubmapId, submap_index_),
  };
  SparsePoseGraph_Constraint_SubmapId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparsePoseGraph_Constraint_SubmapId_descriptor_,
      SparsePoseGraph_Constraint_SubmapId::default_instance_,
      SparsePoseGraph_Constraint_SubmapId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint_SubmapId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint_SubmapId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparsePoseGraph_Constraint_SubmapId));
  SparsePoseGraph_Constraint_ScanId_descriptor_ = SparsePoseGraph_Constraint_descriptor_->nested_type(1);
  static const int SparsePoseGraph_Constraint_ScanId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint_ScanId, trajectory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint_ScanId, scan_index_),
  };
  SparsePoseGraph_Constraint_ScanId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparsePoseGraph_Constraint_ScanId_descriptor_,
      SparsePoseGraph_Constraint_ScanId::default_instance_,
      SparsePoseGraph_Constraint_ScanId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint_ScanId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsePoseGraph_Constraint_ScanId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparsePoseGraph_Constraint_ScanId));
  SparsePoseGraph_Constraint_Tag_descriptor_ = SparsePoseGraph_Constraint_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparsePoseGraph_descriptor_, &SparsePoseGraph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparsePoseGraph_Constraint_descriptor_, &SparsePoseGraph_Constraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparsePoseGraph_Constraint_SubmapId_descriptor_, &SparsePoseGraph_Constraint_SubmapId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparsePoseGraph_Constraint_ScanId_descriptor_, &SparsePoseGraph_Constraint_ScanId::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto() {
  delete SparsePoseGraph::default_instance_;
  delete SparsePoseGraph_reflection_;
  delete SparsePoseGraph_Constraint::default_instance_;
  delete SparsePoseGraph_Constraint_reflection_;
  delete SparsePoseGraph_Constraint_SubmapId::default_instance_;
  delete SparsePoseGraph_Constraint_SubmapId_reflection_;
  delete SparsePoseGraph_Constraint_ScanId::default_instance_;
  delete SparsePoseGraph_Constraint_ScanId_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n2cartographer/mapping/proto/sparse_pose"
    "_graph.proto\022\032cartographer.mapping.proto"
    "\032+cartographer/mapping/proto/trajectory."
    "proto\032,cartographer/transform/proto/tran"
    "sform.proto\"\241\005\n\017SparsePoseGraph\022J\n\nconst"
    "raint\030\002 \003(\01326.cartographer.mapping.proto"
    ".SparsePoseGraph.Constraint\022:\n\ntrajector"
    "y\030\004 \003(\0132&.cartographer.mapping.proto.Tra"
    "jectory\032\205\004\n\nConstraint\022R\n\tsubmap_id\030\001 \001("
    "\0132\?.cartographer.mapping.proto.SparsePos"
    "eGraph.Constraint.SubmapId\022N\n\007scan_id\030\002 "
    "\001(\0132=.cartographer.mapping.proto.SparseP"
    "oseGraph.Constraint.ScanId\022<\n\rrelative_p"
    "ose\030\003 \001(\0132%.cartographer.transform.proto"
    ".Rigid3d\022\032\n\022translation_weight\030\006 \001(\001\022\027\n\017"
    "rotation_weight\030\007 \001(\001\022G\n\003tag\030\005 \001(\0162:.car"
    "tographer.mapping.proto.SparsePoseGraph."
    "Constraint.Tag\0327\n\010SubmapId\022\025\n\rtrajectory"
    "_id\030\001 \001(\005\022\024\n\014submap_index\030\002 \001(\005\0323\n\006ScanI"
    "d\022\025\n\rtrajectory_id\030\001 \001(\005\022\022\n\nscan_index\030\002"
    " \001(\005\")\n\003Tag\022\020\n\014INTRA_SUBMAP\020\000\022\020\n\014INTER_S"
    "UBMAP\020\001", 847);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/sparse_pose_graph.proto", &protobuf_RegisterTypes);
  SparsePoseGraph::default_instance_ = new SparsePoseGraph();
  SparsePoseGraph_Constraint::default_instance_ = new SparsePoseGraph_Constraint();
  SparsePoseGraph_Constraint_SubmapId::default_instance_ = new SparsePoseGraph_Constraint_SubmapId();
  SparsePoseGraph_Constraint_ScanId::default_instance_ = new SparsePoseGraph_Constraint_ScanId();
  SparsePoseGraph::default_instance_->InitAsDefaultInstance();
  SparsePoseGraph_Constraint::default_instance_->InitAsDefaultInstance();
  SparsePoseGraph_Constraint_SubmapId::default_instance_->InitAsDefaultInstance();
  SparsePoseGraph_Constraint_ScanId::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SparsePoseGraph_Constraint_Tag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsePoseGraph_Constraint_Tag_descriptor_;
}
bool SparsePoseGraph_Constraint_Tag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SparsePoseGraph_Constraint_Tag SparsePoseGraph_Constraint::INTRA_SUBMAP;
const SparsePoseGraph_Constraint_Tag SparsePoseGraph_Constraint::INTER_SUBMAP;
const SparsePoseGraph_Constraint_Tag SparsePoseGraph_Constraint::Tag_MIN;
const SparsePoseGraph_Constraint_Tag SparsePoseGraph_Constraint::Tag_MAX;
const int SparsePoseGraph_Constraint::Tag_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SparsePoseGraph_Constraint_SubmapId::kTrajectoryIdFieldNumber;
const int SparsePoseGraph_Constraint_SubmapId::kSubmapIndexFieldNumber;
#endif  // !_MSC_VER

SparsePoseGraph_Constraint_SubmapId::SparsePoseGraph_Constraint_SubmapId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId)
}

void SparsePoseGraph_Constraint_SubmapId::InitAsDefaultInstance() {
}

SparsePoseGraph_Constraint_SubmapId::SparsePoseGraph_Constraint_SubmapId(const SparsePoseGraph_Constraint_SubmapId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId)
}

void SparsePoseGraph_Constraint_SubmapId::SharedCtor() {
  _cached_size_ = 0;
  trajectory_id_ = 0;
  submap_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsePoseGraph_Constraint_SubmapId::~SparsePoseGraph_Constraint_SubmapId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId)
  SharedDtor();
}

void SparsePoseGraph_Constraint_SubmapId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparsePoseGraph_Constraint_SubmapId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsePoseGraph_Constraint_SubmapId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsePoseGraph_Constraint_SubmapId_descriptor_;
}

const SparsePoseGraph_Constraint_SubmapId& SparsePoseGraph_Constraint_SubmapId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto();
  return *default_instance_;
}

SparsePoseGraph_Constraint_SubmapId* SparsePoseGraph_Constraint_SubmapId::default_instance_ = NULL;

SparsePoseGraph_Constraint_SubmapId* SparsePoseGraph_Constraint_SubmapId::New() const {
  return new SparsePoseGraph_Constraint_SubmapId;
}

void SparsePoseGraph_Constraint_SubmapId::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SparsePoseGraph_Constraint_SubmapId*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(trajectory_id_, submap_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparsePoseGraph_Constraint_SubmapId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trajectory_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
          set_has_trajectory_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_submap_index;
        break;
      }

      // optional int32 submap_index = 2;
      case 2: {
        if (tag == 16) {
         parse_submap_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_index_)));
          set_has_submap_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId)
  return false;
#undef DO_
}

void SparsePoseGraph_Constraint_SubmapId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId)
  // optional int32 trajectory_id = 1;
  if (has_trajectory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // optional int32 submap_index = 2;
  if (has_submap_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submap_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId)
}

::google::protobuf::uint8* SparsePoseGraph_Constraint_SubmapId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId)
  // optional int32 trajectory_id = 1;
  if (has_trajectory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // optional int32 submap_index = 2;
  if (has_submap_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submap_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId)
  return target;
}

int SparsePoseGraph_Constraint_SubmapId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 trajectory_id = 1;
    if (has_trajectory_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trajectory_id());
    }

    // optional int32 submap_index = 2;
    if (has_submap_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->submap_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsePoseGraph_Constraint_SubmapId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparsePoseGraph_Constraint_SubmapId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparsePoseGraph_Constraint_SubmapId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparsePoseGraph_Constraint_SubmapId::MergeFrom(const SparsePoseGraph_Constraint_SubmapId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trajectory_id()) {
      set_trajectory_id(from.trajectory_id());
    }
    if (from.has_submap_index()) {
      set_submap_index(from.submap_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparsePoseGraph_Constraint_SubmapId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsePoseGraph_Constraint_SubmapId::CopyFrom(const SparsePoseGraph_Constraint_SubmapId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsePoseGraph_Constraint_SubmapId::IsInitialized() const {

  return true;
}

void SparsePoseGraph_Constraint_SubmapId::Swap(SparsePoseGraph_Constraint_SubmapId* other) {
  if (other != this) {
    std::swap(trajectory_id_, other->trajectory_id_);
    std::swap(submap_index_, other->submap_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparsePoseGraph_Constraint_SubmapId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsePoseGraph_Constraint_SubmapId_descriptor_;
  metadata.reflection = SparsePoseGraph_Constraint_SubmapId_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SparsePoseGraph_Constraint_ScanId::kTrajectoryIdFieldNumber;
const int SparsePoseGraph_Constraint_ScanId::kScanIndexFieldNumber;
#endif  // !_MSC_VER

SparsePoseGraph_Constraint_ScanId::SparsePoseGraph_Constraint_ScanId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId)
}

void SparsePoseGraph_Constraint_ScanId::InitAsDefaultInstance() {
}

SparsePoseGraph_Constraint_ScanId::SparsePoseGraph_Constraint_ScanId(const SparsePoseGraph_Constraint_ScanId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId)
}

void SparsePoseGraph_Constraint_ScanId::SharedCtor() {
  _cached_size_ = 0;
  trajectory_id_ = 0;
  scan_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsePoseGraph_Constraint_ScanId::~SparsePoseGraph_Constraint_ScanId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId)
  SharedDtor();
}

void SparsePoseGraph_Constraint_ScanId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparsePoseGraph_Constraint_ScanId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsePoseGraph_Constraint_ScanId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsePoseGraph_Constraint_ScanId_descriptor_;
}

const SparsePoseGraph_Constraint_ScanId& SparsePoseGraph_Constraint_ScanId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto();
  return *default_instance_;
}

SparsePoseGraph_Constraint_ScanId* SparsePoseGraph_Constraint_ScanId::default_instance_ = NULL;

SparsePoseGraph_Constraint_ScanId* SparsePoseGraph_Constraint_ScanId::New() const {
  return new SparsePoseGraph_Constraint_ScanId;
}

void SparsePoseGraph_Constraint_ScanId::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SparsePoseGraph_Constraint_ScanId*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(trajectory_id_, scan_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparsePoseGraph_Constraint_ScanId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trajectory_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
          set_has_trajectory_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_scan_index;
        break;
      }

      // optional int32 scan_index = 2;
      case 2: {
        if (tag == 16) {
         parse_scan_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scan_index_)));
          set_has_scan_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId)
  return false;
#undef DO_
}

void SparsePoseGraph_Constraint_ScanId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId)
  // optional int32 trajectory_id = 1;
  if (has_trajectory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // optional int32 scan_index = 2;
  if (has_scan_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scan_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId)
}

::google::protobuf::uint8* SparsePoseGraph_Constraint_ScanId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId)
  // optional int32 trajectory_id = 1;
  if (has_trajectory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // optional int32 scan_index = 2;
  if (has_scan_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scan_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId)
  return target;
}

int SparsePoseGraph_Constraint_ScanId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 trajectory_id = 1;
    if (has_trajectory_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trajectory_id());
    }

    // optional int32 scan_index = 2;
    if (has_scan_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scan_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsePoseGraph_Constraint_ScanId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparsePoseGraph_Constraint_ScanId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparsePoseGraph_Constraint_ScanId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparsePoseGraph_Constraint_ScanId::MergeFrom(const SparsePoseGraph_Constraint_ScanId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trajectory_id()) {
      set_trajectory_id(from.trajectory_id());
    }
    if (from.has_scan_index()) {
      set_scan_index(from.scan_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparsePoseGraph_Constraint_ScanId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsePoseGraph_Constraint_ScanId::CopyFrom(const SparsePoseGraph_Constraint_ScanId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsePoseGraph_Constraint_ScanId::IsInitialized() const {

  return true;
}

void SparsePoseGraph_Constraint_ScanId::Swap(SparsePoseGraph_Constraint_ScanId* other) {
  if (other != this) {
    std::swap(trajectory_id_, other->trajectory_id_);
    std::swap(scan_index_, other->scan_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparsePoseGraph_Constraint_ScanId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsePoseGraph_Constraint_ScanId_descriptor_;
  metadata.reflection = SparsePoseGraph_Constraint_ScanId_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SparsePoseGraph_Constraint::kSubmapIdFieldNumber;
const int SparsePoseGraph_Constraint::kScanIdFieldNumber;
const int SparsePoseGraph_Constraint::kRelativePoseFieldNumber;
const int SparsePoseGraph_Constraint::kTranslationWeightFieldNumber;
const int SparsePoseGraph_Constraint::kRotationWeightFieldNumber;
const int SparsePoseGraph_Constraint::kTagFieldNumber;
#endif  // !_MSC_VER

SparsePoseGraph_Constraint::SparsePoseGraph_Constraint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SparsePoseGraph.Constraint)
}

void SparsePoseGraph_Constraint::InitAsDefaultInstance() {
  submap_id_ = const_cast< ::cartographer::mapping::proto::SparsePoseGraph_Constraint_SubmapId*>(&::cartographer::mapping::proto::SparsePoseGraph_Constraint_SubmapId::default_instance());
  scan_id_ = const_cast< ::cartographer::mapping::proto::SparsePoseGraph_Constraint_ScanId*>(&::cartographer::mapping::proto::SparsePoseGraph_Constraint_ScanId::default_instance());
  relative_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

SparsePoseGraph_Constraint::SparsePoseGraph_Constraint(const SparsePoseGraph_Constraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SparsePoseGraph.Constraint)
}

void SparsePoseGraph_Constraint::SharedCtor() {
  _cached_size_ = 0;
  submap_id_ = NULL;
  scan_id_ = NULL;
  relative_pose_ = NULL;
  translation_weight_ = 0;
  rotation_weight_ = 0;
  tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsePoseGraph_Constraint::~SparsePoseGraph_Constraint() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SparsePoseGraph.Constraint)
  SharedDtor();
}

void SparsePoseGraph_Constraint::SharedDtor() {
  if (this != default_instance_) {
    delete submap_id_;
    delete scan_id_;
    delete relative_pose_;
  }
}

void SparsePoseGraph_Constraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsePoseGraph_Constraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsePoseGraph_Constraint_descriptor_;
}

const SparsePoseGraph_Constraint& SparsePoseGraph_Constraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto();
  return *default_instance_;
}

SparsePoseGraph_Constraint* SparsePoseGraph_Constraint::default_instance_ = NULL;

SparsePoseGraph_Constraint* SparsePoseGraph_Constraint::New() const {
  return new SparsePoseGraph_Constraint;
}

void SparsePoseGraph_Constraint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SparsePoseGraph_Constraint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(translation_weight_, tag_);
    if (has_submap_id()) {
      if (submap_id_ != NULL) submap_id_->::cartographer::mapping::proto::SparsePoseGraph_Constraint_SubmapId::Clear();
    }
    if (has_scan_id()) {
      if (scan_id_ != NULL) scan_id_->::cartographer::mapping::proto::SparsePoseGraph_Constraint_ScanId::Clear();
    }
    if (has_relative_pose()) {
      if (relative_pose_ != NULL) relative_pose_->::cartographer::transform::proto::Rigid3d::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparsePoseGraph_Constraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SparsePoseGraph.Constraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId submap_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scan_id;
        break;
      }

      // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId scan_id = 2;
      case 2: {
        if (tag == 18) {
         parse_scan_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relative_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d relative_pose = 3;
      case 3: {
        if (tag == 26) {
         parse_relative_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tag;
        break;
      }

      // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.Tag tag = 5;
      case 5: {
        if (tag == 40) {
         parse_tag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cartographer::mapping::proto::SparsePoseGraph_Constraint_Tag_IsValid(value)) {
            set_tag(static_cast< ::cartographer::mapping::proto::SparsePoseGraph_Constraint_Tag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_translation_weight;
        break;
      }

      // optional double translation_weight = 6;
      case 6: {
        if (tag == 49) {
         parse_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));
          set_has_translation_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_rotation_weight;
        break;
      }

      // optional double rotation_weight = 7;
      case 7: {
        if (tag == 57) {
         parse_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));
          set_has_rotation_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SparsePoseGraph.Constraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SparsePoseGraph.Constraint)
  return false;
#undef DO_
}

void SparsePoseGraph_Constraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SparsePoseGraph.Constraint)
  // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId submap_id = 1;
  if (has_submap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->submap_id(), output);
  }

  // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId scan_id = 2;
  if (has_scan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scan_id(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d relative_pose = 3;
  if (has_relative_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->relative_pose(), output);
  }

  // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.Tag tag = 5;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tag(), output);
  }

  // optional double translation_weight = 6;
  if (has_translation_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->translation_weight(), output);
  }

  // optional double rotation_weight = 7;
  if (has_rotation_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rotation_weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SparsePoseGraph.Constraint)
}

::google::protobuf::uint8* SparsePoseGraph_Constraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SparsePoseGraph.Constraint)
  // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId submap_id = 1;
  if (has_submap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->submap_id(), target);
  }

  // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId scan_id = 2;
  if (has_scan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scan_id(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d relative_pose = 3;
  if (has_relative_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->relative_pose(), target);
  }

  // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.Tag tag = 5;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tag(), target);
  }

  // optional double translation_weight = 6;
  if (has_translation_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->translation_weight(), target);
  }

  // optional double rotation_weight = 7;
  if (has_rotation_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rotation_weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SparsePoseGraph.Constraint)
  return target;
}

int SparsePoseGraph_Constraint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.SubmapId submap_id = 1;
    if (has_submap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->submap_id());
    }

    // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.ScanId scan_id = 2;
    if (has_scan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan_id());
    }

    // optional .cartographer.transform.proto.Rigid3d relative_pose = 3;
    if (has_relative_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relative_pose());
    }

    // optional double translation_weight = 6;
    if (has_translation_weight()) {
      total_size += 1 + 8;
    }

    // optional double rotation_weight = 7;
    if (has_rotation_weight()) {
      total_size += 1 + 8;
    }

    // optional .cartographer.mapping.proto.SparsePoseGraph.Constraint.Tag tag = 5;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsePoseGraph_Constraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparsePoseGraph_Constraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparsePoseGraph_Constraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparsePoseGraph_Constraint::MergeFrom(const SparsePoseGraph_Constraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_submap_id()) {
      mutable_submap_id()->::cartographer::mapping::proto::SparsePoseGraph_Constraint_SubmapId::MergeFrom(from.submap_id());
    }
    if (from.has_scan_id()) {
      mutable_scan_id()->::cartographer::mapping::proto::SparsePoseGraph_Constraint_ScanId::MergeFrom(from.scan_id());
    }
    if (from.has_relative_pose()) {
      mutable_relative_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.relative_pose());
    }
    if (from.has_translation_weight()) {
      set_translation_weight(from.translation_weight());
    }
    if (from.has_rotation_weight()) {
      set_rotation_weight(from.rotation_weight());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparsePoseGraph_Constraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsePoseGraph_Constraint::CopyFrom(const SparsePoseGraph_Constraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsePoseGraph_Constraint::IsInitialized() const {

  return true;
}

void SparsePoseGraph_Constraint::Swap(SparsePoseGraph_Constraint* other) {
  if (other != this) {
    std::swap(submap_id_, other->submap_id_);
    std::swap(scan_id_, other->scan_id_);
    std::swap(relative_pose_, other->relative_pose_);
    std::swap(translation_weight_, other->translation_weight_);
    std::swap(rotation_weight_, other->rotation_weight_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparsePoseGraph_Constraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsePoseGraph_Constraint_descriptor_;
  metadata.reflection = SparsePoseGraph_Constraint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SparsePoseGraph::kConstraintFieldNumber;
const int SparsePoseGraph::kTrajectoryFieldNumber;
#endif  // !_MSC_VER

SparsePoseGraph::SparsePoseGraph()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SparsePoseGraph)
}

void SparsePoseGraph::InitAsDefaultInstance() {
}

SparsePoseGraph::SparsePoseGraph(const SparsePoseGraph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SparsePoseGraph)
}

void SparsePoseGraph::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsePoseGraph::~SparsePoseGraph() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SparsePoseGraph)
  SharedDtor();
}

void SparsePoseGraph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparsePoseGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsePoseGraph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsePoseGraph_descriptor_;
}

const SparsePoseGraph& SparsePoseGraph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto();
  return *default_instance_;
}

SparsePoseGraph* SparsePoseGraph::default_instance_ = NULL;

SparsePoseGraph* SparsePoseGraph::New() const {
  return new SparsePoseGraph;
}

void SparsePoseGraph::Clear() {
  constraint_.Clear();
  trajectory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparsePoseGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SparsePoseGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.SparsePoseGraph.Constraint constraint = 2;
      case 2: {
        if (tag == 18) {
         parse_constraint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constraint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_constraint;
        if (input->ExpectTag(34)) goto parse_trajectory;
        break;
      }

      // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
      case 4: {
        if (tag == 34) {
         parse_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_trajectory;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SparsePoseGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SparsePoseGraph)
  return false;
#undef DO_
}

void SparsePoseGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SparsePoseGraph)
  // repeated .cartographer.mapping.proto.SparsePoseGraph.Constraint constraint = 2;
  for (int i = 0; i < this->constraint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->constraint(i), output);
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  for (int i = 0; i < this->trajectory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trajectory(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SparsePoseGraph)
}

::google::protobuf::uint8* SparsePoseGraph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SparsePoseGraph)
  // repeated .cartographer.mapping.proto.SparsePoseGraph.Constraint constraint = 2;
  for (int i = 0; i < this->constraint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->constraint(i), target);
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  for (int i = 0; i < this->trajectory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->trajectory(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SparsePoseGraph)
  return target;
}

int SparsePoseGraph::ByteSize() const {
  int total_size = 0;

  // repeated .cartographer.mapping.proto.SparsePoseGraph.Constraint constraint = 2;
  total_size += 1 * this->constraint_size();
  for (int i = 0; i < this->constraint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraint(i));
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  total_size += 1 * this->trajectory_size();
  for (int i = 0; i < this->trajectory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectory(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsePoseGraph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparsePoseGraph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparsePoseGraph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparsePoseGraph::MergeFrom(const SparsePoseGraph& from) {
  GOOGLE_CHECK_NE(&from, this);
  constraint_.MergeFrom(from.constraint_);
  trajectory_.MergeFrom(from.trajectory_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparsePoseGraph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsePoseGraph::CopyFrom(const SparsePoseGraph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsePoseGraph::IsInitialized() const {

  return true;
}

void SparsePoseGraph::Swap(SparsePoseGraph* other) {
  if (other != this) {
    constraint_.Swap(&other->constraint_);
    trajectory_.Swap(&other->trajectory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparsePoseGraph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsePoseGraph_descriptor_;
  metadata.reflection = SparsePoseGraph_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
