// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/configuration.proto

#ifndef PROTOBUF_cartographer_2fsensor_2fproto_2fconfiguration_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fsensor_2fproto_2fconfiguration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace sensor {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fconfiguration_2eproto();
void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fconfiguration_2eproto();
void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fconfiguration_2eproto();

class Configuration;
class Configuration_Sensor;

// ===================================================================

class Configuration_Sensor : public ::google::protobuf::Message {
 public:
  Configuration_Sensor();
  virtual ~Configuration_Sensor();

  Configuration_Sensor(const Configuration_Sensor& from);

  inline Configuration_Sensor& operator=(const Configuration_Sensor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration_Sensor& default_instance();

  void Swap(Configuration_Sensor* other);

  // implements Message ----------------------------------------------

  Configuration_Sensor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Configuration_Sensor& from);
  void MergeFrom(const Configuration_Sensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string frame_id = 2;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  inline const ::std::string& frame_id() const;
  inline void set_frame_id(const ::std::string& value);
  inline void set_frame_id(const char* value);
  inline void set_frame_id(const char* value, size_t size);
  inline ::std::string* mutable_frame_id();
  inline ::std::string* release_frame_id();
  inline void set_allocated_frame_id(::std::string* frame_id);

  // optional .cartographer.transform.proto.Rigid3d transform = 3;
  inline bool has_transform() const;
  inline void clear_transform();
  static const int kTransformFieldNumber = 3;
  inline const ::cartographer::transform::proto::Rigid3d& transform() const;
  inline ::cartographer::transform::proto::Rigid3d* mutable_transform();
  inline ::cartographer::transform::proto::Rigid3d* release_transform();
  inline void set_allocated_transform(::cartographer::transform::proto::Rigid3d* transform);

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.Configuration.Sensor)
 private:
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_transform();
  inline void clear_has_transform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* frame_id_;
  ::cartographer::transform::proto::Rigid3d* transform_;
  friend void  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fconfiguration_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static Configuration_Sensor* default_instance_;
};
// -------------------------------------------------------------------

class Configuration : public ::google::protobuf::Message {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration& default_instance();

  void Swap(Configuration* other);

  // implements Message ----------------------------------------------

  Configuration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Configuration_Sensor Sensor;

  // accessors -------------------------------------------------------

  // repeated .cartographer.sensor.proto.Configuration.Sensor sensor = 15;
  inline int sensor_size() const;
  inline void clear_sensor();
  static const int kSensorFieldNumber = 15;
  inline const ::cartographer::sensor::proto::Configuration_Sensor& sensor(int index) const;
  inline ::cartographer::sensor::proto::Configuration_Sensor* mutable_sensor(int index);
  inline ::cartographer::sensor::proto::Configuration_Sensor* add_sensor();
  inline const ::google::protobuf::RepeatedPtrField< ::cartographer::sensor::proto::Configuration_Sensor >&
      sensor() const;
  inline ::google::protobuf::RepeatedPtrField< ::cartographer::sensor::proto::Configuration_Sensor >*
      mutable_sensor();

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.Configuration)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::sensor::proto::Configuration_Sensor > sensor_;
  friend void  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fconfiguration_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static Configuration* default_instance_;
};
// ===================================================================


// ===================================================================

// Configuration_Sensor

// optional string frame_id = 2;
inline bool Configuration_Sensor::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Configuration_Sensor::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Configuration_Sensor::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Configuration_Sensor::clear_frame_id() {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_->clear();
  }
  clear_has_frame_id();
}
inline const ::std::string& Configuration_Sensor::frame_id() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.Configuration.Sensor.frame_id)
  return *frame_id_;
}
inline void Configuration_Sensor::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.Configuration.Sensor.frame_id)
}
inline void Configuration_Sensor::set_frame_id(const char* value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:cartographer.sensor.proto.Configuration.Sensor.frame_id)
}
inline void Configuration_Sensor::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cartographer.sensor.proto.Configuration.Sensor.frame_id)
}
inline ::std::string* Configuration_Sensor::mutable_frame_id() {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.Configuration.Sensor.frame_id)
  return frame_id_;
}
inline ::std::string* Configuration_Sensor::release_frame_id() {
  clear_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frame_id_;
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Configuration_Sensor::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_id_;
  }
  if (frame_id) {
    set_has_frame_id();
    frame_id_ = frame_id;
  } else {
    clear_has_frame_id();
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.Configuration.Sensor.frame_id)
}

// optional .cartographer.transform.proto.Rigid3d transform = 3;
inline bool Configuration_Sensor::has_transform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Configuration_Sensor::set_has_transform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Configuration_Sensor::clear_has_transform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Configuration_Sensor::clear_transform() {
  if (transform_ != NULL) transform_->::cartographer::transform::proto::Rigid3d::Clear();
  clear_has_transform();
}
inline const ::cartographer::transform::proto::Rigid3d& Configuration_Sensor::transform() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.Configuration.Sensor.transform)
  return transform_ != NULL ? *transform_ : *default_instance_->transform_;
}
inline ::cartographer::transform::proto::Rigid3d* Configuration_Sensor::mutable_transform() {
  set_has_transform();
  if (transform_ == NULL) transform_ = new ::cartographer::transform::proto::Rigid3d;
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.Configuration.Sensor.transform)
  return transform_;
}
inline ::cartographer::transform::proto::Rigid3d* Configuration_Sensor::release_transform() {
  clear_has_transform();
  ::cartographer::transform::proto::Rigid3d* temp = transform_;
  transform_ = NULL;
  return temp;
}
inline void Configuration_Sensor::set_allocated_transform(::cartographer::transform::proto::Rigid3d* transform) {
  delete transform_;
  transform_ = transform;
  if (transform) {
    set_has_transform();
  } else {
    clear_has_transform();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.Configuration.Sensor.transform)
}

// -------------------------------------------------------------------

// Configuration

// repeated .cartographer.sensor.proto.Configuration.Sensor sensor = 15;
inline int Configuration::sensor_size() const {
  return sensor_.size();
}
inline void Configuration::clear_sensor() {
  sensor_.Clear();
}
inline const ::cartographer::sensor::proto::Configuration_Sensor& Configuration::sensor(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.Configuration.sensor)
  return sensor_.Get(index);
}
inline ::cartographer::sensor::proto::Configuration_Sensor* Configuration::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.Configuration.sensor)
  return sensor_.Mutable(index);
}
inline ::cartographer::sensor::proto::Configuration_Sensor* Configuration::add_sensor() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.Configuration.sensor)
  return sensor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::sensor::proto::Configuration_Sensor >&
Configuration::sensor() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.Configuration.sensor)
  return sensor_;
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::sensor::proto::Configuration_Sensor >*
Configuration::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.Configuration.sensor)
  return &sensor_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fsensor_2fproto_2fconfiguration_2eproto__INCLUDED
